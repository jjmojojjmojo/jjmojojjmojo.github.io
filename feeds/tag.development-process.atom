<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Collected Works of jjmojojjmojo - development process</title><link href="/" rel="alternate"></link><link href="/feeds/tag.development-process.atom" rel="self"></link><id>/</id><updated>2019-07-03T09:00:00-04:00</updated><entry><title>Branching With Git And Testing With Pytest: A Comprehensive Guide: Part 3</title><link href="/branching-git-with-pytest-3.html" rel="alternate"></link><published>2019-07-03T09:00:00-04:00</published><updated>2019-07-03T09:00:00-04:00</updated><author><name>jjmojojjmojo</name></author><id>tag:None,2019-07-03:/branching-git-with-pytest-3.html</id><summary type="html">&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part three of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Simulate collaborative work by two developers.&lt;/li&gt;
&lt;li&gt;Use the workflow we learned in &lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt; to add a new feature, and fix a new bug.&lt;/li&gt;
&lt;li&gt;Create a merge conflict and resolve it.&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part three of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Simulate collaborative work by two developers.&lt;/li&gt;
&lt;li&gt;Use the workflow we learned in &lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt; to add a new feature, and fix a new bug.&lt;/li&gt;
&lt;li&gt;Create a merge conflict and resolve it.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="section" id="setup"&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;As with part 2, you will need to make sure you've got everything set up as outlined in &lt;a class="reference external" href="/branching-git-with-pytest.html#setup"&gt;part 1&lt;/a&gt;, and have merged the changes made in &lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt; to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's a condensed summary:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Ensure you have git, python 3.7+, and venv installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make a bare clone of the base repository to act as our &lt;em&gt;remote&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git clone --bare https://github.com/jjmojojjmojo/random_quote.git random_quote_remote
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Clone our remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git clone random_quote_remote random_quote
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Initialize the virtual environment, and install our requirements and project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;  $&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; random_quote
&lt;span class="gp"&gt;  $&lt;/span&gt; python -m venv .
&lt;span class="gp"&gt;  $&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;span class="go"&gt;  (random_quote) $ pip install -r requirements.txt&lt;/span&gt;
&lt;span class="go"&gt;  (random_quote) $ pip install -e .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Initialize the database, add some randomly generated quotes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;  (random_quote) $ python scripts/generate_quotes.py&lt;/span&gt;
&lt;span class="go"&gt;  (random_quote) $ python&lt;/span&gt;
&lt;span class="go"&gt;  &amp;gt;&amp;gt;&amp;gt; from random_quote import util&lt;/span&gt;
&lt;span class="go"&gt;  &amp;gt;&amp;gt;&amp;gt; util.init("test.db")&lt;/span&gt;
&lt;span class="go"&gt;  util.ingest("quotes.csv", "test.db")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt; and &lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt;. If you had trouble or would like to skip all of that, you can simply checkout the &lt;code&gt;part2&lt;/code&gt; branch&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that you will have to do this to &lt;em&gt;each&lt;/em&gt; clone &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;  $&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ../a
&lt;span class="gp"&gt;  $&lt;/span&gt; git checkout part2
&lt;span class="gp"&gt;  $&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ../b
&lt;span class="gp"&gt;  $&lt;/span&gt; git checkout part2
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;ðŸŒˆ We have branches for all of the major work done in the series:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;part1&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;part2&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt; and
&lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;qotd&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Developer &lt;strong&gt;A&lt;/strong&gt;'s feature from &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;index-info&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Developer &lt;strong&gt;B&lt;/strong&gt;'s bug fix from &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;part3&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;,
&lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;!&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Feel free to &lt;code&gt;git checkout&lt;/code&gt; if you need to reset your code, or jump around.&lt;/p&gt;
&lt;p class="last"&gt;Use &lt;code&gt;git stash&lt;/code&gt; to keep any uncommitted changes for later. See &lt;a class="reference external" href="https://git-scm.com/book/en/v1/Git-Tools-Stashing"&gt;the git documentation&lt;/a&gt; for more information. ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-add-a-feature-fix-another-bug-and-step-on-some-toes"&gt;
&lt;h2 id="let's add a feature, fix another bug, and step on some toes!"&gt;Let's Add A Feature, Fix Another Bug, and &lt;em&gt;Step On Some Toes&lt;/em&gt;!&lt;/h2&gt;
&lt;p&gt;In this part of the guide, we're going to simulate two developers working on different tasks in the same code base.&lt;/p&gt;
&lt;p&gt;Developer &lt;strong&gt;"A"&lt;/strong&gt; will be adding a new feature: "Quote of the Day".&lt;/p&gt;
&lt;p&gt;This feature has the following requirements:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Each day, a new random quote is selected, and made available at &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The quote is saved, and a list of historical quotes can be seen at &lt;code&gt;/qotd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Developer &lt;strong&gt;"B"&lt;/strong&gt; will be fixing a bug: "Root is a 404".&lt;/p&gt;
&lt;p&gt;This bug is more of an oversight. Remember when we first tested the app, visiting &lt;a class="reference external" href="http://127.0.0.1:8080"&gt;http://127.0.0.1:8080&lt;/a&gt; would return a 404 "Not Found" error. This is not a great practice, even though it's technically true, since there is really no resource located at &lt;code&gt;/&lt;/code&gt;. Most people expect to see some sort of information at the root of a website.&lt;/p&gt;
&lt;p&gt;So to fix this bug, developer B will be writing up a little info about what HTTP API endpoints are available to be served when a request for &lt;code&gt;/&lt;/code&gt; comes in.&lt;/p&gt;
&lt;p&gt;The astute reader might notice that these two tasks are in &lt;em&gt;conflict&lt;/em&gt;. Both developers are changing what a request for &lt;code&gt;/&lt;/code&gt; returns.&lt;/p&gt;
&lt;p&gt;This is good for us, because this makes it possible to walk through how to deal with conflicts ðŸ˜€.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;In real life, this situation would have been avoided through &lt;strong&gt;basic communication&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The API is something that shouldn't be altered lightly, and so a discussion amongst developers &lt;em&gt;should&lt;/em&gt; happen whenever it's going to change.&lt;/p&gt;
&lt;p class="last"&gt;However, things like this do happen from time to time. ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Before we begin, lets deactivate our virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; deactivate
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="clone-two-copies-of-the-repository"&gt;
&lt;h2 id="clone two copies of the repository"&gt;Clone Two Copies Of The Repository&lt;/h2&gt;
&lt;p&gt;To get started, lets clone two fresh copies of our &lt;code&gt;random_quote_remote&lt;/code&gt; bare repository that we made earlier. We'll call them simply &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; so we don't get confused ðŸ˜Ž.&lt;/p&gt;
&lt;p&gt;Let's make sure we're in the correct directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="gp"&gt;$&lt;/span&gt; ls
&lt;span class="go"&gt;random_quote&lt;/span&gt;
&lt;span class="go"&gt;random_quote_remote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see from the output of &lt;code&gt;ls&lt;/code&gt; that our original checkout is present, and the special bare copy we made to use as a remote is there as well.&lt;/p&gt;
&lt;p&gt;Next, we'll &lt;code&gt;git clone&lt;/code&gt; the remote twice.&lt;/p&gt;
&lt;p&gt;Make a copy for developer &lt;strong&gt;A&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone random_quote_remote a
&lt;span class="go"&gt;Cloning into 'a'...&lt;/span&gt;
&lt;span class="go"&gt;done.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And another for developer &lt;strong&gt;B&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone random_quote_remote b
&lt;span class="go"&gt;Cloning into 'b'...&lt;/span&gt;
&lt;span class="go"&gt;done.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If you have opted to skip following &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt; and
&lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt;, you'll need to &lt;code&gt;git checkout part2&lt;/code&gt; in each repository before proceeding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;We're going to work on the feature first, then the bug, so things shouldn't be too confusing. Pay attention to the shell prompt in the examples, when the &lt;code&gt;venv&lt;/code&gt; virtual environment is active, the prompt changes to the name of the directory. We've carried the prompt changes through to the examples in this guide, so you'll know what clone you're working on:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Developer A&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt; (a) $&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Developer B&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt; (b) $&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="develper-a-builds-a-new-feature-quote-of-the-day"&gt;
&lt;h2 id="develper a builds a new feature: quote of the day"&gt;Develper &lt;em&gt;A&lt;/em&gt; Builds A New Feature: Quote Of The Day&lt;/h2&gt;
&lt;p&gt;As we discussed when covering the feature requirements, we want our code to have an end point that will always return the "quote of the day" for each 24-hour period. We'd also like to keep a historical record of all the previous quotes that were saved.&lt;/p&gt;
&lt;p&gt;There are a few ways to approach this, but there are two sub-features that need to be designed:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Generating a random quote every day.&lt;/li&gt;
&lt;li&gt;Keeping historical records of past quotes.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="first-lets-branch"&gt;
&lt;h3&gt;First, Lets Branch&lt;/h3&gt;
&lt;p&gt;In repository &lt;code&gt;a&lt;/code&gt;, create a new branch called &lt;code&gt;qotd&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; a
&lt;span class="gp"&gt;$&lt;/span&gt; git checkout -b qotd
&lt;span class="go"&gt;Switched to a new branch 'qotd'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="init"&gt;
&lt;h3&gt;Init&lt;/h3&gt;
&lt;p&gt;Remember that since this is a fresh clone, we'll need to initialize the virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv .
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;span class="gp"&gt;(a) $&lt;/span&gt; pip install -r requirements.txt
&lt;span class="gp"&gt;(a) $&lt;/span&gt; pip install -e .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, copy the database file from your other clone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; cp ../random_quote/test.db .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or initialize a new one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python scripts/generate_quotes.py
&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; from random_quote import util
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; util.init&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;util.ingest("quotes.csv", "test.db")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design-daily-quotes"&gt;
&lt;h3&gt;Design: Daily Quotes&lt;/h3&gt;
&lt;p&gt;Off hand, a few possibilities exist for handling this. ðŸ¤”&lt;/p&gt;
&lt;p&gt;We could:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define a process, that, at midnight each night, uses the &lt;code&gt;RandomQuoteManager&lt;/code&gt; to select a random quote. This would happen outside of the application or people using it. It could be a manual process, or &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cron"&gt;automated as a scheduled job or task&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Write a function that will pre-generate random quotes for each day of a given time period. This could also be run by a human, or automated to happen on a given interval (once a year, once a month, etc).&lt;/li&gt;
&lt;li&gt;Wait until a quote of the day is requested, generate it on demand and return it, or return the current quote of the day if it's already been generated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first two possibilities have advantages when the historical listing of previous quotes of the day is important. There will be a quote for every day, and if users need that, those approaches are more useful. In either case, there will never be a day (unless the process or function doesn't run or cover a particular day) where a quote isn't generated.&lt;/p&gt;
&lt;p&gt;On the other hand, generating quotes on demand means that we'll only ever have quotes for days when &lt;em&gt;at least one user&lt;/em&gt; requested a quote of the day. The advantage to this is that we never store more data than we need to. The down-side is that we can't count on any given day to have a quote. If our API has a lot of use, it may never be an issue, but there will likely always be holes in the data. As before, it really depends on how the historical quotes are used.&lt;/p&gt;
&lt;p&gt;There are other considerations as well. Generating the quote on demand means that the quote generation happens at most once per day (but also &lt;em&gt;at least&lt;/em&gt; once per day), whereas the other two options can batch the load of generating quotes. In option 2, we could generate &lt;em&gt;thousands&lt;/em&gt; of days of quotes if we wanted to, all at once. In this way, pre-populating the quotes moves the burden of generating a quote away from the process of a user requesting a quote of the day. This keeps the API from becoming less responsive.&lt;/p&gt;
&lt;p&gt;Our app is doing simple things, and generating a random quote is a pretty quick process. So the impact on users, even if a special quote of the day was generated for every single one, every day, would be minimal. In other applications, pre-loading is preferred, because the cost of generating the data that's being provided to the user can be higher and can impact their ability to effectively use the application. You don't want the fact that you're generating data on the fly to make your API less responsive.&lt;/p&gt;
&lt;p&gt;All that considered, our use case is simple, and our process for making a quote of the day will be lightweight, so we'll opt to generate our quote of the day on the fly, as needed. We'll build the functionality such that it's easy to automate this process later if generating a quote becomes more expensive, thus getting the best of both worlds.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;One other thing we can do that might help is use &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control"&gt;the HTTP caching headers&lt;/a&gt; to tell clients that they only need to make a new request to the quote of the day endpoint once per day.&lt;/p&gt;
&lt;p class="last"&gt;This is out of scope for this guide, but something to always consider when building web applications. ðŸŒˆ&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design-past-quotes-of-the-day"&gt;
&lt;h3&gt;Design: Past Quotes Of The Day&lt;/h3&gt;
&lt;p&gt;The other aspect of this feature is keeping old quotes around after the day they're generated.&lt;/p&gt;
&lt;p&gt;Since we're already using a relational database, it's a good candidate for storing quotes of the day.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This may seem obvious, but it's another important thing to remember: just because we're already using a certain pattern or method of storing data, it doesn't automatically make it the &lt;em&gt;best&lt;/em&gt; pattern or method. ðŸ˜Ž&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can add a new table, called &lt;code&gt;quote_of_the_day&lt;/code&gt; to store each generated quote. We'll query that database table and use SQL to return the right quote for the current day.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;We are building a rudimentary &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cache_(computing)"&gt;cache&lt;/a&gt; here. This pattern is extremely useful in application development, especially web development.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's our updated ER diagram:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/er-diagram-second-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;The new &lt;code&gt;quote_of_the_day&lt;/code&gt; table consists of four columns:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;quote_id&lt;/code&gt;, an integer, the ID of the quote that was selected. We'll put a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Foreign_key"&gt;foreign key constraint&lt;/a&gt; on the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;quotes&lt;/code&gt; table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other three columns will encode the day, month and year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;day&lt;/code&gt;, integer, the day of the month (1-31)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;month&lt;/code&gt;, integer, the month (1-12)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;year&lt;/code&gt;, integer, the year (e.g. 2019)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll put a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unique_key"&gt;unique constraint&lt;/a&gt; on these three columns - this prevents anyone from inserting a second quote of the day for any given month/day/year.&lt;/p&gt;
&lt;p&gt;By using three columns, we have a few benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Integers are (usually) stored in a form that takes up less space/memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We can easily get all the quotes for a given month, or year by just using a &lt;code&gt;WHERE&lt;/code&gt; clause&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- Get all quote id's from March of 2025&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;quote_id&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;qote_of_the_day&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2025&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There's no need to worry about the &lt;em&gt;time&lt;/em&gt; portion of the typical date-time storage format (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Julian_calendar"&gt;Julian&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unix_time"&gt;Unix&lt;/a&gt;). This means we don't have to be concerned with timezones, or what happens when a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Locale_(computer_software)"&gt;locale&lt;/a&gt; difference makes a given time occur on a different calendar day.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The SQL needed to generate the new table looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;quote_of_the_day&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;quote_id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;day&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;month&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;year&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;UNIQUE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="design-api-endpoints"&gt;
&lt;h3&gt;Design: API Endpoints&lt;/h3&gt;
&lt;p&gt;Our new feature will require two new endpoints:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a GET request to &lt;code&gt;/&lt;/code&gt; will show the quote of the day (and create it if it's not present), as a single JSON object.&lt;/li&gt;
&lt;li&gt;a GET request to &lt;code&gt;/qotd&lt;/code&gt; will return a JSON list of quote objects that were previously generated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation-quote-of-the-day-api"&gt;
&lt;h3&gt;Implementation: Quote Of The Day API&lt;/h3&gt;
&lt;p&gt;We'll opt to create a new psuedo-manager class, called &lt;code&gt;QuoteOfTheDay&lt;/code&gt;. It will be responsible for retrieving a quote for a given day. It will retrieve an existing quote if one is present, generate a new one and save it if not. The default will be the current day, but it will be possible to create or retrieve a quote for &lt;em&gt;any&lt;/em&gt; day in the same manner.&lt;/p&gt;
&lt;p&gt;For convenience, we'll add an instance of &lt;code&gt;QuoteOfTheDay&lt;/code&gt; to &lt;code&gt;RandomQuoteManager&lt;/code&gt;, as the &lt;code&gt;qotd&lt;/code&gt; property.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/application-overview-second-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Before we start, we need to add the new table to our &lt;code&gt;test.db&lt;/code&gt; file. First, add the following to &lt;code&gt;src/random_quote/schema.sql&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;quote_of_the_day&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;quote_id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;day&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;month&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;year&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;UNIQUE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Next we'll use our &lt;code&gt;util.init()&lt;/code&gt; function, as we did when originally setting up the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; python
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; from random_quote.util import init
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; init&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; quit&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;We can re-run &lt;code&gt;init()&lt;/code&gt; as often as we like because of the &lt;code&gt;IF NOT EXISTS&lt;/code&gt; clause in &lt;code&gt;CREATE TABLE&lt;/code&gt; and &lt;code&gt;CREATE INDEX&lt;/code&gt;. Otherwise, we'd have to either &lt;code&gt;DROP&lt;/code&gt; the old tables/index first, or run each &lt;code&gt;CREATE&lt;/code&gt; statement separately.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now we can add the code for our &lt;code&gt;QuoteOfTheDay&lt;/code&gt; class. We'll place this in a new &lt;code&gt;src/random_quote/qotd.py&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;Here's the code you need to add.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Generate a random quote of the day.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QuoteOfTheDay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.manager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_date_parts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Helper method to convert a date to the day/month/year that is&lt;/span&gt;
&lt;span class="sd"&gt;        stored in the database.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return the quote of the day for a given date, or the current date&lt;/span&gt;
&lt;span class="sd"&gt;        if one isn't specified.&lt;/span&gt;

&lt;span class="sd"&gt;        If no quote exists for that date, one is generated and saved.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_date_parts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;                  SELECT quotes.quote,&lt;/span&gt;
&lt;span class="s2"&gt;                         quotes.created,&lt;/span&gt;
&lt;span class="s2"&gt;                         qotd.quote_id,&lt;/span&gt;
&lt;span class="s2"&gt;                         qotd.day,&lt;/span&gt;
&lt;span class="s2"&gt;                         qotd.month,&lt;/span&gt;
&lt;span class="s2"&gt;                         qotd.year&lt;/span&gt;
&lt;span class="s2"&gt;                    FROM quotes, quote_of_the_day as qotd&lt;/span&gt;
&lt;span class="s2"&gt;                   WHERE quotes.id = qotd.quote_id&lt;/span&gt;
&lt;span class="s2"&gt;                     AND day=?&lt;/span&gt;
&lt;span class="s2"&gt;                     AND month=?&lt;/span&gt;
&lt;span class="s2"&gt;                     AND year=?&lt;/span&gt;
&lt;span class="s2"&gt;                  """&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Add a quote of the day for a given date, or the current date&lt;/span&gt;
&lt;span class="sd"&gt;        if one isn't specified.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_date_parts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;            INSERT INTO quote_of_the_day&lt;/span&gt;
&lt;span class="s2"&gt;                        (quote_id, day, month, year)&lt;/span&gt;
&lt;span class="s2"&gt;                 VALUES (?, ?, ?, ?)&lt;/span&gt;
&lt;span class="s2"&gt;           """&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;'quote_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'quote'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'quote'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'created'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'created'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;'day'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'month'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'year'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Retrieve all existing quotes of the day.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;                  SELECT quotes.quote,&lt;/span&gt;
&lt;span class="s2"&gt;                         quotes.created,&lt;/span&gt;
&lt;span class="s2"&gt;                         qotd.quote_id,&lt;/span&gt;
&lt;span class="s2"&gt;                         qotd.day,&lt;/span&gt;
&lt;span class="s2"&gt;                         qotd.month,&lt;/span&gt;
&lt;span class="s2"&gt;                         qotd.year&lt;/span&gt;
&lt;span class="s2"&gt;                    FROM quotes, quote_of_the_day as qotd&lt;/span&gt;
&lt;span class="s2"&gt;                   WHERE quotes.id = qotd.quote_id&lt;/span&gt;
&lt;span class="s2"&gt;                ORDER BY qotd.year, qotd.month, qotd.day&lt;/span&gt;
&lt;span class="s2"&gt;                  """&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;We implement &lt;code&gt;QuoteOfTheDay&lt;/code&gt; as a class.&lt;/p&gt;
&lt;p&gt;The constructor, &lt;code&gt;__init__()&lt;/code&gt; take two parameters. The first, like &lt;code&gt;RandomQuoteManager&lt;/code&gt; and &lt;code&gt;RandomQuoteApp&lt;/code&gt; is the path to the sqlite database file.&lt;/p&gt;
&lt;p&gt;The second parameter is an optional &lt;code&gt;RandomQuoteManager&lt;/code&gt; instance. If one is provided, it is used as-is. However, if that parameter is omitted, a new instance is created using the passed-in database file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RandomQuoteManager&lt;/code&gt; will have a corresponding optional &lt;code&gt;QuoteOfTheDay&lt;/code&gt; instance, so the constructor uses a &lt;em&gt;conditional import&lt;/em&gt; to prevent issues with a never-ending import cycle. If &lt;code&gt;random_quote.manager&lt;/code&gt; imports &lt;code&gt;random_quote.qotd&lt;/code&gt; and &lt;code&gt;random_quote.qotd&lt;/code&gt; imports &lt;code&gt;random_quote.manager&lt;/code&gt; in their module scope, it creates a sort of infinite loop of imports.&lt;/p&gt;
&lt;p&gt;We use this &lt;code&gt;RandomQuoteManager&lt;/code&gt; instance to get a random quote in the &lt;code&gt;add()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;In both cases, the corresponding instance is used to provide an extended API. This is a simplistic form of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;dependency injection&lt;/a&gt;, allowing the user to configure their &lt;code&gt;RandomQuoteManager&lt;/code&gt; to their liking before passing it, or providing a completely different kind of object that implements the same interface.&lt;/p&gt;
&lt;p&gt;The rest of the module should be fairly self-explanatory.&lt;/p&gt;
&lt;p&gt;One important thing to note is that the &lt;code&gt;get()&lt;/code&gt; method automatically calls &lt;code&gt;add()&lt;/code&gt; in the event that no quote of the day is found for the given date.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We'll also need to add an import to &lt;code&gt;src/random_quote/__init__.py&lt;/code&gt;, so we can access &lt;code&gt;QuoteOfTheDay&lt;/code&gt; from the &lt;code&gt;random_quote.qotd&lt;/code&gt; module:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;qotd&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Next we'll add the &lt;code&gt;qotd&lt;/code&gt; property to &lt;code&gt;RandomQuoteManager&lt;/code&gt; via it's constructor, in &lt;code&gt;src/random_quote/manager.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;API code for dealing with the quote database.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.qotd&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QuoteOfTheDay&lt;/span&gt;
&lt;/span&gt;
&lt;span class="n"&gt;RAND_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9223372036854775808&lt;/span&gt;
&lt;span class="n"&gt;RAND_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9223372036854775807&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;qotd&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QuoteOfTheDay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qotd&lt;/span&gt;
&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This change allows for API extension and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;dependency injection&lt;/a&gt; that is similar to (and complements) the implementation of &lt;code&gt;QuoteOfTheDay.__init__()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It's a good idea to make a commit after this work is done. This should be second nature by now, but lets walk through the steps, since we're doing something new: adding an untracked file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch qotd&lt;/span&gt;
&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/__init__.py&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/schema.sql&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/manager.py&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="go"&gt;    src/random_quote/qotd.py&lt;/span&gt;
&lt;/span&gt;&lt;span class="go"&gt;    test.db&lt;/span&gt;

&lt;span class="go"&gt;no changes added to commit (use "git add" and/or "git commit -a")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we now have a file we care about in the &lt;code&gt;Untracked files&lt;/code&gt; section, &lt;code&gt;src/random_quote/qotd.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We have to &lt;code&gt;git add&lt;/code&gt; it in order to get it into our commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git add src/random_quote/qotd.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, &lt;code&gt;git status&lt;/code&gt; shows &lt;code&gt;src/random_quote/qotd.py&lt;/code&gt; as a new file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch qotd&lt;/span&gt;
&lt;span class="go"&gt;Changes to be committed:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git reset HEAD &amp;lt;file&amp;gt;..." to unstage)&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="go"&gt;    new file:   src/random_quote/qotd.py&lt;/span&gt;
&lt;/span&gt;
&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/__init__.py&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/manager.py&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/schema.sql&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;git commit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git commit -a -m&lt;span class="s2"&gt;"Added first-pass of quote of the day functionality"&lt;/span&gt;
&lt;span class="go"&gt;[qotd 53ae911] Added first-pass of quote of the day functionality&lt;/span&gt;
&lt;span class="go"&gt; 4 files changed, 132 insertions(+), 3 deletions(-)&lt;/span&gt;
&lt;span class="go"&gt; create mode 100644 src/random_quote/qotd.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="back-end-api-tests"&gt;
&lt;h3&gt;Back-End API Tests&lt;/h3&gt;
&lt;p&gt;We'll put the main quote of the day tests in &lt;code&gt;src/random_quote/tests/test_qotd.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll make use of the &lt;code&gt;preconfigured_manager()&lt;/code&gt; fixture. This will use &lt;code&gt;fix_random()&lt;/code&gt;, and populate the database with some quotes for us.&lt;/p&gt;
&lt;p&gt;Then add the tests to &lt;code&gt;src/random_quote/tests/test_qotd.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Test the "Quote of the day" functionality.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_quote_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Helper function to get a quote id for the given day/month/year&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT quote_id FROM quote_of_the_day WHERE day = ? AND month = ? AND year = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Add a new quote of the day, for the current day.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_quote_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quote_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_qotd_with_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Add a new quote of the day, for a given day.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2025&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_quote_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2025&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quote_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_duplicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Try to add an additional quote of the day.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2025&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegrityError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_without_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get a quote of the day, no date specified. Should create a new QOTD.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_quote_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quote_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_with_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get a quote of the day, for a specified date. Should create a new QOTD.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2025&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_quote_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2025&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quote_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Add and retrieve several quotes of the day.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2025&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;date1&lt;/span&gt;
    &lt;span class="n"&gt;date3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;date2&lt;/span&gt;

    &lt;span class="n"&gt;quote1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quote2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quote3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote2&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This test suite is fairly self-explanatory.&lt;/p&gt;
&lt;p&gt;The common theme with the test cases is that each test uses the current date or a specific date to identify if a quote is being stored. The &lt;code&gt;get_quote_id()&lt;/code&gt; helper function assists with this.&lt;/p&gt;
&lt;p&gt;Essentially, we're running each test, and then checking the database to see if the expected record was inserted.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Lets also add a new test case to &lt;code&gt;src/random_quote/tests/test_manager.py&lt;/code&gt; to make sure that the &lt;code&gt;qotd&lt;/code&gt; property exists:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;75
76
77
78
79
80
81&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Ensure the qotd property exists.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote.qotd&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QuoteOfTheDay&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QuoteOfTheDay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Run the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/a&lt;/span&gt;
&lt;span class="go"&gt;collected 17 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py .......                            [ 41%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py ......                                [ 76%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ....                                  [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 17 passed in 0.20 seconds ===========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, &lt;code&gt;git add&lt;/code&gt; the &lt;code&gt;src/random_quote/tests/test_qotd.py&lt;/code&gt; file, and commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation-web-api-endpoints"&gt;
&lt;h3&gt;Implementation: Web API Endpoints&lt;/h3&gt;
&lt;p&gt;Here's the updated path map:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/path-map-second-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;To implement the quote of the day functionality in &lt;code&gt;RandomQuoteApp&lt;/code&gt;, we'll add the methods &lt;code&gt;qotd()&lt;/code&gt; and &lt;code&gt;qotd_listing()&lt;/code&gt; which will return the current quote of the day, or all quotes of the day, respectively:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return today's quote of the day.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;qotd_listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        List all existing quotes of the day.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then we need to update the routing, in &lt;code&gt;__call__()&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd_listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/quotes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/quote"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/random"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We can run the http server again and try it out in our browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; gunicorn -b &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8080 -t &lt;span class="m"&gt;9999999&lt;/span&gt; -w &lt;span class="m"&gt;1&lt;/span&gt; --reload wsgi:app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you look at &lt;a class="reference external" href="http://127.0.0.1:8080"&gt;http://127.0.0.1:8080&lt;/a&gt;, you'll notice a quote of the day is returned, instead of a 404:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-root-second-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;And loading &lt;a class="reference external" href="http://127.0.0.1:8080/qotd"&gt;http://127.0.0.1:8080/qotd&lt;/a&gt; returns a list, showing the quote that was just generated:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-qotd-first-pass.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tests-for-the-web-api"&gt;
&lt;h3&gt;Tests For The Web API&lt;/h3&gt;
&lt;p&gt;Now we need to add tests to &lt;code&gt;src/random_quote/tests/test_wsgi.py&lt;/code&gt;. First we need to add a necessary import, since we're going to be using some functions from &lt;code&gt;datetime&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Functional tests of the WSGI application.&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Then add three new tests to the bottom of the file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make a GET request for /&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;json_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;json_quote&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Request the list of quotes of the day at /qotd - no existing quotes&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Request the list of quotes of the day at /qotd&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;quote1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quote2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;To quit &lt;code&gt;gunicorn&lt;/code&gt;, type control-C.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Running the tests, we see the new ones have been picked up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;(a) pytest -v src&lt;/span&gt;
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0 -- [...]/a/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/a&lt;/span&gt;
&lt;span class="go"&gt;collected 20 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_add_quote PASSED             [  5%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_get_quote PASSED             [ 10%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_remove_quote PASSED          [ 15%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_all PASSED                   [ 20%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_random_quote PASSED          [ 25%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_unknown_id PASSED            [ 30%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_qotd PASSED                  [ 35%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py::test_add_qotd PASSED                 [ 40%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py::test_add_qotd_with_date PASSED       [ 45%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py::test_add_duplicate PASSED            [ 50%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py::test_get_without_date PASSED         [ 55%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py::test_get_with_date PASSED            [ 60%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py::test_all PASSED                      [ 65%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote PASSED                [ 70%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_all_quotes PASSED               [ 75%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_random_quote PASSED             [ 80%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote_unknown_id PASSED     [ 85%]&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_root PASSED                     [ 90%]&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_qotd_empty PASSED               [ 95%]&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_qotd PASSED                     [100%]&lt;/span&gt;
&lt;/span&gt;
&lt;span class="go"&gt;=========================== 20 passed in 0.52 seconds ===========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit your changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-bump"&gt;
&lt;h3&gt;Version Bump&lt;/h3&gt;
&lt;p&gt;As we did in &lt;a class="reference external" href="/branching-git-with-pytest-2.rst"&gt;part 2&lt;/a&gt;, change the version in &lt;code&gt;setup.py&lt;/code&gt;. This time, set the version to &lt;strong&gt;0.2.0&lt;/strong&gt;, since we have a new feature that is backwards-compatible with the &lt;strong&gt;0.1.0&lt;/strong&gt; version.&lt;/p&gt;
&lt;p&gt;Don't forget to re-install (&lt;code&gt;pip install -e .&lt;/code&gt;), re-run the tests (&lt;code&gt;pytest src&lt;/code&gt;), and &lt;code&gt;git commit&lt;/code&gt; your changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rebase-to-master"&gt;
&lt;h3&gt;Rebase To &lt;code&gt;master&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Since we've only done this process once, lets walk through it again.&lt;/p&gt;
&lt;p&gt;First we need to &lt;code&gt;git fetch&lt;/code&gt; any outstanding remote changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git fetch origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, interactive &lt;code&gt;git rebase&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git rebase -i master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be sure to &lt;code&gt;pick&lt;/code&gt; the oldest (first) commit, and &lt;code&gt;squash&lt;/code&gt; the rest. Don't forget to write a nice log entry when &lt;code&gt;git rebase&lt;/code&gt; gives you the chance.&lt;/p&gt;
&lt;p&gt;You can try preserving the old commit messages and adding a summary on the first line:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FEATURE: Quote Of The Day

Added first-pass of quote of the day functionality
Added tests for Quote Of The Day feature
Added HTTP API support for the quote of the day
Set version to 0.2.0
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Re-run the tests to make sure nothing went wrong (there should be 20 passing tests):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/a&lt;/span&gt;
&lt;span class="go"&gt;collected 20 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py .......                            [ 35%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py ......                                [ 65%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py .......                               [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 20 passed in 0.61 seconds ===========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="checkout-and-merge-master"&gt;
&lt;h3&gt;Checkout And Merge &lt;code&gt;master&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;First, &lt;code&gt;git checkout&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git checkout master
&lt;span class="go"&gt;Switched to branch 'master'&lt;/span&gt;
&lt;span class="go"&gt;Your branch is up to date with 'origin/master'.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then &lt;code&gt;git merge&lt;/code&gt; to your &lt;code&gt;qotd&lt;/code&gt; feature branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git merge qotd
&lt;span class="go"&gt;Updating c2a655e..150ba38&lt;/span&gt;
&lt;span class="go"&gt;Fast-forward&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/__init__.py           |   3 +-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/manager.py            |   9 ++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/qotd.py               | 114 ++++++++++++++++++++++++++++++++++&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/schema.sql            |  11 +++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/conftest.py     |  26 +++++++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/test_manager.py |  10 ++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/test_qotd.py    |  96 ++++++++++++++++++++++++++++&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/test_wsgi.py    |  42 ++++++++++++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/wsgi.py               |  29 ++++++++-&lt;/span&gt;
&lt;span class="go"&gt; 9 files changed, 332 insertions(+), 8 deletions(-)&lt;/span&gt;
&lt;span class="go"&gt; create mode 100644 src/random_quote/qotd.py&lt;/span&gt;
&lt;span class="go"&gt; create mode 100644 src/random_quote/tests/test_qotd.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run the tests again (&lt;code&gt;pytest src&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="push"&gt;
&lt;h3&gt;Push&lt;/h3&gt;
&lt;p&gt;Finally, publish the changes using &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; git push origin master
&lt;span class="go"&gt;Enumerating objects: 25, done.&lt;/span&gt;
&lt;span class="go"&gt;Counting objects: 100% (25/25), done.&lt;/span&gt;
&lt;span class="go"&gt;Delta compression using up to 8 threads&lt;/span&gt;
&lt;span class="go"&gt;Compressing objects: 100% (13/13), done.&lt;/span&gt;
&lt;span class="go"&gt;Writing objects: 100% (14/14), 3.44 KiB | 3.44 MiB/s, done.&lt;/span&gt;
&lt;span class="go"&gt;Total 14 (delta 6), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt;To [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt;   c2a655e..150ba38  master -&amp;gt; master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="developer-b-fixes-a-bug-and-deals-with-a-git-conflict"&gt;
&lt;h2 id="developer b fixes a bug and deals with a git conflict"&gt;Developer &lt;em&gt;B&lt;/em&gt; Fixes A Bug And Deals With a Git Conflict&lt;/h2&gt;
&lt;p&gt;Now, switch to the &lt;code&gt;b&lt;/code&gt; clone. We're going to pretend that developer &lt;strong&gt;B&lt;/strong&gt; is doing their bug-fix concurrently with the feature that developer &lt;strong&gt;A&lt;/strong&gt; just pushed.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;deactivate&lt;/code&gt; the virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; deactivate
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then change into the &lt;code&gt;b&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ../b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Initialize, activate, install, run the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv .
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;span class="gp"&gt;(b) $&lt;/span&gt; pip install -r requirements.txt
&lt;span class="gp"&gt;(b) $&lt;/span&gt; pip install -e .
&lt;span class="gp"&gt;(b) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/b&lt;/span&gt;
&lt;span class="go"&gt;collected 10 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py ......                             [ 60%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ....                                  [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 10 passed in 0.49 seconds ===========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note there are only 10 tests. This is because our copy of &lt;code&gt;master&lt;/code&gt; is from &lt;em&gt;before&lt;/em&gt; developer &lt;strong&gt;A&lt;/strong&gt; did their work.&lt;/p&gt;
&lt;p&gt;Next, copy the database file again, from your original &lt;code&gt;random_quote&lt;/code&gt; checkout,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(a) $&lt;/span&gt; cp ../random_quote/test.db .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or re-initialize, if you'd like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python scripts/generate_quotes.py
&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;util.ingest("quotes.csv", "test.db")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="design"&gt;
&lt;h3&gt;Design&lt;/h3&gt;
&lt;p&gt;This bug fix is simply just returning &lt;em&gt;something&lt;/em&gt; when an HTTP client makes a GET request for &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll add a static HTML file to the source that will provide links to, and useful info about, each of the API endpoints. It will be served when a GET request is made for &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll use the &lt;code&gt;webob.static.FileApp&lt;/code&gt; class to serve the file. This handles buffering and streaming properly for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make-the-branch"&gt;
&lt;h3&gt;Make The Branch&lt;/h3&gt;
&lt;p&gt;Lets check out and create our branch. We'll call this one &lt;code&gt;index-info&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git checkout -b index-info
&lt;span class="go"&gt;Switched to a new branch 'index-info'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fix-the-bug"&gt;
&lt;h3&gt;Fix The Bug&lt;/h3&gt;
&lt;p&gt;Lets construct a simple &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5"&gt;HTML5&lt;/a&gt; file that has the information about the API within it. The links will be &lt;em&gt;relative&lt;/em&gt;. This allows for flexibility in how we host the API. We'll put it in a special directory within the source.&lt;/p&gt;
&lt;p&gt;First, create the new &lt;code&gt;src/random_quote/static&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; mkdir src/random_quote/static
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We're using this name because it indicates there are files that need to be served without being processed. We're setting up an entire directory to give us some flexibility in the future. We may want to add some additional static assets (such as images or CSS files) to our API documentation, or build some sort of front-end for the browser. We can switch to using the &lt;code&gt;webob.static.DirectoryApp&lt;/code&gt; class and serve the entire directory at once.&lt;/p&gt;
&lt;p&gt;Add the following to &lt;code&gt;src/random_quote/static/index.html&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Random Quote API&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Random Quote API&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to the Random Quote API. This API provides random quote functionality via HTTP.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;API Endpoints&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;All endpoints only work with GET requests. All responses are JSON&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"quote/1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;/quote/1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Retrieve a specific quote by its ID. In this example, we are retrieving quote #1.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"quotes"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;/quotes&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Retrieve all quotes.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"random"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;/random&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Retrieve a random quote&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Naming this file &lt;code&gt;index.html&lt;/code&gt; is a signal to other developers that this file is intended to be the default file served up when the &lt;code&gt;/&lt;/code&gt; (or &lt;em&gt;root&lt;/em&gt; path) is requested. This is a convention that goes back to the early days of HTTP servers, and is still in use today.&lt;/p&gt;
&lt;p&gt;We need a way to figure out where &lt;code&gt;src/random_quote/static&lt;/code&gt; lives. When this application is deployed as a python egg, it could be installed anywhere, and &lt;code&gt;gunicorn&lt;/code&gt; (or whatever WSGI server we use) could be running, again, anywhere. We need to find an absolute path to the &lt;code&gt;src/random_quote/static&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;We have an example of how to do this already, in &lt;code&gt;src/random_quote/util.py&lt;/code&gt;, in the &lt;code&gt;schema()&lt;/code&gt; function:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Return the location of the SQL schema.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;"schema.sql"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Here we use Python's built-in special &lt;code&gt;__file__&lt;/code&gt; variable that returns the path to the currently executing module (&lt;a class="reference external" href="http://www.blog.pythonlibrary.org/2013/10/29/python-101-how-to-find-the-path-of-a-running-script/"&gt;more detail&lt;/a&gt;). We then use a couple of functions from the &lt;a class="reference external" href="https://docs.python.org/3/library/os.path.html"&gt;os.path&lt;/a&gt; module to construct a path in a system-agnostic way.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Python runs on many platforms, and most code you will write is compatible with all of them. It's best practice to construct paths using &lt;code&gt;os.path&lt;/code&gt; (or &lt;a class="reference external" href="https://docs.python.org/3/library/pathlib.html#module-pathlib"&gt;pathlib&lt;/a&gt;). This abstracts away differences like using forward slashes (&lt;code&gt;/&lt;/code&gt;, unix-like systems) and backward slashes (\, windows), making it easy to switch platforms or run code in different developer environments.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can do the same thing with our new &lt;code&gt;static&lt;/code&gt; directory. But since we may be using it to serve multiple files, we'll add a little extra functionality to request a more specific path if needed. We'll call the function &lt;code&gt;static()&lt;/code&gt;. Add the following to the end of &lt;code&gt;src/random_quote/util.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;58
59
60
61
62
63
64
65
66
67&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Return the full path to a file the static directory.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;"static"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If we don't pass a &lt;code&gt;path&lt;/code&gt; argument, we get the path to just the &lt;code&gt;static&lt;/code&gt; directory, otherwise, the &lt;code&gt;path&lt;/code&gt; is added to the end.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;We're adding this flexibility because it's likely we'll want to serve other static files, like images, CSS, javascript, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Next, we need to add an import for &lt;code&gt;webob.static.FileApp&lt;/code&gt;, and our new &lt;code&gt;util.static()&lt;/code&gt; function, to &lt;code&gt;src/random_quote/wsgi.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;WSGI Applications&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob.exc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTTPMethodNotAllowed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTTPBadRequest&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webob.static&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileApp&lt;/span&gt;
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomQuoteApp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;And alter the routing:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/quotes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/quote"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/random"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;HTTPError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;error_response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;error_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Lets start up the web server, and take a quick look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; gunicorn -b &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8080 -t &lt;span class="m"&gt;9999999&lt;/span&gt; -w &lt;span class="m"&gt;1&lt;/span&gt; --reload wsgi:app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we visit &lt;a class="reference external" href="http://127.0.0.1:8080"&gt;http://127.0.0.1:8080&lt;/a&gt; in a browser, we will see the new landing page. We can click the links and they should work.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-root-third-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Committing our changes is just like we've done before. Be sure to &lt;code&gt;git add&lt;/code&gt; the &lt;code&gt;src/random_quote/static/index.html&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;Git is a bit odd about how it looks at files and directories. You may notice that running &lt;code&gt;git status&lt;/code&gt; lists the &lt;code&gt;src/random_quote/static&lt;/code&gt; directory, but not &lt;code&gt;index.html&lt;/code&gt; specifically.&lt;/p&gt;
&lt;p class="last"&gt;You can go ahead and &lt;code&gt;git add&lt;/code&gt; the &lt;code&gt;src/random_quote/static&lt;/code&gt; directory if you want. Just be aware that &lt;code&gt;git add&lt;/code&gt; will add &lt;em&gt;any&lt;/em&gt; files it finds in that directory or its subdirectories.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test-for-the-new-index-page"&gt;
&lt;h3&gt;Test For The New Index Page&lt;/h3&gt;
&lt;p&gt;The test for this fix is pretty simplistic. We just need to make sure there isn't a 404 status returned when making a GET request for &lt;code&gt;/&lt;/code&gt;. We can use &lt;code&gt;TestApp&lt;/code&gt; to do this, via the &lt;code&gt;preconfigured_wsgi_app()&lt;/code&gt; fixture established in &lt;code&gt;src/random_quote/tests/conftest.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We should also make sure we're getting the right &lt;em&gt;kind&lt;/em&gt; of content, by checking the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type"&gt;Content-Type header&lt;/a&gt;. A JSON response (&lt;code&gt;application/json&lt;/code&gt;), instead of an HTML one (&lt;code&gt;text/html&lt;/code&gt;) would indicate something went wrong.&lt;/p&gt;
&lt;p&gt;Add this test to the end of &lt;code&gt;src/random_quote/tests/test_wsgi.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;67
68
69
70
71
72&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make a GET request for the root path.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'text/html'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;We could go further with this, and ensure the links actually work. &lt;a class="reference external" href="https://docs.pylonsproject.org/projects/webtest/en/latest/api.html#webtest.response.TestResponse.click"&gt;WebTest's response objects have a click() method&lt;/a&gt; that could be used to be a bit more thorough.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We run the tests again to make sure our new case was picked up, and that we didn't break anything else:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; pytest -v src

&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0 -- [...]/b/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/b&lt;/span&gt;
&lt;span class="go"&gt;collected 11 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_add_quote PASSED             [  9%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_get_quote PASSED             [ 18%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_remove_quote PASSED          [ 27%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_all PASSED                   [ 36%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_random_quote PASSED          [ 45%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_unknown_id PASSED            [ 54%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote PASSED                [ 63%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_all_quotes PASSED               [ 72%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_random_quote PASSED             [ 81%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote_unknown_id PASSED     [ 90%]&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_root PASSED                 [100%]&lt;/span&gt;
&lt;/span&gt;
&lt;span class="go"&gt;=========================== 11 passed in 0.20 seconds ===========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit the tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Version Bump&lt;/h3&gt;
&lt;p&gt;We've fixed a bug, and so we need to change the version number in &lt;code&gt;setup.py&lt;/code&gt; again. This time, it will be &lt;strong&gt;0.1.2&lt;/strong&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"random_quote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'random_quote'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;package_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'webob'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Be sure to &lt;code&gt;pip install -e .&lt;/code&gt; again and re-run the tests before committing your changes.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;You'll notice that our version is now a whole minor revision behind the version we set when adding the "Quote of the day" feature. Remember, in our "b" repository, we're unaware those changes have been made.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rebase"&gt;
&lt;h3&gt;Rebase&lt;/h3&gt;
&lt;p&gt;Lets proceed to do the rebase as usual.&lt;/p&gt;
&lt;p&gt;First, we need to &lt;code&gt;git fetch&lt;/code&gt; any remote changes we haven't seen yet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git fetch
&lt;span class="go"&gt;remote: Enumerating objects: 29, done.&lt;/span&gt;
&lt;span class="go"&gt;remote: Counting objects: 100% (29/29), done.&lt;/span&gt;
&lt;span class="go"&gt;remote: Compressing objects: 100% (16/16), done.&lt;/span&gt;
&lt;span class="go"&gt;remote: Total 17 (delta 8), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt;Unpacking objects: 100% (17/17), done.&lt;/span&gt;
&lt;span class="go"&gt;From [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt;   c2a655e..9057fd0  master     -&amp;gt; origin/master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike the last couple of times we called &lt;code&gt;git fetch&lt;/code&gt;, we actually have changes to download. This is evidenced by the output above.&lt;/p&gt;
&lt;p&gt;When we run &lt;code&gt;git rebase -i master&lt;/code&gt;, it works as usual. Be sure to run the tests again (there should still only be &lt;em&gt;11&lt;/em&gt; tests).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="merge-now-with-problems"&gt;
&lt;h2 id="merge, now with problems"&gt;Merge, Now With &lt;em&gt;Problems&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Now we need to merge &lt;code&gt;master&lt;/code&gt; with our local &lt;code&gt;index-info&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;First, we check out &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git checkout master
&lt;span class="go"&gt;Switched to branch 'master'&lt;/span&gt;
&lt;span class="go"&gt;Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.&lt;/span&gt;
&lt;span class="go"&gt;  (use "git pull" to update your local branch)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that git tells us that our branch is behind &lt;code&gt;origin/master&lt;/code&gt; by 1 commit, and suggests that we use &lt;code&gt;git pull&lt;/code&gt; to update. &lt;code&gt;git pull&lt;/code&gt; is like doing a &lt;code&gt;fetch&lt;/code&gt; followed by &lt;code&gt;git merge&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember, this isn't &lt;em&gt;our&lt;/em&gt; branch, all of our changes are still within the &lt;code&gt;index-info&lt;/code&gt; branch. We're just doing an update of changes to &lt;code&gt;master&lt;/code&gt;, that should merge without incident.&lt;/p&gt;
&lt;p&gt;Lets do a &lt;code&gt;git pull&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git pull
&lt;span class="go"&gt;Updating fa45753..5e45295&lt;/span&gt;
&lt;span class="go"&gt;Fast-forward&lt;/span&gt;
&lt;span class="go"&gt; setup.py                               |   2 +-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/__init__.py           |   3 +-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/manager.py            |   7 ++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/qotd.py               | 114 +++++++++++++++++++++++++++++++++++++++++++++++&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/schema.sql            |  11 ++++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/test_manager.py |  10 ++++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/test_qotd.py    |  96 +++++++++++++++++++++++++++++++++++++++&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/test_wsgi.py    |  42 ++++++++++++++++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/wsgi.py               |  28 +++++++++++-&lt;/span&gt;
&lt;span class="go"&gt; 9 files changed, 306 insertions(+), 7 deletions(-)&lt;/span&gt;
&lt;span class="go"&gt; create mode 100644 src/random_quote/qotd.py&lt;/span&gt;
&lt;span class="go"&gt; create mode 100644 src/random_quote/tests/test_qotd.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You see we've pulled in the changes made to master while we were working. This doesn't affect our code in our local &lt;code&gt;index-info&lt;/code&gt; branch. For that, we need to &lt;code&gt;git merge&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git merge index-info
&lt;span class="go"&gt;Auto-merging src/random_quote/wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;CONFLICT (content): Merge conflict in src/random_quote/wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;Auto-merging src/random_quote/tests/test_wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;CONFLICT (content): Merge conflict in src/random_quote/tests/test_wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;Auto-merging setup.py&lt;/span&gt;
&lt;span class="go"&gt;CONFLICT (content): Merge conflict in setup.py&lt;/span&gt;
&lt;span class="go"&gt;Automatic merge failed; fix conflicts and then commit the result.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Oh no!&lt;/strong&gt; We have some &lt;em&gt;conflicts&lt;/em&gt;. This means there are areas of files that git couldn't merge. Typically this means files where the changes are diffuse, or specific lines can't be matched up.&lt;/p&gt;
&lt;p&gt;It's important to note that the files that are in conflict get marked up to preserve the conflict.&lt;/p&gt;
&lt;p&gt;If you look into &lt;code&gt;src/random_quote/tests/test_wsgi.py&lt;/code&gt;, you can see what that looks like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="sd"&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/span&gt;
&lt;/span&gt;&lt;span class="sd"&gt;    Make a GET request for /&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;json_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;json_quote&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Request the list of quotes of the day at /qotd - no existing quotes&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Request the list of quotes of the day at /qotd&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;quote1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quote2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote2&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="o"&gt;=======&lt;/span&gt;
&lt;/span&gt;    &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;    response = preconfigured_wsgi_app.get("/")&lt;/span&gt;
&lt;span class="s2"&gt;    assert response.content_type == 'text/html'&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="s2"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; index-info&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now &lt;code&gt;git status&lt;/code&gt; shows the conflicting files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;(b) git status&lt;/span&gt;
&lt;span class="go"&gt;On branch master&lt;/span&gt;
&lt;span class="go"&gt;Your branch is up to date with 'origin/master'.&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="go"&gt;You have unmerged paths.&lt;/span&gt;
&lt;/span&gt;&lt;span class="go"&gt;  (fix conflicts and run "git commit")&lt;/span&gt;
&lt;span class="go"&gt;  (use "git merge --abort" to abort the merge)&lt;/span&gt;

&lt;span class="go"&gt;Changes to be committed:&lt;/span&gt;

&lt;span class="go"&gt;    new file:   src/random_quote/static/index.html&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/util.py&lt;/span&gt;

&lt;span class="go"&gt;Unmerged paths:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to mark resolution)&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="go"&gt;    both modified:   setup.py&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="go"&gt;    both modified:   src/random_quote/tests/test_wsgi.py&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="go"&gt;    both modified:   src/random_quote/wsgi.py&lt;/span&gt;
&lt;/span&gt;
&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taking a look at the the other two files in question, we see that the primary issue arises because we're doing two different actions when an HTTP client makes a GET request for &lt;code&gt;/&lt;/code&gt;, as you might expect. It's important to note the reason for the conflict is that the &lt;em&gt;specific lines&lt;/em&gt; that changed are in conflict, not the overall changes.&lt;/p&gt;
&lt;p&gt;The secondary issue is that we have conflicting version numbers in &lt;code&gt;setup.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src/random_quote/wsgi.py&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;27
28
29
30
31
32
33
34
35&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd_listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=======&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;setup.py&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"random_quote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;=======&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'random_quote'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;package_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'webob'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;
&lt;p&gt;Before we can resolve these conflicts, we need to make a decision about the &lt;em&gt;right&lt;/em&gt; thing to do when a GET request is made for &lt;code&gt;/&lt;/code&gt;, and what the &lt;em&gt;correct&lt;/em&gt; version number should be.&lt;/p&gt;
&lt;p&gt;The "Quote Of The Day" feature added a quote of the day at &lt;code&gt;/&lt;/code&gt;. Our "API Index Information" bug fix added documentation at the same location.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; a conversation that should happen in a vacuum. This is a major API change, and as we mentioned before, ideally it would have been settled before the two developers even started working.&lt;/p&gt;
&lt;p&gt;Communication is key to avoid these conflicts, and it's the only way to get past them when they manage to get through.&lt;/p&gt;
&lt;p class="last"&gt;The first thing you should always do when a merge conflict happens is &lt;strong&gt;reach out to the other developer&lt;/strong&gt; and make sure you're all on the same page.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Thinking about it objectively, it's probably best to keep the documentation at &lt;code&gt;/&lt;/code&gt;. That's the most useful for our users.&lt;/p&gt;
&lt;p&gt;Now, we need to figure out &lt;em&gt;how&lt;/em&gt; one would request a quote of the day, if something else is being returned at &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The Quote Of The Day feature put the listing of all quotes of the day on &lt;code&gt;/qotd&lt;/code&gt;, but that endpoint is probably better suited for returning today's quote of the day.&lt;/p&gt;
&lt;p&gt;So, now we just need a way to present all quotes of the day, so lets move that to &lt;code&gt;/qotd-history&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's an updated path map to show how things route:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/path-map-third-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Next, we need to decide which version number to use. In this case, we should consider the &lt;em&gt;end result&lt;/em&gt; of our merge.&lt;/p&gt;
&lt;p&gt;Developer &lt;strong&gt;B's&lt;/strong&gt; version is &lt;strong&gt;0.1.2&lt;/strong&gt;, and developer &lt;strong&gt;A's&lt;/strong&gt; is &lt;strong&gt;0.2.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What we'll do is do the next &lt;strong&gt;bug fix&lt;/strong&gt; version (or &lt;em&gt;patch version&lt;/em&gt;) of the &lt;strong&gt;API update&lt;/strong&gt; (or &lt;em&gt;minor version&lt;/em&gt;), which gives us &lt;strong&gt;0.2.1&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This has the advantage of also preserving any tags that were made for the two versions. We skipped that step here for the sake of brevity, but having three tags, one for &lt;strong&gt;0.1.2&lt;/strong&gt;, &lt;strong&gt;0.2.0&lt;/strong&gt; and &lt;strong&gt;0.2.1&lt;/strong&gt; means we can deploy any of those three versions independently. This gives us a great deal of flexibility. ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Lets fix &lt;code&gt;setup.py&lt;/code&gt; first. We just need to take out the markers (&lt;code&gt;=====&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;) and any duplicated lines, leaving only the stuff we need. When you're finished, &lt;code&gt;setup.py&lt;/code&gt; will look like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"random_quote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.2.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'random_quote'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;package_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'webob'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now lets fix &lt;code&gt;src/random_quote/wsgi.py&lt;/code&gt;. The conflict is in &lt;code&gt;__call__()&lt;/code&gt;, in the routing.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd_listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=======&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/quotes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/quote"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/random"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;To fix this, we need to preserve the case when the request looks for &lt;code&gt;/&lt;/code&gt;, but also add the new paths we discussed above.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/qotd-history"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd_listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/quotes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/quote"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/random"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;HTTPError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;error_response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;error_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;You can use a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comparison_of_file_comparison_tools"&gt;diff tool&lt;/a&gt; to fix merge conflicts in an interactive way.&lt;/p&gt;
&lt;p class="last"&gt;Check out &lt;a class="reference external" href="https://git-scm.com/docs/git-mergetool"&gt;git mergetool&lt;/a&gt; for details.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Before we can do a manual test, we need to add the changes to the database schema. This is done using &lt;code&gt;util.init()&lt;/code&gt;, run from the interpreter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; python
&lt;span class="go"&gt;Python 3.7.3 (default, Mar 30 2019, 03:37:43)&lt;/span&gt;
&lt;span class="go"&gt;[Clang 10.0.0 (clang-1000.11.45.5)] on darwin&lt;/span&gt;
&lt;span class="go"&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start up &lt;code&gt;gunicorn&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; gunicorn -b &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8080 -t &lt;span class="m"&gt;9999999&lt;/span&gt; -w &lt;span class="m"&gt;1&lt;/span&gt; --reload wsgi:app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And open &lt;a class="reference external" href="http://127.0.0.1:8080"&gt;http://127.0.0.1:8080&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="figure align-center" style="width: 60%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-root-third-pass.png"/&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://127.0.0.1:8080/qotd"&gt;http://127.0.0.1:8080/qotd&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="figure align-center" style="width: 60%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-qotd-second-pass.png"/&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;And &lt;a class="reference external" href="http://127.0.0.1:8080/qotd-history"&gt;http://127.0.0.1:8080/qotd-history&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="figure align-center" style="width: 60%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-qotd-history.png"/&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The next conflict is in one of the test files, &lt;code&gt;src/random_quote/tests/test_wsgi.py&lt;/code&gt;. Lets fix that next.&lt;/p&gt;
&lt;p&gt;The only conflict is near the bottom, where the 'qotd' tests step on the 'index-info' tests. We can fix this by moving some code around and changing the requested paths:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make a GET request for the root path.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'text/html'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Request the list of quotes of the day at /qotd-history - no existing quotes&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd-history"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd_listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Request the list of quotes of the day at /qotd-history&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;quote1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quote2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd-history"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retrieve the current quote of the day&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;json_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;json_quote&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make a GET request for the root path.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'text/html'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Request the list of quotes of the day at /qotd-history - no existing quotes&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd-history"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd_listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Request the list of quotes of the day at /qotd-history&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;quote1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quote2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd-history"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_qotd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retrieve the current quote of the day&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/qotd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;json_quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qotd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;json_quote&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now we can run the tests to make sure everything still works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;================================ test session starts =================================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/b&lt;/span&gt;
&lt;span class="go"&gt;collected 21 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py .......                                 [ 33%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_qotd.py ......                                     [ 61%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ........                                   [100%]&lt;/span&gt;

&lt;span class="go"&gt;============================= 21 passed in 0.36 seconds ==============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we proceed, we have one last thing to do: we need to update the web API documentation at &lt;code&gt;/&lt;/code&gt; to reflect the new API endpoints that we added as part of resolving the conflicts.&lt;/p&gt;
&lt;div class="section" id="documentation-update"&gt;
&lt;h3&gt;Documentation Update&lt;/h3&gt;
&lt;p&gt;Add the following links to &lt;code&gt;src/random_quote/static/index.html&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"qotd"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;/qotd&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Retrieve today's "Quote of the day."&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"qotd-history"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;/qotd-history&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Retrieve all previous "Quote of the day." entries.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Start up &lt;code&gt;gunicorn&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; gunicorn -b &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8080 -t &lt;span class="m"&gt;9999999&lt;/span&gt; -w &lt;span class="m"&gt;1&lt;/span&gt; --reload wsgi:app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we open &lt;a class="reference external" href="http://127.0.0.1:8080"&gt;http://127.0.0.1:8080&lt;/a&gt; in a browser, the new page is shown, and the links do what they're supposed to.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-root-fourth-pass.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="complete-the-merge"&gt;
&lt;h3&gt;Complete the merge&lt;/h3&gt;
&lt;p&gt;Now that we've untangled this mess, we need to finish up the merge.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; reminds us that we're in the middle of merging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch master&lt;/span&gt;
&lt;span class="go"&gt;Your branch is up to date with 'origin/master'.&lt;/span&gt;

&lt;span class="go"&gt;You have unmerged paths.&lt;/span&gt;
&lt;span class="go"&gt;  (fix conflicts and run "git commit")&lt;/span&gt;
&lt;span class="go"&gt;  (use "git merge --abort" to abort the merge)&lt;/span&gt;

&lt;span class="go"&gt;Changes to be committed:&lt;/span&gt;

&lt;span class="go"&gt;    new file:   src/random_quote/static/index.html&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/util.py&lt;/span&gt;

&lt;span class="go"&gt;Unmerged paths:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to mark resolution)&lt;/span&gt;

&lt;span class="go"&gt;    both modified:   setup.py&lt;/span&gt;
&lt;span class="go"&gt;    both modified:   src/random_quote/tests/test_wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;    both modified:   src/random_quote/wsgi.py&lt;/span&gt;

&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/static/index.html&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To finish the merge, we first need to let git know the conflicted files are fixed. We do this by using &lt;code&gt;git add&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git add src/random_quote/tests/test_wsgi.py
&lt;span class="gp"&gt;(b) $&lt;/span&gt; git add src/random_quote/wsgi.py
&lt;span class="gp"&gt;(b) $&lt;/span&gt; git add setup.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;git status&lt;/code&gt; tells us what we need to do next:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch master&lt;/span&gt;
&lt;span class="go"&gt;Your branch is up to date with 'origin/master'.&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="go"&gt;All conflicts fixed but you are still merging.&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="go"&gt;  (use "git commit" to conclude merge)&lt;/span&gt;
&lt;/span&gt;
&lt;span class="go"&gt;Changes to be committed:&lt;/span&gt;

&lt;span class="go"&gt;    modified:   setup.py&lt;/span&gt;
&lt;span class="go"&gt;    new file:   src/random_quote/static/index.html&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/tests/test_wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/util.py&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/wsgi.py&lt;/span&gt;

&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/static/index.html&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To complete the merge, we just need to do what &lt;code&gt;git status&lt;/code&gt; is telling us: &lt;code&gt;git commit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git commit -a -m&lt;span class="s2"&gt;"Resolved API endpoint conflicts"&lt;/span&gt;
&lt;span class="go"&gt;[master 36c0796] Resolved API endpoint conflicts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can &lt;code&gt;git push&lt;/code&gt; our changes to the remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git push origin master
&lt;span class="go"&gt;Enumerating objects: 37, done.&lt;/span&gt;
&lt;span class="go"&gt;Counting objects: 100% (36/36), done.&lt;/span&gt;
&lt;span class="go"&gt;Delta compression using up to 8 threads&lt;/span&gt;
&lt;span class="go"&gt;Compressing objects: 100% (18/18), done.&lt;/span&gt;
&lt;span class="go"&gt;Writing objects: 100% (23/23), 2.59 KiB | 2.59 MiB/s, done.&lt;/span&gt;
&lt;span class="go"&gt;Total 23 (delta 12), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt;To [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt;   9057fd0..5ccabd1  master -&amp;gt; master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tag-the-fixed-version"&gt;
&lt;h2 id="tag the fixed version"&gt;Tag The Fixed Version&lt;/h2&gt;
&lt;p&gt;As a last step, we just need to &lt;code&gt;git tag&lt;/code&gt; our new version, and push it to the remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(b) $&lt;/span&gt; git tag v0.2.1
&lt;span class="gp"&gt;(b) $&lt;/span&gt; git push origin v0.2.1
&lt;span class="go"&gt;Total 0 (delta 0), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt;To [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt; * [new tag]         v0.2.1 -&amp;gt; v0.2.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this final section, we covered resolving merge conflicts.&lt;/p&gt;
&lt;p&gt;Now, you should be well-versed in working with git branches and using pytest to ensure you don't break things. ðŸ¦„&lt;/p&gt;
&lt;p&gt;If you have any ideas, problems, or suggestions, don't hesitate to &lt;a class="reference external" href="/pages/contact.html"&gt;contact the author&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources-what-to-do-if-you-messed-up"&gt;
&lt;h2 id="resources, what to do if you messed up"&gt;Resources, What To Do If You Messed Up&lt;/h2&gt;
&lt;p&gt;Feel free to &lt;a class="reference external" href="/pages/contact.html"&gt;contact the author&lt;/a&gt; if you have any problems with this guide.&lt;/p&gt;
&lt;p&gt;Check out &lt;a class="reference external" href="http://sethrobertson.github.io/GitFixUm/fixup.html"&gt;http://sethrobertson.github.io/GitFixUm/fixup.html&lt;/a&gt; for a nice general git troubleshooting guide! It's extremely well done.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="git"></category><category term="branching"></category><category term="development process"></category></entry><entry><title>Branching With Git And Testing With Pytest: A Comprehensive Guide: Part 2</title><link href="/branching-git-with-pytest-2.html" rel="alternate"></link><published>2019-06-28T09:00:00-04:00</published><updated>2019-06-28T09:00:00-04:00</updated><author><name>jjmojojjmojo</name></author><id>tag:None,2019-06-28:/branching-git-with-pytest-2.html</id><summary type="html">&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;&lt;strong&gt;This is part two of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identify and fix a bug on a branch.&lt;/li&gt;
&lt;li&gt;Build a new feature, also on a branch.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git rebase&lt;/code&gt; to keep our change history tidy.&lt;/li&gt;
&lt;li&gt;Use tagging to mark new versions of our application.&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;&lt;strong&gt;This is part two of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identify and fix a bug on a branch.&lt;/li&gt;
&lt;li&gt;Build a new feature, also on a branch.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git rebase&lt;/code&gt; to keep our change history tidy.&lt;/li&gt;
&lt;li&gt;Use tagging to mark new versions of our application.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="section" id="setup"&gt;
&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;
&lt;p&gt;Make sure you've got everything set up as outlined in &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's a condensed summary:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Ensure you have git, python 3.7+, and venv installed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make a bare clone of the base repository to act as our &lt;em&gt;remote&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git clone --bare https://github.com/jjmojojjmojo/random_quote.git random_quote_remote
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Clone our remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git clone random_quote_remote random_quote
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Initialize the virtual environment, and install our requirements and project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;  $&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; random_quote
&lt;span class="gp"&gt;  $&lt;/span&gt; python -m venv .
&lt;span class="gp"&gt;  $&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;span class="go"&gt;  (random_quote) $ pip install -r requirements.txt&lt;/span&gt;
&lt;span class="go"&gt;  (random_quote) $ pip install -e .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Initialize the database, add some randomly generated quotes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;  (random_quote) $ python scripts/generate_quotes.py&lt;/span&gt;
&lt;span class="go"&gt;  (random_quote) $ python&lt;/span&gt;
&lt;span class="go"&gt;  &amp;gt;&amp;gt;&amp;gt; from random_quote import util&lt;/span&gt;
&lt;span class="go"&gt;  &amp;gt;&amp;gt;&amp;gt; util.init("test.db")&lt;/span&gt;
&lt;span class="go"&gt;  util.ingest("quotes.csv", "test.db")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the &lt;code&gt;fix_random()&lt;/code&gt; test fixture and the extra tests for random functionality. If you had trouble, or would like to skip &lt;code&gt;scripts/state/part1&lt;/code&gt;, you can &lt;code&gt;git checkout&lt;/code&gt; the &lt;code&gt;part1&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;  (random_quote) $ git checkout part1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;ðŸŒˆ We have branches for all of the major work done in the series:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;part1&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;part2&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt; and
&lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;qotd&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Developer &lt;strong&gt;A&lt;/strong&gt;'s feature from &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;index-info&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;Developer &lt;strong&gt;B&lt;/strong&gt;'s bug fix from &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;part3&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first last"&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;,
&lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;!&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Feel free to &lt;code&gt;git checkout&lt;/code&gt; if you need to reset your code, or jump around.&lt;/p&gt;
&lt;p class="last"&gt;Use &lt;code&gt;git stash&lt;/code&gt; to keep any uncommitted changes for later. See &lt;a class="reference external" href="https://git-scm.com/book/en/v1/Git-Tools-Stashing"&gt;the git documentation&lt;/a&gt; for more information. ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-find-a-bug"&gt;
&lt;h2 id="let's find a bug!"&gt;Let's Find A Bug!&lt;/h2&gt;
&lt;p&gt;Let's run the application locally so we can play with it in a browser, and identify a bug to fix.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;requirements.txt&lt;/code&gt; has installed a web server for us called &lt;a class="reference external" href="https://gunicorn.org/"&gt;Gunicorn&lt;/a&gt;. It's a pure-python server that has a lot of great production-quality features.&lt;/p&gt;
&lt;p&gt;We'll start the &lt;code&gt;gunicorn&lt;/code&gt; server using a couple of useful command-line options, since we'll be messing with the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; gunicorn -b &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8080 -t &lt;span class="m"&gt;9999999&lt;/span&gt; -w &lt;span class="m"&gt;1&lt;/span&gt; --reload wsgi:app
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;Gunicorn is a multi-process server. This means it spawns multiple python processes and hands off web requests to them as needed, usually in a round-robin fashion. The processes are killed if they run for too long.&lt;/p&gt;
&lt;p&gt;The first option, &lt;code&gt;-b&lt;/code&gt; sets the &lt;em&gt;bind&lt;/em&gt; port - it's an IP address followed by a port number. Numbers under 1024 are available to you without running with elevated privileges (aka "as root"). The default port is 8000. You can omit this parameter if you'd like, but it's really useful when you're running a bunch of stuff, or for deployment, so it's good practice to get used to using it.&lt;/p&gt;
&lt;p&gt;Next option, &lt;code&gt;-t&lt;/code&gt; sets the the timeout before a worker is killed and reclaimed. We set this to a very long time so if we are doing something like running a &lt;a class="reference external" href="https://docs.python.org/3/library/pdb.html"&gt;pdb&lt;/a&gt; session, it won't kick us out before we're done.&lt;/p&gt;
&lt;p&gt;The next, &lt;code&gt;-w&lt;/code&gt; sets the number of workers. By setting this to one, we can be sure that the &lt;code&gt;pdb&lt;/code&gt; session will block all other requests until we're done.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The default number of workers is actually already set to 1. However, this is a good switch to know, it's good practice to test your code under a muilti-process environment, since that's often how code will be deployed.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The last flag is &lt;code&gt;--reload&lt;/code&gt;. This flag tells &lt;code&gt;gunicorn&lt;/code&gt; to monitor our source files and reload the server if they change.&lt;/p&gt;
&lt;p&gt;Finally, we specify which WSGI application to load in [module]:[callable] form. So we have a module called &lt;code&gt;wsgi.py&lt;/code&gt; and our app instance is named &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code&gt;wsgi.py&lt;/code&gt; looks like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This module imports the &lt;code&gt;RandomQuoteApp&lt;/code&gt; class, and makes an instance of it that points to the &lt;code&gt;test.db&lt;/code&gt; we just set up.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The server will print its logs out to the console so you can see when requests happen, and if any errors pop up.&lt;/p&gt;
&lt;p&gt;Now, open a web browser to &lt;a class="reference external" href="http://127.0.0.1:8080"&gt;http://127.0.0.1:8080&lt;/a&gt; . You should get a 404 "Not Found" response. This is expected, since we aren't covering the case of a request for the root, (aka &lt;code&gt;/&lt;/code&gt;) in our &lt;code&gt;RandomQuoteApp.__call__()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-root-first-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;We can use the web API in our browser.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I'm using a recent version of &lt;a class="reference external" href="https://www.mozilla.org/en-US/firefox/"&gt;Firefox&lt;/a&gt; for the screen shots below. It contains a built-in JSON browser if the &lt;code&gt;Content-Type&lt;/code&gt; header is set correctly. Super handy ðŸŒˆ&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To get a listing of all the quotes in your database, open &lt;a class="reference external" href="http://127.0.0.1:8080/quotes"&gt;http://127.0.0.1:8080/quotes&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-all-first-pass.png"/&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;To get a particular quote, open &lt;a class="reference external" href="http://127.0.0.1:8080/quote/1"&gt;http://127.0.0.1:8080/quote/1&lt;/a&gt; (where 1 is the id of the quote you want):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-one-quote-first-pass.png"/&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;To get a random quote, open &lt;a class="reference external" href="http://127.0.0.1:8080/random"&gt;http://127.0.0.1:8080/random&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-random-first-pass.png"/&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's a handy map that shows how the various supported API endpoints invoke methods of &lt;code&gt;RandomQuoteApp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/path-map-first-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Now, lets find a bug. Try requesting a quote id that you know doesn't exist. Since we're using numeric ids, requesting an alphanumeric string, like &lt;code&gt;zzzzzz&lt;/code&gt; would be a good choice. If we click on &lt;a class="reference external" href="http://127.0.0.1:8080/quote/zzzzzz"&gt;http://127.0.0.1:8080/quote/zzzzzz&lt;/a&gt;, what happens?&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-bad-id-bug.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Oh no, "Internal Server Error" is bad. Lets look at the log:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO: fix the paths so they look like what the user is probably using&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[2019-06-09 18:31:11 -0400] [16676] [INFO] Starting gunicorn 19.9.0&lt;/span&gt;
&lt;span class="go"&gt;[2019-06-09 18:31:11 -0400] [16676] [INFO] Listening at: http://127.0.0.1:8080 (16676)&lt;/span&gt;
&lt;span class="go"&gt;[2019-06-09 18:31:11 -0400] [16676] [INFO] Using worker: sync&lt;/span&gt;
&lt;span class="go"&gt;[2019-06-09 18:31:11 -0400] [16679] [INFO] Booting worker with pid: 16679&lt;/span&gt;
&lt;span class="go"&gt;[2019-06-09 18:31:20 -0400] [16679] [ERROR] Error handling request /quote/zzzzzz&lt;/span&gt;
&lt;span class="go"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="go"&gt;  File "[...]/random_quote/lib/python3.7/site-packages/gunicorn/workers/sync.py", line 135, in handle&lt;/span&gt;
&lt;span class="go"&gt;    self.handle_request(listener, req, client, addr)&lt;/span&gt;
&lt;span class="go"&gt;  File "[...]/random_quote/lib/python3.7/site-packages/gunicorn/workers/sync.py", line 176, in handle_request&lt;/span&gt;
&lt;span class="go"&gt;    respiter = self.wsgi(environ, resp.start_response)&lt;/span&gt;
&lt;span class="go"&gt;  File "[...]/random_quote/src/random_quote/wsgi.py", line 29, in __call__&lt;/span&gt;
&lt;span class="go"&gt;    response = self.get(request)&lt;/span&gt;
&lt;span class="go"&gt;  File "[...]/random_quote/src/random_quote/wsgi.py", line 54, in get&lt;/span&gt;
&lt;span class="go"&gt;    quote = self.manager.get(match.group(1))&lt;/span&gt;
&lt;span class="go"&gt;  File "[...]/random_quote/src/random_quote/manager.py", line 49, in get&lt;/span&gt;
&lt;span class="go"&gt;    return dict(result)&lt;/span&gt;
&lt;span class="go"&gt;TypeError: 'NoneType' object is not iterable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In most web servers, when an exception isn't handled by the application, it "bubbles up" to the server and triggers the return of a 500, "Internal Server Error" response.&lt;/p&gt;
&lt;p&gt;In the log, we can see the basic status info that &lt;code&gt;gunicorn&lt;/code&gt; gives us, and then on line 6, the traceback begins. On line 17 we see the exception that caused the 500 error originated on line 49 of &lt;code&gt;src/random_quote/manager.py&lt;/code&gt;, in the &lt;code&gt;get()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Here's that method isolated so we can take a look at it:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retrieve a specific quote from the database, identified by id_.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns a dictionary.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT id, author, quote, created FROM quotes WHERE id = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;When the method was written, the author (ðŸ˜Ž) used the fact that the &lt;code&gt;sqlite3.Row&lt;/code&gt; class can be transformed into a dictionary by passing it to &lt;code&gt;dict()&lt;/code&gt;. However, they  missed the fact that the &lt;code&gt;fetchone()&lt;/code&gt; method (line 47) returns &lt;code&gt;None&lt;/code&gt; when no rows are returned.&lt;/p&gt;
&lt;p&gt;Passing &lt;code&gt;None&lt;/code&gt; to &lt;code&gt;dict()&lt;/code&gt; on line 49 raises a &lt;code&gt;TypeError&lt;/code&gt;, as we saw in the traceback.&lt;/p&gt;
&lt;p&gt;Great, so now we've identified the bug. Let's fix it!&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;If you want to quit &lt;code&gt;gunicorn&lt;/code&gt;, type Ctrl-C (hold the "control" or "ctl" key and press "c").&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fix-the-bug-an-overview"&gt;
&lt;h2 id="fix the bug: an overview"&gt;Fix The Bug: An Overview&lt;/h2&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview-part2.png"/&gt;
&lt;/div&gt;
&lt;p&gt;In brief, we need to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create and check out a branch. (&lt;code&gt;git branch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Write a &lt;em&gt;failing&lt;/em&gt; test that replicates the bug.&lt;/li&gt;
&lt;li&gt;Fix the bug.&lt;/li&gt;
&lt;li&gt;Increase the version number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt; our changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; any changes to master.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase&lt;/code&gt; against &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge&lt;/code&gt; to our branch.&lt;/li&gt;
&lt;li&gt;Fix any conflicts.&lt;/li&gt;
&lt;li&gt;Finish the merge (&lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Run the tests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt; the version.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-branch"&gt;
&lt;h2 id="create a branch"&gt;Create A Branch&lt;/h2&gt;
&lt;p&gt;Let's list the existing branches first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git branch --list
&lt;span class="go"&gt;* master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview-part2-a-cropped.png"/&gt;
&lt;/div&gt;
&lt;p&gt;We see the &lt;code&gt;master&lt;/code&gt; branch all by itself. &lt;code&gt;master&lt;/code&gt; is the default name for the first branch in a repository. We have &lt;em&gt;checked out&lt;/em&gt; the &lt;code&gt;master&lt;/code&gt; branch, as indicated by the asterisk (*).&lt;/p&gt;
&lt;p&gt;We need a good name for our branch. The name should be obvious and specific to this bug. If you use an issue tracking system, the issue number is a good idea. Since we aren't using an issue tracker for this guide, lets do something descriptive. We'll call our bug branch &lt;code&gt;bug-unknown-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's how it is created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git branch bug-unknown-id
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running &lt;code&gt;git branch --list&lt;/code&gt; again, we can see our branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git branch --list
&lt;span class="go"&gt;bug-unknown-id&lt;/span&gt;
&lt;span class="go"&gt;* master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We're still "on" the &lt;code&gt;master&lt;/code&gt; branch. We need to change branches, or &lt;code&gt;git checkout&lt;/code&gt; our new branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git checkout bug-unknown-id
&lt;span class="go"&gt;Switched to branch 'bug-unknown-id'&lt;/span&gt;
&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git branch --list
&lt;span class="go"&gt;* bug-unknown-id&lt;/span&gt;
&lt;span class="go"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see, when we call &lt;code&gt;git branch --list&lt;/code&gt; again, our branch has the asterisk.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;You can save a step by passing the &lt;code&gt;-b&lt;/code&gt; switch to &lt;code&gt;git checkout&lt;/code&gt;, creating the branch before checking it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git checkout -b some-other-branch
&lt;span class="go"&gt; Switched to a new branch 'some-other-branch'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can see it's been created &lt;em&gt;and&lt;/em&gt; checked out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git branch --list
&lt;span class="go"&gt; bug-unknown-id&lt;/span&gt;
&lt;span class="go"&gt; master&lt;/span&gt;
&lt;span class="go"&gt; * some-other-branch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to go back to another branch, we just need to &lt;code&gt;git checkout&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git checkout bug-unknown-id
&lt;span class="go"&gt; Switched to branch 'bug-unknown-id'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can see it's changed again using &lt;code&gt;git branch --list&lt;/code&gt;:&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git branch --list
&lt;span class="go"&gt; * bug-unknown-id&lt;/span&gt;
&lt;span class="go"&gt; master&lt;/span&gt;
&lt;span class="go"&gt; some-other-branch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="replicate-the-bug-in-a-test"&gt;
&lt;h2 id="replicate the bug in a test"&gt;Replicate The Bug In A Test&lt;/h2&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview-part2-b-cropped.png"/&gt;
&lt;/div&gt;
&lt;p&gt;We want to add a test that will fail until the bug is fixed. This way we can prevent &lt;em&gt;regressions&lt;/em&gt;, or situations where the bug inadvertently comes up later. If it fails now, and we fix it, and it passes, then test case will fail if the bug ever shows up again.&lt;/p&gt;
&lt;div class="section" id="more-than-a-bug"&gt;
&lt;h3&gt;More Than A Bug&lt;/h3&gt;
&lt;p&gt;One thing that sets this particular bug apart from the sort you might run into, is that this bug represents a &lt;em&gt;use case&lt;/em&gt; we missed. Like the lack of testing for random quotes we fixed in our first commit, it's not really a bug so much as an oversight.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If this &lt;em&gt;was&lt;/em&gt; bug-related, as opposed to an oversight, we could chose to use a name that incorporated the name of the bug or the bug's identifier in our bug tracking system.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Before we can proceed, we have to make a decision. We've identified an error state when we try to get an quote that doesn't exist in the database. But what &lt;em&gt;should&lt;/em&gt; happen if there &lt;em&gt;isn't&lt;/em&gt; an error?&lt;/p&gt;
&lt;p&gt;There are a few possibilities:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We can raise some kind of &lt;a class="reference external" href="https://docs.python.org/3/tutorial/errors.html"&gt;exception&lt;/a&gt;, preferably something custom that alerts the developer about what happened, with name like &lt;code&gt;NoQuoteFound&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We can return a &lt;em&gt;token&lt;/em&gt; (or &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sentinel_value"&gt;sentinel value&lt;/a&gt;) of some kind (&lt;code&gt;None&lt;/code&gt;, like the sqlite3 DBAPI does, or &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;We can return an empty dictionary (&lt;code&gt;{}&lt;/code&gt;), so the data type is the same, but it won't have the expected keys (it can also act as a token, since &lt;code&gt;bool({}) == False&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;We can return a "default" object with values indicative of missing data. For example, the &lt;code&gt;id&lt;/code&gt; could be 0, the author &lt;code&gt;Unknown&lt;/code&gt; and the &lt;code&gt;quote&lt;/code&gt; could be &lt;code&gt;"There is no quote, only Zuul"&lt;/code&gt;. The creation date could be long in the past. This way any templates or client code would still "work" in this situation, but it would be obvious something was amiss.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which one is best for your project is a technical decision for you and your team to make. There is a lot to consider with each option (and probably a few other options to consider!). To keep us out of the weeds in this guide, we'll arbitrarily choose the "token", option #2. ðŸ˜Ž&lt;/p&gt;
&lt;p&gt;As such, we'll have &lt;code&gt;RandomQuoteManager.get()&lt;/code&gt; return &lt;code&gt;None&lt;/code&gt;, instead of another common sentinel, like &lt;code&gt;False&lt;/code&gt;, so we're explicitly saying "there is no quote with that id" as opposed to "the request you made is not valid". The distinction is subtle here, but it could be more significant in other cases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-a-failing-test"&gt;
&lt;h2 id="writing a failing test"&gt;Writing A Failing Test&lt;/h2&gt;
&lt;p&gt;We are trying to replicate passing an unknown quote ID to &lt;code&gt;RandomQuoteManager.get()&lt;/code&gt;. We can use the "normal" test from &lt;code&gt;src/random_quote/tests/test_manager.py&lt;/code&gt; as a template:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get a quote by id&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic quote 2'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This test calls the &lt;code&gt;get()&lt;/code&gt; method with a known id, and checks that the correct text was returned.&lt;/p&gt;
&lt;p&gt;We'll name our new test case &lt;code&gt;test_unknown_id&lt;/code&gt;. Like the branch name, it should be meaningful, and unique. By default (and convention), a test case has to start with the string &lt;code&gt;test_&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;test_unknown_id()&lt;/code&gt; test case will fail, because it will raise a &lt;code&gt;TypeError&lt;/code&gt;. We'll also test that &lt;code&gt;RandomQuoteManager.get()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; as expected (once we've fixed it).&lt;/p&gt;
&lt;p&gt;Let's put this test case at the end of &lt;code&gt;src/random_quote/tests/test_manager.py&lt;/code&gt;, after the &lt;code&gt;test_random_quote()&lt;/code&gt; case):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;67
68
69
70
71
72
73&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_unknown_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Try to get a quote by an unknown id.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"zzzzz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Running the tests, we can now see there are 8 tests now, and one fails:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src -v
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 9 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_add_quote PASSED             [ 11%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_get_quote PASSED             [ 22%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_remove_quote PASSED          [ 33%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_all PASSED                   [ 44%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_random_quote PASSED          [ 55%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_unknown_id FAILED            [ 66%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote PASSED                [ 77%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_all_quotes PASSED               [ 88%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_random_quote PASSED             [100%]&lt;/span&gt;

&lt;span class="go"&gt;=================================== FAILURES ====================================&lt;/span&gt;
&lt;span class="go"&gt;________________________________ test_unknown_id ________________________________&lt;/span&gt;

&lt;span class="go"&gt;preconfigured_manager = &amp;lt;random_quote.manager.RandomQuoteManager object at 0x104572b00&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;    def test_unknown_id(preconfigured_manager):&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;
&lt;span class="go"&gt;        Try to get a quote by an unknown id.&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="nv"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; preconfigured_manager.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"zzzzz"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py:71:&lt;/span&gt;
&lt;span class="go"&gt;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&lt;/span&gt;

&lt;span class="go"&gt;self = &amp;lt;random_quote.manager.RandomQuoteManager object at 0x104572b00&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;id_ = 'zzzzz'&lt;/span&gt;

&lt;span class="go"&gt;    def get(self, id_):&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;
&lt;span class="go"&gt;        Retrieve a specific quote from the database, identified by id_.&lt;/span&gt;

&lt;span class="go"&gt;        Returns a dictionary.&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;
&lt;span class="go"&gt;        c = self.conn.cursor()&lt;/span&gt;

&lt;span class="go"&gt;        c.execute("SELECT id, author, quote, created FROM quotes WHERE id = ?", (id_,))&lt;/span&gt;

&lt;span class="go"&gt;        result = c.fetchone()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="k"&gt;return&lt;/span&gt; dict&lt;span class="o"&gt;(&lt;/span&gt;result&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;E       TypeError: 'NoneType' object is not iterable&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/manager.py:49: TypeError&lt;/span&gt;
&lt;span class="go"&gt;====================== 1 failed, 8 passed in 11.15 seconds ======================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since this test case raises a &lt;code&gt;TypeError&lt;/code&gt;, it successfully replicates the bug.&lt;/p&gt;
&lt;p&gt;At this point, it's not a bad idea to save our work, so lets look at our changes, and commit them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="commit-the-failing-test"&gt;
&lt;h2 id="commit the failing test"&gt;Commit The Failing Test&lt;/h2&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview-part2-b-cropped.png"/&gt;
&lt;/div&gt;
&lt;p&gt;This is identical to our previous commit process, but lets go through it again.&lt;/p&gt;
&lt;p&gt;First, lets check what changed using &lt;code&gt;git status&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git status
&lt;span class="hll"&gt;&lt;span class="go"&gt;On branch bug-unknown-id&lt;/span&gt;
&lt;/span&gt;&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/tests/test_manager.py&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    quotes.csv&lt;/span&gt;
&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;span class="go"&gt;    test_example.py&lt;/span&gt;

&lt;span class="go"&gt;no changes added to commit (use "git add" and/or "git commit -a")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that git tells us which branch we're on. It's a good idea to get in the habit of looking at that line of output.&lt;/p&gt;
&lt;p&gt;Next, we'll &lt;code&gt;git commit&lt;/code&gt; our changes, using the &lt;code&gt;-m&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git commit -a -m&lt;span class="s2"&gt;"Added failing test an unknown id is passed to RandomQuoteManager.get()"&lt;/span&gt;
&lt;span class="go"&gt;[bug-unknown-id 34afe34] Added failing test an unknown id is passed to RandomQuoteManager.get()&lt;/span&gt;
&lt;span class="go"&gt; 1 file changed, 9 insertions(+), 1 deletion(-)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="actually-fix-the-bug"&gt;
&lt;h2 id="actually fix the bug"&gt;Actually Fix The Bug&lt;/h2&gt;
&lt;p&gt;Recall that earlier, we decided that the &lt;code&gt;RandomQuoteManager.get()&lt;/code&gt; method return &lt;code&gt;None&lt;/code&gt; as a &lt;em&gt;sentinel&lt;/em&gt; if a non-existent id is passed.&lt;/p&gt;
&lt;p&gt;We can fix this in &lt;code&gt;src/random_quote/manager.py&lt;/code&gt; by checking the return value of &lt;code&gt;c.fetchone()&lt;/code&gt; before passing it to &lt;code&gt;dict()&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retrieve a specific quote from the database, identified by id_.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns a dictionary.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT id, author, quote, created FROM quotes WHERE id = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

&lt;span class="hll"&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;On lines 47 to 52, we've stashed the result from the database cursor into a temporary variable &lt;code&gt;result&lt;/code&gt;, and then only feed it to &lt;code&gt;dict()&lt;/code&gt; before returning if it's not &lt;code&gt;None&lt;/code&gt;. If it is &lt;code&gt;None&lt;/code&gt;, we return &lt;code&gt;None&lt;/code&gt;. This way the user can do a simple check like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_i_want&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"HEY WE GOT ONE!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"QUOTE {id_i_want} NOT FOUND!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;After making these changes, let's first make sure the code works in the browser. Lets restart gunicorn if it's not still running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; gunicorn -b &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:8080 -t &lt;span class="m"&gt;9999999&lt;/span&gt; -w &lt;span class="m"&gt;1&lt;/span&gt; --reload wsgi:app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And open up &lt;a class="reference external" href="http://127.0.0.1:8080/quote/zzzzzz"&gt;http://127.0.0.1:8080/quote/zzzzzz&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/screen-cap-bad-id-first-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;At this point, we aren't getting the error anymore, but we aren't necessarily getting a useful result, since we're seeing the JSON serialization of &lt;code&gt;None&lt;/code&gt;, the special Javascript value &lt;code&gt;null&lt;/code&gt;. We'll deal with this issue in a minute. But our bug is now fixed.&lt;/p&gt;
&lt;p&gt;Next, lets re-run our tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest -v src
&lt;span class="go"&gt;============================= test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 9 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_add_quote PASSED            [ 11%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_get_quote PASSED            [ 22%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_remove_quote PASSED         [ 33%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_all PASSED                  [ 44%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_random_quote PASSED         [ 55%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_unknown_id PASSED           [ 66%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote PASSED               [ 77%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_all_quotes PASSED              [ 88%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_random_quote PASSED            [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 9 passed in 0.23 seconds ===========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time, lets take a deeper view of what has changed, using &lt;code&gt;git diff&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(random_quote) $ git diff
diff --git a/src/random_quote/manager.py b/src/random_quote/manager.py
index 762ef05..d9da9cf 100644
--- a/src/random_quote/manager.py
+++ b/src/random_quote/manager.py
@@ -46,7 +46,11 @@ class RandomQuoteManager:

         result = c.fetchone()

-        return dict(result)
+        if result is None:
+            return None
+        else:
+            return dict(result)
+

     def remove(self, id_):
         """
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The plus signs show what lines we added, and the minus signs show which were removed.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;You can use &lt;code&gt;git difftool&lt;/code&gt; to view diffs in a graphical diff viewer. The &lt;a class="reference external" href="https://git-scm.com/docs/git-difftool"&gt;git-difftool docuentation&lt;/a&gt; has usage details.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now since we like the changes that were made, we can make a commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git commit -a -m&lt;span class="s2"&gt;"Fixed bug where a non-existent quote id would raise a TypeError"&lt;/span&gt;
&lt;span class="go"&gt;[bug-unknown-id d9d2408] Fixed bug where a non-existent quote id would raise a TypeError&lt;/span&gt;
&lt;span class="go"&gt;1 file changed, 6 insertions(+), 1 deletion(-)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="we-re-not-quite-done-yet"&gt;
&lt;h2 id="we're not quite done yet"&gt;We're Not Quite Done Yet&lt;/h2&gt;
&lt;p&gt;As mentioned in the last section, making a web request for &lt;code&gt;/quote/zzzzz&lt;/code&gt; no longer raises an exception, but it doesn't necessarily act in a way that's consistent with web standards.&lt;/p&gt;
&lt;p&gt;In web APIs, it's best practice to use the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;HTTP status codes&lt;/a&gt; to tell a client what you can about how they messed up. In this case, we're returning an empty value, which &lt;em&gt;sort of&lt;/em&gt; tells them they messed up, but what we &lt;em&gt;really&lt;/em&gt; want to tell the client is, "hey, you asked for a quote that doesn't exist".&lt;/p&gt;
&lt;p&gt;The best status code for this situation is the &lt;em&gt;404 Not Found&lt;/em&gt; code. Mozila describes it as, "The server can not find requested resource", which is exactly what's happened here.&lt;/p&gt;
&lt;p&gt;So we need to get our &lt;code&gt;RandomQuoteApp&lt;/code&gt; to detect when &lt;code&gt;RandomQuoteManager.get()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;, and send the correct HTTP status in the response.&lt;/p&gt;
&lt;p&gt;As before, lets write the test first, expecting it to fail.&lt;/p&gt;
&lt;p&gt;Again, we can look to a similar test case, this time in &lt;code&gt;src/random_quote/tests/test_wsgi.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make a GET request for a single pre-existing quote.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/quote/1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'200 OK'&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"rowid"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic quote 1'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;What we want to do in our new case, is request a bad id, and test for a 404 response, like we got in our browser earlier.&lt;/p&gt;
&lt;p&gt;We can test this by adding the following test case to the end of &lt;code&gt;src/random_quote/tests/test_wsgi.py&lt;/code&gt; (after &lt;code&gt;test_random_quote()&lt;/code&gt;):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;59
60
61
62
63
64
65&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_quote_unknown_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make a GET request for a single pre-existing quote, but the id doesn't exist.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/quote/zzzzzz"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'404 Not Found'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;WebTest.TestApp&lt;/code&gt;, returned by our fixture, does a lot of checking for us. Normally, it will even raise an exception when a non-"200 OK" status is returned. So in order to check for a specific status, we need to let the &lt;code&gt;TestApp.get()&lt;/code&gt; method know we are expecting a different response code. This is done with the &lt;code&gt;status&lt;/code&gt; keyword parameter (it can be a specific number, or a pattern to match, like "4??").&lt;/p&gt;
&lt;p&gt;When the tests run, we see the error, this time, it's raised by &lt;code&gt;WebTest.Testapp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest -v src
&lt;span class="go"&gt;============================= test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 10 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_add_quote PASSED            [ 10%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_get_quote PASSED            [ 20%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_remove_quote PASSED         [ 30%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_all PASSED                  [ 40%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_random_quote PASSED         [ 50%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_unknown_id PASSED           [ 60%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote PASSED               [ 70%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_all_quotes PASSED              [ 80%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_random_quote PASSED            [ 90%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote_unknown_id FAILED    [100%]&lt;/span&gt;

&lt;span class="go"&gt;=================================== FAILURES ===================================&lt;/span&gt;
&lt;span class="go"&gt;__________________________ test_get_quote_unknown_id ___________________________&lt;/span&gt;

&lt;span class="go"&gt;preconfigured_wsgi_app = &amp;lt;webtest.app.TestApp object at 0x102fda6a0&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;    def test_get_quote_unknown_id(preconfigured_wsgi_app):&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;
&lt;span class="go"&gt;        Make a GET request for a single pre-existing quote, but the id doesn't exist.&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="nv"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; preconfigured_wsgi_app.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/quote/zzzzzz"&lt;/span&gt;, &lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py:63:&lt;/span&gt;
&lt;span class="go"&gt;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&lt;/span&gt;
&lt;span class="go"&gt;lib/python3.7/site-packages/webtest/app.py:335: in get&lt;/span&gt;
&lt;span class="go"&gt;    expect_errors=expect_errors)&lt;/span&gt;
&lt;span class="go"&gt;lib/python3.7/site-packages/webtest/app.py:654: in do_request&lt;/span&gt;
&lt;span class="go"&gt;    self._check_status(status, res)&lt;/span&gt;
&lt;span class="go"&gt;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _&lt;/span&gt;

&lt;span class="go"&gt;self = &amp;lt;webtest.app.TestApp object at 0x102fda6a0&amp;gt;, status = 404&lt;/span&gt;
&lt;span class="go"&gt;res = &amp;lt;200 OK application/json body=b'null'&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;    def _check_status(self, status, res):&lt;/span&gt;
&lt;span class="go"&gt;        if status == '*':&lt;/span&gt;
&lt;span class="go"&gt;            return&lt;/span&gt;
&lt;span class="go"&gt;        res_status = res.status&lt;/span&gt;
&lt;span class="go"&gt;        if (isinstance(status, string_types) and '*' in status):&lt;/span&gt;
&lt;span class="go"&gt;            if re.match(fnmatch.translate(status), res_status, re.I):&lt;/span&gt;
&lt;span class="go"&gt;                return&lt;/span&gt;
&lt;span class="go"&gt;        if isinstance(status, string_types):&lt;/span&gt;
&lt;span class="go"&gt;            if status == res_status:&lt;/span&gt;
&lt;span class="go"&gt;                return&lt;/span&gt;
&lt;span class="go"&gt;        if isinstance(status, (list, tuple)):&lt;/span&gt;
&lt;span class="go"&gt;            if res.status_int not in status:&lt;/span&gt;
&lt;span class="go"&gt;                raise AppError(&lt;/span&gt;
&lt;span class="go"&gt;                    "Bad response: %s (not one of %s for %s)\n%s",&lt;/span&gt;
&lt;span class="go"&gt;                    res_status, ', '.join(map(str, status)),&lt;/span&gt;
&lt;span class="go"&gt;                    res.request.url, res)&lt;/span&gt;
&lt;span class="go"&gt;            return&lt;/span&gt;
&lt;span class="go"&gt;        if status is None:&lt;/span&gt;
&lt;span class="go"&gt;            if res.status_int &amp;gt;= 200 and res.status_int &amp;lt; 400:&lt;/span&gt;
&lt;span class="go"&gt;                return&lt;/span&gt;
&lt;span class="go"&gt;            raise AppError(&lt;/span&gt;
&lt;span class="go"&gt;                "Bad response: %s (not 200 OK or 3xx redirect for %s)\n%s",&lt;/span&gt;
&lt;span class="go"&gt;                res_status, res.request.url,&lt;/span&gt;
&lt;span class="go"&gt;                res)&lt;/span&gt;
&lt;span class="go"&gt;        if status != res.status_int:&lt;/span&gt;
&lt;span class="go"&gt;            raise AppError(&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;               &lt;span class="s2"&gt;"Bad response: %s (not %s)\n%s"&lt;/span&gt;, res_status, status, res&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;E           webtest.app.AppError: Bad response: 200 OK (not 404)&lt;/span&gt;
&lt;span class="go"&gt;E           b'null'&lt;/span&gt;

&lt;span class="go"&gt;lib/python3.7/site-packages/webtest/app.py:689: AppError&lt;/span&gt;
&lt;span class="go"&gt;====================== 1 failed, 9 passed in 0.49 seconds ======================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, let's make this test pass, by getting the &lt;code&gt;RandomQuoteApp.get()&lt;/code&gt; method to return a 404 when &lt;code&gt;None&lt;/code&gt; is returned by &lt;code&gt;RandomQuoteManager.get()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webob&lt;/code&gt; comes with a few handy helper classes and 'canned' responses to make things like returning a 404 error code easy. In particular, it provides &lt;code&gt;webob.exc.HTTPNotFound&lt;/code&gt;. It is a hybrid class that is a &lt;code&gt;webob.Response&lt;/code&gt; object, but also a python &lt;code&gt;Exception&lt;/code&gt;. It can be raised by part of your application, &lt;em&gt;caught&lt;/em&gt; and returned to the user like any other &lt;code&gt;webob.Response&lt;/code&gt; to let them know something went wrong.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;We make use of this in the &lt;code&gt;RandomQuoteApp.__call__()&lt;/code&gt; method, in the code we use to route requests to various methods and objects:&lt;/p&gt;
&lt;div class="last"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Invoke the WSGI application - routing.&lt;/span&gt;

&lt;span class="sd"&gt;    Based on the request path, invokes the appropriate method, passing a&lt;/span&gt;
&lt;span class="sd"&gt;    pre-constructed webob.Request object.&lt;/span&gt;

&lt;span class="sd"&gt;    Expects each method to return a webob.Response object, which will be&lt;/span&gt;
&lt;span class="sd"&gt;    invoked and returned as per the WSGI protocol.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/quotes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/quote"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"/random"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;HTTPError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;error_response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;error_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With the help of &lt;code&gt;webob.exc.HTTPNotFound&lt;/code&gt;, we'll fix &lt;code&gt;RandomQuoteApp.get()&lt;/code&gt;. Add the two highlighted lines to &lt;code&gt;src/random_quote/wsgi.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return a webob.Response object with a JSON payload containing the&lt;/span&gt;
&lt;span class="sd"&gt;        requested quote. The quote id is specified as the last part of the&lt;/span&gt;
&lt;span class="sd"&gt;        request path:&lt;/span&gt;

&lt;span class="sd"&gt;            /quote/12345&lt;/span&gt;


&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/([^/]+)$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="hll"&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, when we run the tests again, the &lt;code&gt;test_get_quote_unknown_id()&lt;/code&gt; case passes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 10 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py ......                             [ 60%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ....                                  [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 10 passed in 0.18 seconds ===========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last thing to do is to commit these changes. We'll leave that as an exercise for the reader. Remember to &lt;code&gt;git status&lt;/code&gt;, and feel free to use the &lt;code&gt;-m&lt;/code&gt; flag to &lt;code&gt;git commit&lt;/code&gt; if you'd like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="version-bump"&gt;
&lt;h2 id="version bump"&gt;Version Bump&lt;/h2&gt;
&lt;p&gt;Our project uses &lt;a class="reference external" href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. The 'semver' website has all of the specifics, but the gist is that each version of the software is represented by a number, broken into three parts (to quote the spec):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;MAJOR&lt;/strong&gt; version when you make incompatible API changes,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MINOR&lt;/strong&gt; version when you add functionality in a backwards-compatible manner, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt; version when you make backwards-compatible bug fixes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each version is incremented as corresponding changes are made. Versions start at zero.&lt;/p&gt;
&lt;p&gt;The goal is to make it easy to compare versions as the code evolves. It's also easier to make certain judgments about the code's stability and compatibility.&lt;/p&gt;
&lt;p&gt;For example, if you built your application against version &lt;strong&gt;1.0.0&lt;/strong&gt; of a library, you can assume that your application will continue to work with version &lt;strong&gt;1.0.4&lt;/strong&gt; (the fourth bug fix), as well as &lt;strong&gt;1.2.0&lt;/strong&gt; (the second time backwards-compatible features were added), and &lt;strong&gt;1.99.223&lt;/strong&gt; (99th feature release, 223rd bug fix - &lt;em&gt;yikes&lt;/em&gt;). But, you can expect your code to need modifications if you want to upgrade to version &lt;strong&gt;2.0.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Since our project is pre-release, but we're confident the API will stay stable, the project is initially versioned &lt;strong&gt;0.1.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Since our application is being distributed as a python egg, we're setting the version using the &lt;code&gt;version&lt;/code&gt; argument to &lt;code&gt;setup()&lt;/code&gt; in our &lt;code&gt;setup.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"random_quote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'random_quote'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;package_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;'src'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'webob'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You can also add &lt;strong&gt;EXTENSIONS&lt;/strong&gt; to the version when needed, like &lt;strong&gt;0.1.0-alpha&lt;/strong&gt;. These extensions are useful for special releases, like handing off a pre-release version to testers or early adopters, or if you make a special variant of a release for a specific client.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;There are many ways to version software, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Software_versioning"&gt;semantic versioning isn't the only one&lt;/a&gt;. We've used it here because it's pretty common, and has some benefits. In particular, its very compatible with python packaging.&lt;/p&gt;
&lt;p class="last"&gt;Before you adopt it wholesale in your projects, be sure to read up on its faults and look at other perspectives. &lt;a class="reference external" href="https://surfingthe.cloud/semantic-versioning-anti-pattern/"&gt;This post by Brandon Gillespie&lt;/a&gt; and the &lt;a class="reference external" href="https://news.ycombinator.com/item?id=13378637"&gt;Hacker News discussion about it&lt;/a&gt; are great examples of what to look for.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now that we have a basic understanding of semantic versioning, it may be apparent what we need to do, now that we've fixed our first bug: &lt;strong&gt;we need to update the version number&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Since this is the first bug, we just need to increment the last number. As such, our new version is &lt;strong&gt;0.1.1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We'll leave making this change as an exercise for the user.&lt;/p&gt;
&lt;p&gt;After the version change, be sure to re-install the application, using &lt;code&gt;pip&lt;/code&gt;, as we did in the initial setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pip install -e .
&lt;span class="go"&gt;Obtaining file://[...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;Requirement already satisfied: webob in ./lib/python3.7/site-packages (from random-quote==0.1.1) (1.8.5)&lt;/span&gt;
&lt;span class="go"&gt;Installing collected packages: random-quote&lt;/span&gt;
&lt;span class="go"&gt;  Found existing installation: random-quote 0.1.0&lt;/span&gt;
&lt;span class="go"&gt;    Uninstalling random-quote-0.1.0:&lt;/span&gt;
&lt;span class="go"&gt;      Successfully uninstalled random-quote-0.1.0&lt;/span&gt;
&lt;span class="go"&gt;  Running setup.py develop for random-quote&lt;/span&gt;
&lt;span class="go"&gt;Successfully installed random-quote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And re-run the tests to make sure everything is still working:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;==================================== test session starts =====================================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.10.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 10 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py ......                                          [ 60%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ....                                               [100%]&lt;/span&gt;

&lt;span class="go"&gt;================================= 10 passed in 0.18 seconds ==================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, remember to use &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git diff&lt;/code&gt; to make sure the changes are correct before committing, and be sure to write a useful log message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fetch-and-rebase"&gt;
&lt;h2 id="fetch and rebase"&gt;Fetch and Rebase&lt;/h2&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview-part2-c-cropped.png"/&gt;
&lt;/div&gt;
&lt;p&gt;We now have a backlog containing a handful of changes, all regarding this bug:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline

&lt;span class="go"&gt;5b81947745f2c184619a9d7c1a99546d9aa01662 (HEAD -&amp;gt; bug-unknown-id) Increased the version number&lt;/span&gt;
&lt;span class="go"&gt;640c4e2431776e9b6c252bef1c7509fee1557c79 Added test for requesting a non-existant quote id in the HTTP API&lt;/span&gt;
&lt;span class="go"&gt;615a72a651293607e5429fc1b5bac1486cc2b486 Fixed bug where a non-existent quote id would raise a TypeError&lt;/span&gt;
&lt;span class="go"&gt;a2806131faa19444964868234ec02123d47f73ef Added failing test an unknown id is passed to RandomQuoteManager.get()&lt;/span&gt;

&lt;span class="go"&gt;-- snip --&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to make our changes part of the &lt;code&gt;master&lt;/code&gt; branch, we need to incorporate them into the changes in that branch. This can be done with &lt;code&gt;git merge&lt;/code&gt;, but all of our commits will be mixed into the commit log. This is bad.  Why? There are a handful of reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When someone looks at the log for the &lt;code&gt;master&lt;/code&gt; branch, it will be messy.&lt;/li&gt;
&lt;li&gt;Trying to understand everything that was changed across many commits is difficult.&lt;/li&gt;
&lt;li&gt;If we messed up, and our bug fix needed to be reverted, it's hard to pinpoint exactly what we did.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can address all of these issues with &lt;code&gt;git rebase&lt;/code&gt;. It also adds "piece of mind", allowing us to commit frequently with poorly written commit messages without worrying that they will pollute the main log. ðŸ˜Ž&lt;/p&gt;
&lt;p&gt;Rebase allows us to do a lot, but the basic purpose is to alter commits, including taking existing commits and condensing them down, as we're going to do here.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt; is a destructive action. &lt;strong&gt;It cannot be undone&lt;/strong&gt; (well, &lt;a class="reference external" href="https://stackoverflow.com/questions/134882/undoing-a-git-rebase"&gt;it can&lt;/a&gt;, but it's not easy). It's a very intuitive tool and something you'll get comfortable with quickly. Just be careful.&lt;/p&gt;
&lt;p&gt;There are several ways to protect yourself. The simplest is to just duplicate your checkout as a backup before you do your rebase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt; (random_quote) $ cd ..&lt;/span&gt;
&lt;span class="go"&gt; (random_quote) $ cp -r random_quote random_quote_before_rebase_because_im_scared&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class="last"&gt;Just be sure to delete it as soon as you're finished. Note that your virtual environment might not function. There are hard-coded paths in some of the environment files. To use the environment, you'll need to clean out the virtual environment directories/files (&lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;pyvenv.cfg&lt;/code&gt;) and re-run &lt;code&gt;python -m venv .&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;First, we'll use &lt;code&gt;git fetch&lt;/code&gt; to retrieve the latest version of the &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git fetch origin master
&lt;span class="go"&gt;From [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt; * branch            master     -&amp;gt; FETCH_HEAD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt; has an &lt;em&gt;interactive&lt;/em&gt; mode that makes the process simple ðŸ¦„. Start by invoking &lt;code&gt;git rebase&lt;/code&gt; with the &lt;code&gt;-i&lt;/code&gt; switch and telling git what you want to rebase &lt;em&gt;to&lt;/em&gt;. In our case, we want to rebase against the changes made to &lt;code&gt;master&lt;/code&gt;, the branch we started with (this can be a branch, a specific commit id, or a tag):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git rebase -i master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll be presented with a file in our editor (it will likely be &lt;code&gt;vim&lt;/code&gt; on most platforms, but as discussed earlier, it's configurable and varies) that looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pick a280613 Added failing test an unknown id is passed to RandomQuoteManager.get()
pick 615a72a Fixed bug where a non-existent quote id would raise a TypeError
pick 640c4e2 Added test for requesting a non-existant quote id in the HTTP API
pick 5b81947 Increased the version number

# Rebase 370f975..5b81947 onto 370f975 (4 commands)
#
# Commands:
# p, pick &amp;lt;commit&amp;gt; = use commit
# r, reword &amp;lt;commit&amp;gt; = use commit, but edit the commit message
# e, edit &amp;lt;commit&amp;gt; = use commit, but stop for amending
# s, squash &amp;lt;commit&amp;gt; = use commit, but meld into previous commit
# f, fixup &amp;lt;commit&amp;gt; = like "squash", but discard this commit's log message
# x, exec &amp;lt;command&amp;gt; = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop &amp;lt;commit&amp;gt; = remove commit
# l, label &amp;lt;label&amp;gt; = label current HEAD with a name
# t, reset &amp;lt;label&amp;gt; = reset HEAD to a label
# m, merge [-C &amp;lt;commit&amp;gt; | -c &amp;lt;commit&amp;gt;] &amp;lt;label&amp;gt; [# &amp;lt;oneline&amp;gt;]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c &amp;lt;commit&amp;gt; to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;There are two sections to this file - the first is the list of commits (lines 1-3), in order from oldest to newest. The rest of the file is git, once again giving us really helpful in-line guidance. ðŸ¦„&lt;/p&gt;
&lt;p&gt;Each commit line has three parts, separated by spaces:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;the &lt;em&gt;command&lt;/em&gt;, as referenced in the help text.&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;git id&lt;/em&gt; - a unique string that represents that commit within the repository. The ids are a &lt;em&gt;hash&lt;/em&gt; of a bunch of information, and are usually very long - they are different enough that it's possible to reference them using the "short" form here. This works most places where a git id is needed.&lt;/li&gt;
&lt;li&gt;the first line of the &lt;em&gt;commit log message&lt;/em&gt;, to help you understand what you're looking at.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We just want to &lt;code&gt;squash&lt;/code&gt; these commits down to one, so we need to &lt;code&gt;pick&lt;/code&gt; one to use as the final commit. We need to ensure that we pick the oldest (the first one) so everything gets included.&lt;/p&gt;
&lt;p&gt;With the correct commands in place, the first three lines look like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pick a280613 Added failing test an unknown id is passed to RandomQuoteManager.get()
squash 615a72a Fixed bug where a non-existent quote id would raise a TypeError
squash 640c4e2 Added test for requesting a non-existant quote id in the HTTP API
squash 5b81947 Increased the version number

# -- snip --
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;When we save this file, &lt;code&gt;git rebase&lt;/code&gt; will present us with &lt;em&gt;another&lt;/em&gt; file - this is the commit log entry for our new squashed commit. Git does us a favor by aggregating all of the log entries for us, and giving us a summary of what the new commit looks like, in terms of what files changed:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# This is a combination of 4 commits.
# This is the 1st commit message:

Added failing test an unknown id is passed to RandomQuoteManager.get()

# This is the commit message #2:

Fixed bug where a non-existent quote id would raise a TypeError

# This is the commit message #3:

Added test for requesting a non-existant quote id in the HTTP API

# This is the commit message #4:

Increased the version number

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# Date:      Thu Jun 13 11:10:16 2019 -0400
#
# interactive rebase in progress; onto 370f975
# Last commands done (4 commands done):
#    squash 640c4e2 Added test for requesting a non-existant quote id in the HTTP API
#    squash 5b81947 Increased the version number
# No commands remaining.
# You are currently rebasing branch 'bug-unknown-id' on '370f975'.
#
# Changes to be committed:
#       modified:   setup.py
#       modified:   src/random_quote/manager.py
#       modified:   src/random_quote/tests/test_manager.py
#       modified:   src/random_quote/tests/test_wsgi.py
#
# Untracked files:
#       quotes.csv
#       test.db
#       test_example.py
#
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This gives us a chance to write a nice, concise log entry that covers everything we did to fix this bug. Remove lines 1-16 and replace with something like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BUG: if a bad quote id was given (invalid, non-existent), a TypeError was raised.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;And as before, we want to be concise. If we needed to elaborate, we could do so on the subsequent lines.&lt;/p&gt;
&lt;p&gt;After we save that file, git will tell us if the rebase was a success:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;[detached HEAD e80d483] BUG: if a bad quote id was given (invalid, non-existent), a TypeError was raised.&lt;/span&gt;
&lt;span class="go"&gt; Date: Tue May 7 11:05:01 2019 -0400&lt;/span&gt;
&lt;span class="go"&gt; 3 files changed, 23 insertions(+), 4 deletions(-)&lt;/span&gt;
&lt;span class="go"&gt;Successfully rebased and updated refs/heads/bug-unknown-id.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run &lt;code&gt;git log --pretty&lt;/code&gt; again, we can see our old commits are gone, and the last one is present:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log --pretty

&lt;span class="go"&gt;commit e80d48320ea1e912d8d0c137b32a21f33492e8f5 (HEAD -&amp;gt; bug-unknown-id)&lt;/span&gt;
&lt;span class="go"&gt;Author: Josh Johnson &amp;lt;jjmojojjmojo@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Tue May 7 11:05:01 2019 -0400&lt;/span&gt;

&lt;span class="go"&gt;    BUG: if a bad quote id was given (invalid, non-existent), a TypeError was raised.&lt;/span&gt;

&lt;span class="go"&gt;-- snip --&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;If you messed up the file causing a "recoverable" error, like say you tried to &lt;code&gt;squash&lt;/code&gt; every commit and forgot to &lt;code&gt;pick&lt;/code&gt; one, git will put you into an "in progress" state. Typically, this state is used when you need to fix conflicts (we'll cover that in &lt;a class="reference external" href="{filename}/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;), or do other work on the code to make a rebase complete successfully.&lt;/p&gt;
&lt;p&gt;You might get an error like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt; error: cannot 'squash' without a previous commit&lt;/span&gt;
&lt;span class="go"&gt; You can fix this with 'git rebase --edit-todo' and then run 'git rebase --continue'.&lt;/span&gt;
&lt;span class="go"&gt; Or you can abort the rebase with 'git rebase --abort'.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You'll also see you have a rebase in progress when you run &lt;code&gt;git status&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git status
&lt;span class="go"&gt; interactive rebase in progress; onto 70ae1f2&lt;/span&gt;
&lt;span class="go"&gt; No commands done.&lt;/span&gt;
&lt;span class="go"&gt; Next commands to do (3 remaining commands):&lt;/span&gt;
&lt;span class="go"&gt;    s b707557 Added test for a bug where specifying a nonexistent quote id throws a TypeError&lt;/span&gt;
&lt;span class="go"&gt;    s b751360 Fixed bug where a non-existent quote id would raise a TypeError&lt;/span&gt;
&lt;span class="go"&gt;   (use "git rebase --edit-todo" to view and edit)&lt;/span&gt;
&lt;span class="go"&gt; You are currently editing a commit while rebasing branch 'bug-unknown-id' on '70ae1f2'.&lt;/span&gt;
&lt;span class="go"&gt;   (use "git commit --amend" to amend the current commit)&lt;/span&gt;
&lt;span class="go"&gt;   (use "git rebase --continue" once you are satisfied with your changes)&lt;/span&gt;

&lt;span class="go"&gt; Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;   (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;     test.db&lt;/span&gt;

&lt;span class="go"&gt; nothing added to commit but untracked files present (use "git add" to track)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, git tells us exactly what we need to do. If you just made a typo, the best thing to do is issue &lt;code&gt;git rebase --abort&lt;/code&gt;. This will put you back to the way things were before you invoked &lt;code&gt;git rebase -i&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt; $&lt;/span&gt; git rebase --abort
&lt;/pre&gt;&lt;/div&gt;
&lt;p class="last"&gt;Now &lt;code&gt;git status&lt;/code&gt; will look like it did before the aborted rebase.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To be sure we didn't loose anything or make any mistakes during the rebase, now we should run the tests again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pytest src
&lt;span class="go"&gt;=========================== test session starts ===========================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.4.1, py-1.8.0, pluggy-0.10.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 10 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py ......                       [ 60%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ....                            [100%]&lt;/span&gt;

&lt;span class="go"&gt;======================== 10 passed in 0.18 seconds ========================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We should see 10 tests as before, and they should all pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="merge-master-and-publish"&gt;
&lt;h2 id="merge master and publish"&gt;Merge Master And Publish&lt;/h2&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview-part2-d-cropped.png"/&gt;
&lt;/div&gt;
&lt;p&gt;If we know someone has changed the code in &lt;code&gt;master&lt;/code&gt; since we branched, we will need to incorporate those changes into our branch before we proceed.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;We know this hasn't happened, since we're the only ones working on this code. ðŸ˜€ Don't fret, we'll simulate a collaboration in &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;!.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In either case, we still have to go through the same basic process.&lt;/p&gt;
&lt;p&gt;Now, we'll &lt;code&gt;git checkout&lt;/code&gt; &lt;code&gt;master&lt;/code&gt;, and &lt;code&gt;git merge&lt;/code&gt; our branch:&lt;/p&gt;
&lt;p&gt;First the &lt;code&gt;git checkout&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git checkout master
&lt;span class="go"&gt;Switched to branch 'master'&lt;/span&gt;
&lt;span class="go"&gt;Your branch is up to date with 'origin/master'.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the &lt;code&gt;git merge&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git merge bug-unknown-id
&lt;span class="go"&gt;Updating 370f975..94a4210&lt;/span&gt;
&lt;span class="go"&gt;Fast-forward&lt;/span&gt;
&lt;span class="go"&gt; setup.py                               |  2 +-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/manager.py            |  7 +++++--&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/test_manager.py | 10 +++++++++-&lt;/span&gt;
&lt;span class="go"&gt; src/random_quote/tests/test_wsgi.py    | 10 +++++++++-&lt;/span&gt;
&lt;span class="go"&gt; 4 files changed, 24 insertions(+), 5 deletions(-)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; shows us that we are one commit ahead of our remote repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch master&lt;/span&gt;
&lt;span class="go"&gt;Your branch is ahead of 'origin/master' by 1 commit.&lt;/span&gt;
&lt;span class="go"&gt;  (use "git push" to publish your local commits)&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    test.db&lt;/span&gt;

&lt;span class="go"&gt;nothing added to commit but untracked files present (use "git add" to track)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make our changes public, we just need to &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can see our bug fix as a single commit in the log:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log --pretty

&lt;span class="go"&gt;commit e80d48320ea1e912d8d0c137b32a21f33492e8f5 (HEAD -&amp;gt; master, origin/master, origin/HEAD, bug-unknown-id)&lt;/span&gt;
&lt;span class="go"&gt;Author: Josh Johnson &amp;lt;jjmojojjmojo@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Tue May 7 11:05:01 2019 -0400&lt;/span&gt;

&lt;span class="go"&gt;    BUG: if a bad quote id was given (invalid, non-existent), a TypeError was raised.&lt;/span&gt;

&lt;span class="go"&gt;-- snip --&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tag-the-version"&gt;
&lt;h2 id="tag the version"&gt;Tag The Version&lt;/h2&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview-part2-e-cropped.png"/&gt;
&lt;/div&gt;
&lt;p&gt;Git has a concept of "tagging" - where you can assign a user-friendly label to a specific commit. It can make it really easy for people to check out a specific point in the history of the code. Technically they are &lt;em&gt;optional&lt;/em&gt;, but are a very useful tool.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;There are two types of tags, "lightweight" and "annotated". The specifics aren't important for this guide, just be aware there is a difference, and know that we are using lightweight tags here.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Git assumes that you want to tag the current commit if you don't specify one, so if we look at the last log entry, we'll know what's being tagged:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log -n1
&lt;span class="go"&gt;commit e80d48320ea1e912d8d0c137b32a21f33492e8f5 (HEAD -&amp;gt; master, tag: v0.1.1, origin/master, origin/HEAD, bug-unknown-id)&lt;/span&gt;
&lt;span class="go"&gt;Author: Josh Johnson &amp;lt;jjmojojjmojo@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Tue May 7 11:05:01 2019 -0400&lt;/span&gt;

&lt;span class="go"&gt;    BUG: if a bad quote id was given (invalid, non-existent), a TypeError was raised.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;If we wanted to tag a different commit, we just need to note the id (in this case &lt;code&gt;e80d48320ea1e912d8d0c137b32a21f33492e8f5&lt;/code&gt;). We can use just the first few characters to save some typing, like &lt;code&gt;e80d4832&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We are going to name our tag &lt;code&gt;v0.1.1&lt;/code&gt;. The exact format is up to you and people you collaborate with, but it's useful to use a common prefix to help classify what the tag &lt;em&gt;means&lt;/em&gt;. In this case, we're using &lt;code&gt;v&lt;/code&gt; to indicate a release version. This is helpful later when your project has possibly hundreds of tags, for may reasons besides marking released versions, since we can do pattern matching when listing tags.&lt;/p&gt;
&lt;p&gt;Now for the actual tagging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git tag v0.1.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To see what tags we've made, we can run &lt;code&gt;git tag&lt;/code&gt; without any arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git tag
&lt;span class="go"&gt;v0.1.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we wanted to limit what tags we want to see, we can use the &lt;code&gt;-l&lt;/code&gt; parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git tag -l &lt;span class="s2"&gt;"v*"&lt;/span&gt;
&lt;span class="go"&gt;v0.1.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can remove a tag using the &lt;code&gt;-d&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git tag -d v0.1.1
&lt;span class="go"&gt;Deleted tag 'v0.1.1' (was e80d483)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="remote-vs-local-tags"&gt;
&lt;h3&gt;Remote Vs Local Tags&lt;/h3&gt;
&lt;p&gt;So far, we've only used &lt;em&gt;local&lt;/em&gt; tags. These tags only exist in our working directory - they aren't available in our &lt;em&gt;remote&lt;/em&gt;, or the repository we cloned. To make a tag remote, we use &lt;code&gt;git push&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git tag v0.1.1 &lt;span class="c1"&gt;# need to remake since we deleted it above&lt;/span&gt;
&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git push origin v0.1.1
&lt;span class="go"&gt;Total 0 (delta 0), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt;To [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt; * [new tag]         v0.1.1 -&amp;gt; v0.1.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is very similar to when we ran &lt;code&gt;git push&lt;/code&gt; in the last section, but git knows we are only asking to send the new tag to the repository.&lt;/p&gt;
&lt;p&gt;To delete a remote tag, we need to let &lt;code&gt;git push&lt;/code&gt; know with the &lt;code&gt;--delete&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git push origin --delete v0.1.1
&lt;span class="go"&gt; - [deleted]         v0.1.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;At this point, if you've followed along, we've deleted our tag. It would be a good idea to recreate it. Here's a condensed version of the process:&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt; (random_quote) $ git tag v0.1.1&lt;/span&gt;
&lt;span class="go"&gt; (random_quote) $ git push origin v0.1.1&lt;/span&gt;
&lt;span class="go"&gt; Total 0 (delta 0), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt; To [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt;  * [new tag]         v0.1.1 -&amp;gt; v0.1.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="remote-vs-local-branches"&gt;
&lt;h2 id="remote vs local branches"&gt;Remote vs Local Branches&lt;/h2&gt;
&lt;p&gt;As with tags, branches exist in &lt;em&gt;local&lt;/em&gt; and &lt;em&gt;remote&lt;/em&gt; versions. Our branch, so far, only exists in our clone of the repository. This is good, since we were able to fix our bug and merge our changes into &lt;code&gt;master&lt;/code&gt; without having to show the code to anyone.&lt;/p&gt;
&lt;p&gt;However, when you are collaborating with people, you'll often need to give them access to your code. This is done by making your branch &lt;em&gt;remote&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We use &lt;code&gt;git push&lt;/code&gt; to do this, just like we did with tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git push origin bug-unknown-id
&lt;span class="go"&gt;Total 0 (delta 0), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt;To [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt; * [new branch]      bug-unknown-id -&amp;gt; bug-unknown-id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;It's OK to push to your remote branch frequently. There are a few git actions that are a little more difficult (&lt;a class="reference external" href="https://stackoverflow.com/questions/22682870/git-undo-pushed-commits/22683231"&gt;reverting your changes&lt;/a&gt;, for example) once you've pushed, but remember, you are working on a branch, and you will be rebasing later, so there's little risk and you get the benefit of being able to back up your changes to the git remote and show your progress to your collaborators.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-what-s-next"&gt;
&lt;h2 id="conclusion/what's next"&gt;Conclusion/What's Next&lt;/h2&gt;
&lt;p&gt;In this installment, we got a lot more comfortable writing tests and doing stuff with git. At this point, we're ready to do any sort of feature or bug work, and leave a clean commit log when we're done.&lt;/p&gt;
&lt;p&gt;In the &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;final part&lt;/a&gt; of this series, we'll simulate two developers working on different branches and causing a conflict, which we'll learn how to resolve.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="git"></category><category term="branching"></category><category term="development process"></category></entry><entry><title>Branching With Git And Testing With Pytest: A Comprehensive Guide</title><link href="/branching-git-with-pytest.html" rel="alternate"></link><published>2019-06-19T09:00:00-04:00</published><updated>2019-06-19T09:00:00-04:00</updated><author><name>jjmojojjmojo</name></author><id>tag:None,2019-06-19:/branching-git-with-pytest.html</id><summary type="html">&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part one of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk a bit about the design of the example application.&lt;/li&gt;
&lt;li&gt;Ensure we are set up for development.&lt;/li&gt;
&lt;li&gt;Exercise the basics of pytest, and git by writing some tests, adding a fixture, and committing our changes.&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part one of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk a bit about the design of the example application.&lt;/li&gt;
&lt;li&gt;Ensure we are set up for development.&lt;/li&gt;
&lt;li&gt;Exercise the basics of pytest, and git by writing some tests, adding a fixture, and committing our changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Developing a sane and productive workflow is essential to increasing productivity and minimizing risk. Good testing discipline coupled with regimented use of a revision control system is key. The workflow outlined in this guide is the result of many years of experience and discussion of best practices. It is not comprehensive in the sense of total maximization of productivity or utter elimination of risk. Frankly, that's just not possible. Instead we lay the groundwork for more robust practices, like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Continuous_integration"&gt;continuous integration&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Continuous_deployment"&gt;continuous deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This guide &lt;em&gt;is&lt;/em&gt;,  however, comprehensive in that it attempts to answer all of the basic questions that developers face when collaborating on large code bases.&lt;/p&gt;
&lt;p&gt;The workflow is presented using a non-trivial (but necessarily simplistic) example application as a framing device. It is designed to be easy to reason about, and show general good practices. However, it is &lt;em&gt;not&lt;/em&gt; optimized or robust. We will discuss areas where we might improve on these aspects, but they're really out of scope for this guide.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;This workflow is a simplified version of the one outlined in the classic &lt;a class="reference external" href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model&lt;/a&gt; by Vincent Driessen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-example-application"&gt;
&lt;h2 id="the example application"&gt;The Example Application&lt;/h2&gt;
&lt;p&gt;For our example, we'll be building on a simple HTTP API endpoint, implemented in Python 3. This endpoint's primary function is to return a random quote from a pool of quotes previously stored in a database.&lt;/p&gt;
&lt;p&gt;The application is built using as few external dependencies as possible, but for added realism, uses a few libraries to handle some of the messier bits.&lt;/p&gt;
&lt;div class="section" id="limitations-and-design-restrictions"&gt;
&lt;h3&gt;Limitations and Design Restrictions&lt;/h3&gt;
&lt;p&gt;The goal of the example application is to provide as realistic a codebase as possible. But there are good reasons to put some simple restrictions on the end product:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Keeping scope in check.&lt;/strong&gt; The application should be easy to reason about. If it were to be too complex, like a real-life code base might be, we'd spend too much time explaining the implementation of the features and bug fixes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comfort of the audience.&lt;/strong&gt; The author hopes that this guide is useful to programmers of all levels of expertise. As such, it's important that the concepts are easy to understand and explain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reducing dependencies (code and infrastructure)&lt;/strong&gt; We could treat this application as a production-ready project, utilizing a highly optimized web framework, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORM&lt;/a&gt;, enterprise-level database, and deploy the whole thing to a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Platform_as_a_service"&gt;PAAS&lt;/a&gt;. However, there's a strong desire to allow any reader, with minimal configuration, to jump in and benefit. Design and technical decisions are made with this in mind.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be as generic as possible&lt;/strong&gt; While we're using a specific database, we are generally adhering to well-known standards like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface"&gt;WSGI&lt;/a&gt;, &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0249/"&gt;DBAPI&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;HTTP&lt;/a&gt;, and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt;. This should make the application useful as a good example of a generic web application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practical terms, this means that the application will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use as few dependencies as possible.&lt;/li&gt;
&lt;li&gt;Use a bundled database product (we're using &lt;a class="reference external" href="https://www.sqlite.org/index.html"&gt;sqllite3&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Require no other tooling beyond a console (terminal), git, python 3 and some sort of text editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One additional area where the design is being restricted is &lt;em&gt;error handling&lt;/em&gt;. Avoiding input verification and exception handling helps keep the code simple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="preparation"&gt;
&lt;h2 id="preparation"&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Before we begin, you should do the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;Install git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/downloads/"&gt;Install python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make sure &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; is installed (it should be, but some Linux distributions put it in a separate package)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there, you'll have all the tools you need, save a preferred text editor and a console (or terminal) to follow along.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The guide has been developed with unix-like systems in mind (Linux, BSD, MacOS). It should be possible to follow along in Windows, but this has not been tested. There are some quirks to using git and python in Windows that the author would like to explore in the future. If you are interested in seeing this guide include Windows-specific notes, please &lt;a class="reference external" href="/pages/contact.html"&gt;contact the author&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can ensure our tools are installed by opening up a terminal and running the following commands (the output shows what the author was using to develop the guide):&lt;/p&gt;
&lt;div class="section" id="verify-git"&gt;
&lt;h3&gt;Verify Git&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git --version
&lt;span class="go"&gt;git version 2.20.1 (Apple Git-117)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="verify-python"&gt;
&lt;h3&gt;Verify Python&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -V
&lt;span class="go"&gt;Python 3.7.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="verify-venv"&gt;
&lt;h3&gt;Verify &lt;code&gt;venv&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv --help
&lt;span class="go"&gt;usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]&lt;/span&gt;
&lt;span class="go"&gt;            [--upgrade] [--without-pip] [--prompt PROMPT]&lt;/span&gt;
&lt;span class="go"&gt;            ENV_DIR [ENV_DIR ...]&lt;/span&gt;

&lt;span class="go"&gt;Creates virtual Python environments in one or more target directories.&lt;/span&gt;

&lt;span class="go"&gt;positional arguments:&lt;/span&gt;
&lt;span class="go"&gt;  ENV_DIR               A directory to create the environment in.&lt;/span&gt;

&lt;span class="go"&gt;optional arguments:&lt;/span&gt;
&lt;span class="go"&gt;  -h, --help            show this help message and exit&lt;/span&gt;
&lt;span class="go"&gt;  --system-site-packages&lt;/span&gt;
&lt;span class="go"&gt;                        Give the virtual environment access to the system&lt;/span&gt;
&lt;span class="go"&gt;                        site-packages dir.&lt;/span&gt;
&lt;span class="go"&gt;  --symlinks            Try to use symlinks rather than copies, when symlinks&lt;/span&gt;
&lt;span class="go"&gt;                        are not the default for the platform.&lt;/span&gt;
&lt;span class="go"&gt;  --copies              Try to use copies rather than symlinks, even when&lt;/span&gt;
&lt;span class="go"&gt;                        symlinks are the default for the platform.&lt;/span&gt;
&lt;span class="go"&gt;  --clear               Delete the contents of the environment directory if it&lt;/span&gt;
&lt;span class="go"&gt;                        already exists, before environment creation.&lt;/span&gt;
&lt;span class="go"&gt;  --upgrade             Upgrade the environment directory to use this version&lt;/span&gt;
&lt;span class="go"&gt;                        of Python, assuming Python has been upgraded in-place.&lt;/span&gt;
&lt;span class="go"&gt;  --without-pip         Skips installing or upgrading pip in the virtual&lt;/span&gt;
&lt;span class="go"&gt;                        environment (pip is bootstrapped by default)&lt;/span&gt;
&lt;span class="go"&gt;  --prompt PROMPT       Provides an alternative prompt prefix for this&lt;/span&gt;
&lt;span class="go"&gt;                        environment.&lt;/span&gt;

&lt;span class="go"&gt;Once an environment has been created, you may wish to activate it, e.g. by&lt;/span&gt;
&lt;span class="go"&gt;sourcing an activate script in its bin directory.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unless you get any errors, or the versions look really dissimilar, you are in good shape.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow-overview"&gt;
&lt;h2 id="workflow overview"&gt;Workflow Overview&lt;/h2&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview.png"/&gt;
&lt;p class="caption"&gt;High-level overview of the workflow, showing each git command.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The basic workflow goes like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt; the repository (or &lt;code&gt;git pull&lt;/code&gt; changes into an existing clone).&lt;/li&gt;
&lt;li&gt;Check out the branch you want to work from (usually &lt;code&gt;master&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Run the tests.&lt;/li&gt;
&lt;li&gt;Create a new branch for the bug/feature. (&lt;code&gt;git branch&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check out the new branch. (&lt;code&gt;git checkout&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Make the changes.&lt;/li&gt;
&lt;li&gt;Write tests for your changes.&lt;/li&gt;
&lt;li&gt;Increment the revision number. (if applicable)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt; your changes and tests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; changes that others may have made.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase&lt;/code&gt; to put all of your commits into one log entry and merge your changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge&lt;/code&gt; to your feature or bug branch.&lt;/li&gt;
&lt;li&gt;Fix any conflicts.&lt;/li&gt;
&lt;li&gt;Run the tests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt; the changes with the new revision number (if applicable)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; the changes to the remote repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll explore each step in detail as we progress through the guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cloning-the-repository"&gt;
&lt;h2 id="cloning the repository"&gt;Cloning The Repository&lt;/h2&gt;
&lt;p&gt;The first step is to clone the initial version of the example application, from my &lt;a class="reference external" href="https://github.com/jjmojojjmojo/random_quote"&gt;github repository&lt;/a&gt;. But because of the stuff we're going to be doing later, this will be a special two-step process.&lt;/p&gt;
&lt;p&gt;First, we need to do a &lt;em&gt;bare&lt;/em&gt; clone of the repository. This will give us a &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes"&gt;remote&lt;/a&gt;, that isn't &lt;a class="reference external" href="https://www.github.com"&gt;github&lt;/a&gt;, that we can clone and work on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone --bare https://github.com/jjmojojjmojo/random_quote.git random_quote_remote
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, instead of cloning my repository from github, we clone &lt;code&gt;random_quote_remote&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone random_quote_remote random_quote
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any changes we &lt;code&gt;git push&lt;/code&gt; in &lt;code&gt;random_quote&lt;/code&gt; will only go to &lt;code&gt;random_quote_remote&lt;/code&gt;.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;This is a handy way to set up a temporary git repository that you can experiment with without any risk to the code hosted on your shared git server (or &lt;a class="reference external" href="https://www.github.com"&gt;github&lt;/a&gt;). ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="jumping-around-in-the-guide"&gt;
&lt;h2 id="jumping around in the guide"&gt;Jumping Around In The Guide&lt;/h2&gt;
&lt;p&gt;ðŸŒˆ We have branches for all of the major work done in the series:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;part1&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;part2&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt; and
&lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;qotd&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Developer &lt;strong&gt;A&lt;/strong&gt;'s feature from &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;index-info&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Developer &lt;strong&gt;B&lt;/strong&gt;'s bug fix from &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;part3&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;,
&lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;!&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Feel free to &lt;code&gt;git checkout&lt;/code&gt; if you need to reset your code, or jump around.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Use &lt;code&gt;git stash&lt;/code&gt; to keep any uncommitted changes for later. See &lt;a class="reference external" href="https://git-scm.com/book/en/v1/Git-Tools-Stashing"&gt;the git documentation&lt;/a&gt; for more information. ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="quick-overview-of-the-application-layout"&gt;
&lt;h2 id="quick overview of the application layout"&gt;Quick Overview Of The Application Layout&lt;/h2&gt;
&lt;p&gt;The code is provided as a &lt;a class="reference external" href="https://setuptools.readthedocs.io/en/latest/formats.html"&gt;python egg&lt;/a&gt;. The source code is contained in &lt;code&gt;src&lt;/code&gt;, and the &lt;code&gt;setup.py&lt;/code&gt; is located in the main directory.&lt;/p&gt;
&lt;p&gt;The application is implemented in the following modules:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;random_quote.manager&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;src/random_quote/manager.py&lt;/code&gt;. Provides a class, &lt;code&gt;RandomQuoteManager&lt;/code&gt; that allows a developer to interact with quotes in the database.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;random_quote.wsgi&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;src/random_quote/wsgi.py&lt;/code&gt;. Provides a class, &lt;code&gt;RandomQuoteApp&lt;/code&gt; which is a WSGI application that provides a limited subset of the manager functionality as an API endpoint.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;random_quote.util&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;src/random_quote/util.py&lt;/code&gt;. Utility functions. Contains a function that can create the database schema &lt;code&gt;init()&lt;/code&gt;, and another that will populate a database with quotes contained in a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comma-separated_values"&gt;CSV&lt;/a&gt; file, &lt;code&gt;ingest()&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;random_quote.tests&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;src/random_quote/tests/test_*.py&lt;/code&gt;. Package that contains unit and functional tests, as well as fixtures (collected in &lt;code&gt;conftest.py&lt;/code&gt;).&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Other files of note:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;setup.py&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The configuration file for this python egg. It declares dependencies and establishes the version number.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;wsgi.py&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Contains an instantiation of the &lt;code&gt;RandomQuoteApp&lt;/code&gt; for use in manual testing, or possible deployment.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;src/random_quote/schema.sql&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A text file containing the SQL statmenets needed to initialize the database, creating the tables. Used by &lt;code&gt;random_quote.util.init()&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;scripts/generate_quotes.py&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A python script that uses a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Markov_chain"&gt;Markov chain&lt;/a&gt; to generate random, but realistic-looking quotes. (see the &lt;code&gt;scripts/README.rst&lt;/code&gt; for more information).&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="initialize-the-virtual-environment"&gt;
&lt;h2 id="initialize the virtual environment"&gt;Initialize The Virtual Environment&lt;/h2&gt;
&lt;p&gt;Now that the repo is cloned and we've checked out the &lt;code&gt;master&lt;/code&gt; branch, we need to initialize the virtual environment, and install the libraries we need for development:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; random_quote
&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv .
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pip install -r requirements.txt
&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pip install -e .
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;We have to first change into the directory where we cloned the code.&lt;/p&gt;
&lt;p&gt;We invoke &lt;code&gt;venv&lt;/code&gt; using the &lt;code&gt;-m&lt;/code&gt; (execute this module) command line option to the python interpreter.&lt;/p&gt;
&lt;p&gt;To activate the virtual environment, we tell our shell to execute the commands in a file called &lt;code&gt;bin/activate&lt;/code&gt;. This sets some environment variables and changes our prompt.&lt;/p&gt;
&lt;p&gt;From there, we can use &lt;code&gt;pip&lt;/code&gt; as we would in our system, except the packages installed are installed to the virtual environment, instead of the system.&lt;/p&gt;
&lt;p&gt;We use two command-line flags of &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First, we use &lt;code&gt;-r&lt;/code&gt; to install first the files used for development, contained in &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, we use &lt;code&gt;-e&lt;/code&gt; to install the &lt;code&gt;random_quote&lt;/code&gt; egg. We specify the current directory (&lt;code&gt;.&lt;/code&gt;), since that's where our &lt;code&gt;setup.py&lt;/code&gt; is. This parameter tells &lt;code&gt;pip&lt;/code&gt; to install our project as a "development" or "editable" egg. This means we can change the source code, and we won't have to re-install the egg to see the changes in our python environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="application-implementation-notes"&gt;
&lt;h2 id="application implementation notes"&gt;Application Implementation Notes&lt;/h2&gt;
&lt;div class="section" id="deisgn-approach"&gt;
&lt;h3&gt;Deisgn Approach&lt;/h3&gt;
&lt;p&gt;The design of the application is in two main parts. We have a data manager, &lt;code&gt;manager.RandomQuoteManager&lt;/code&gt;, that handles all interaction with the database. Then we have the WSGI application, &lt;code&gt;wsgi.RandomQuoteApp&lt;/code&gt; that provides a web-based API.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/key-classes-first-pass.png"/&gt;
&lt;p class="caption"&gt;Key Classes In The Example Application, "Random Quote App"&lt;/p&gt;
&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is a simplified version of a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unified_Modeling_Language"&gt;UML&lt;/a&gt; class diagram.&lt;/p&gt;
&lt;p&gt;The classes are identified as &lt;span class="underline"&gt;underlined&lt;/span&gt; text. The modules are noted in the green boxes.&lt;/p&gt;
&lt;p&gt;Each public (or relevant) method is listed (methods are suffixed with parenthesis), as is each property.&lt;/p&gt;
&lt;p&gt;These two classes are shown to be related by a simple two-direction arrow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/api-boundaries.png"/&gt;
&lt;p class="caption"&gt;Essential API Boundaries&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is done for a few reasons. Primarily, the concept of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;separation of concerns&lt;/a&gt;. The &lt;em&gt;concern&lt;/em&gt; of the database interaction, the &lt;em&gt;concern&lt;/em&gt; of the web interaction, and the &lt;em&gt;concern&lt;/em&gt; of the web &lt;em&gt;client&lt;/em&gt; are separated by &lt;strong&gt;clear API boundaries&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;By doing this, we isolate code that has to be different by its nature. &lt;code&gt;RandomQuoteManager&lt;/code&gt; is concerned with managing and retrieving data in the database. &lt;code&gt;RandomQuoteApp&lt;/code&gt; is concerned with interacting with web clients. The web client is completely out of our control (a browser like &lt;a class="reference external" href="https://www.mozilla.org/en-US/firefox/new/"&gt;Firefox&lt;/a&gt;, a utility like &lt;a class="reference external" href="https://curl.haxx.se/"&gt;cURL&lt;/a&gt;, or another application).&lt;/p&gt;
&lt;p&gt;With proper separation, each concern can be optimized for its purpose. &lt;code&gt;RandomQuoteManager&lt;/code&gt; can do database interactions in the best possible way - we can employ an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORM&lt;/a&gt; someday, or change exactly how we store the data. &lt;code&gt;RandomQuoteApp&lt;/code&gt; will still function, as long as its python API hasn't changed.&lt;/p&gt;
&lt;p&gt;In the same vein, we can make &lt;code&gt;RandomQuoteApp&lt;/code&gt; the best web application possible - we can implement security, or caching - it can evolve into a socket-based API that doesn't use HTTP at all!&lt;/p&gt;
&lt;p&gt;Finally, the concerns of the client are theirs alone. Today we may be building our application for use by a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Single-page_application"&gt;single page application&lt;/a&gt; intended for a browser client. Tomorrow, the random quote service may be used in a network of  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Microservices"&gt;microservices&lt;/a&gt;, where the client will be another service.&lt;/p&gt;
&lt;p&gt;We may write console scripts that use the web API via tools like cURL as part of systems automation.&lt;/p&gt;
&lt;p&gt;Whatever the client exactly is, it can be the &lt;em&gt;best&lt;/em&gt; client for whatever its purpose. As long as the web API is understood by the client, everything keeps working.&lt;/p&gt;
&lt;p&gt;This is entirely in terms of functionality. But there are benefits to this separation for us as developers too.&lt;/p&gt;
&lt;p&gt;Having well-separated API boundaries means the code behind those boundaries can be much more simplistic.&lt;/p&gt;
&lt;p&gt;Lets take a look at two methods that serve similar functions in &lt;code&gt;RandomQuoteManager&lt;/code&gt; and &lt;code&gt;RandomQuoteApp&lt;/code&gt;, both called &lt;code&gt;get()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src/random_quote/manager.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Retrieve a specific quote from the database, identified by id_.&lt;/span&gt;

&lt;span class="sd"&gt;        Returns a dictionary.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT id, author, quote, created FROM quotes WHERE id = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is just one method from the &lt;code&gt;RandomQuoteManager&lt;/code&gt; class. It uses the DBAPI interface to sqlite 3 to get a cursor, and execute a &lt;code&gt;SELECT&lt;/code&gt; SQL statement.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;conn&lt;/code&gt; attribute, a sqlite database connection object, is created in the constructor.&lt;/p&gt;
&lt;p&gt;It then retrieves the data, and then processes it into a dictionary for consumption.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;src/random_quote/manager.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return a webob.Response object with a JSON payload containing the&lt;/span&gt;
&lt;span class="sd"&gt;        requested quote. The quote id is specified as the last part of the&lt;/span&gt;
&lt;span class="sd"&gt;        request path:&lt;/span&gt;

&lt;span class="sd"&gt;            /quote/12345&lt;/span&gt;


&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/([^/]+)$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This method, from &lt;code&gt;RandomQuoteApp&lt;/code&gt;, accepts a &lt;code&gt;WebOb.Request&lt;/code&gt; object. It does a regular-expression search for the quote ID in the path of the request (e.g. &lt;code&gt;/quote/1234&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If there is no ID specified, it makes the router return a 404 "Not Found" response, by raising the &lt;code&gt;HTTPNotFound&lt;/code&gt; class as an exception.&lt;/p&gt;
&lt;p&gt;It then uses the &lt;code&gt;RandomQuoteManager.get()&lt;/code&gt; method, via the &lt;code&gt;manager&lt;/code&gt; property, to retrieve the requested quote from the database.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;WebOb.Resoponse&lt;/code&gt; object is created, named &lt;code&gt;response&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The returned &lt;code&gt;quote&lt;/code&gt; dictionary is processed into a JSON string, and the &lt;code&gt;response&lt;/code&gt; object is configured to send the proper &lt;code&gt;Content-Type&lt;/code&gt; header, and the JSON string as the response body.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;response&lt;/code&gt; object is returned.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both of these methods do essentially the same thing - they retrieve a specific quote from the database, identified by its &lt;code&gt;id&lt;/code&gt;. The difference is that one accepts the id as a method parameter, and the other extracts it from the HTTP request.&lt;/p&gt;
&lt;p&gt;You can imagine these simple methods could be easily combined into &lt;em&gt;one&lt;/em&gt; method.&lt;/p&gt;
&lt;p&gt;After all, this is primarily a web application, and there's no specific use case right now for someone using the &lt;code&gt;RandomQuoteManager&lt;/code&gt; directly. ðŸ¤”&lt;/p&gt;
&lt;p&gt;Here's what that might look like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BeginningOfAGiantMessApp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/([^/]+)$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT id, author, quote, created FROM quotes WHERE id=?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),))&lt;/span&gt;

        &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is a bit of a cutup of what would be a new version of the &lt;code&gt;RandomQuoteApp&lt;/code&gt;, named &lt;code&gt;BeginningOfAGiantMessApp&lt;/code&gt; as a tongue-in cheek commentary on how this would be a bad idea. ðŸ˜Ž&lt;/p&gt;
&lt;p&gt;We try to root the example in line with the class declaration and constructor of &lt;code&gt;RandomQuoteApp&lt;/code&gt; in &lt;code&gt;src/random_quote/wsgi.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll need to make a database connection in the WSGI app now, so we had to alter the constructor.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;get()&lt;/code&gt; code itself is just an amalgam of the other two methods.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Combining the two methods is pretty straight forward. However, you can see that even with the very simple functionality in this method, things are getting a bit muddy. As the application grows and changes, it will just get worse.&lt;/p&gt;
&lt;p&gt;Modifying this amalgam is much more risky. We can very easily break the database code fixing a web API issue and vice-versa. It's hard for two developers to work on this part of the code base concurrently without running into conflicts.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;We will learn how to deal with that situation, however unlikely, in &lt;a class="reference external" href="/branching-git-with-pytest-3.rst"&gt;part 3&lt;/a&gt;! ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;But worse, its also harder to &lt;em&gt;test&lt;/em&gt;. This may be one of the biggest advantages to putting thought into separation of concerns, and creating sane API boundaries. When testing the nightmare code above, we have to simulate an HTTP request just to make sure the database works, and we need the database functioning to ensure the HTTP stuff functions. This leads to more complex test fixtures and complex object mocking, and ultimately more fragile test suites.&lt;/p&gt;
&lt;p&gt;When writing software, its best to keep our units as small as possible and loosely coupled, so they can be easily isolated. Then our tests are simple and reliable.&lt;/p&gt;
&lt;p&gt;The core design of this example application takes this to heart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-design"&gt;
&lt;h3&gt;Application Design&lt;/h3&gt;
&lt;p&gt;The application as it stands for this part of the guide incorporates concepts of separation of concerns as explored in the last section:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/application-overview-first-pass.png"/&gt;
&lt;p class="caption"&gt;"Random Quote App" Overview&lt;/p&gt;
&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This diagram picks up where the last left off. It is again a simplified diagram inspired by UML.&lt;/p&gt;
&lt;p&gt;The classes are identified as &lt;span class="underline"&gt;underlined&lt;/span&gt; text. The modules are noted in the green boxes.&lt;/p&gt;
&lt;p&gt;Each public (or relevant) method is listed (methods are suffixed with parenthesis), as is each property.&lt;/p&gt;
&lt;p&gt;Here we see the database connectivity and the HTTP client as actors in the relationships.&lt;/p&gt;
&lt;p&gt;We also add connections between class properties and the classes or functions that provide them.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We take the separation of concerns a step further in the complete application design. We've delegated the construction of database connections to a factory function called &lt;code&gt;connection()&lt;/code&gt; in the &lt;code&gt;util&lt;/code&gt; module. This way there is a &lt;em&gt;single source of truth&lt;/em&gt; for what a database connection looks like, and we aren't duplicating the same connection code in multiple places (the benefit of this will become more apparent later on when we add a new feature that uses the database).&lt;/p&gt;
&lt;p&gt;In the diagram above you can see how the classes depend on each other:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;RandomQuoteApp&lt;/code&gt; creates a &lt;code&gt;RandomQuoteManager&lt;/code&gt; in its constructor, and assigns it to the &lt;code&gt;manager&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RandomQuoteApp&lt;/code&gt; and &lt;code&gt;RandomQuoteManager&lt;/code&gt; both take database configuration (a filename). &lt;code&gt;RandomQuoteManager&lt;/code&gt; uses &lt;code&gt;connection()&lt;/code&gt; to create a connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;connection()&lt;/code&gt; configures the sqlite connection so all classes that use it will know what to expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-model"&gt;
&lt;h3&gt;Data Model&lt;/h3&gt;
&lt;p&gt;The initial database schema is very simple, but uses a somewhat advanced technique to select random quotes.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/er-diagram-first-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;We've got a &lt;code&gt;quotes&lt;/code&gt; table with four main columns:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;id&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is the unique identifier for each quote, and how they will be located. It is a &lt;em&gt;primary key&lt;/em&gt;, and will be automatically filled in with the next-highest value.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;author&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is the person whom the quote is credited to. It is stored as a text field.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;quote&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The actual quote. Also a text field.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;created&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The date the quote was created. This is stored as a text field, since sqlite doesn't have a dedicated date/time field type. We use the &lt;code&gt;datetime()&lt;/code&gt; sqlite function to populate it automatically.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;We then have a special column, &lt;code class="bold"&gt;rand&lt;/code&gt;, that stores a random number. It's generated using the sqlite &lt;code&gt;random()&lt;/code&gt; function if it's not specified. We've added an index on this column so it can be sorted efficiently.&lt;/p&gt;
&lt;p&gt;Here's the SQL command we're using to generate the table (this is locaed in &lt;code&gt;src/random_quote/schema.sql&lt;/code&gt;):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'now'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;quotes_rand&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We use &lt;code&gt;rand&lt;/code&gt; to easily get a random row in the table using a simple query:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;ABS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This is a bit more efficient than the usual &lt;code&gt;ORDER BY random()&lt;/code&gt; approach, and it has an added benefit: we can fix all the random values during tests if we provide the random numbers in python. You can see this in action in &lt;code&gt;src/random_quote/manager.py&lt;/code&gt;, in the &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt; method:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;RAND_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9223372036854775808&lt;/span&gt;
&lt;span class="n"&gt;RAND_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9223372036854775807&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return a random integer between RAND_MIN and RAND_MAX (simulates&lt;/span&gt;
&lt;span class="sd"&gt;        the random() function in sqlite)&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RAND_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RAND_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return a random quote from the database.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="hll"&gt;        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT id, author, quote, created FROM quotes ORDER BY ABS(rand - ?) LIMIT 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;In this example, we've abbreviated the source of &lt;code&gt;RandomQuoteManager&lt;/code&gt; a bit so we can focus just on the parts that are relevant to the &lt;code&gt;random()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;sqlite3 has a &lt;a class="reference external" href="https://www.sqlite.org/lang_corefunc.html#random"&gt;random() function&lt;/a&gt; as well. It returns integer values between &lt;em&gt;-9223372036854775808&lt;/em&gt; and &lt;em&gt;+9223372036854775807&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In our SQL &lt;code&gt;CREATE&lt;/code&gt; statement, we're setting the default value of &lt;code&gt;rand&lt;/code&gt; to &lt;code&gt;random()&lt;/code&gt;. This will invoke the sqlite function if a value isn't specified.&lt;/p&gt;
&lt;p&gt;We emulate that functionality in our python code so we can interfere with the way random numbers are generated. This is not possible if we were to rely on sqlite to do set the value of &lt;code&gt;rand&lt;/code&gt; for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;See the &lt;a class="reference external" href="https://stackoverflow.com/questions/24256258/order-by-random-with-seed-in-sqlite?noredirect=1&amp;amp;lq=1"&gt;ORDER BY random() with seed in SQLITE&lt;/a&gt; on StackOverflow for some discussion about this topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;If you're curious how we might go about fixing the random values, stay tuned, we're going to do that shortly! ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="background-for-the-uninitiated"&gt;
&lt;h2 id="background for the uninitiated"&gt;Background For The Uninitiated&lt;/h2&gt;
&lt;p&gt;This section will briefly discuss the libraries and technology involved, and provide links where you can get more information.&lt;/p&gt;
&lt;div class="section" id="git"&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;p&gt;git is a &lt;em&gt;distributed&lt;/em&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Version_control"&gt;source control management system&lt;/a&gt; (also known as "revision control" or "version control"). It was developed by Linus Torvalds for use in Linux kernel development. See &lt;a class="reference external" href="https://git-scm.com/about"&gt;About - Git&lt;/a&gt; for more information about why git is useful.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://git-scm.com/doc"&gt;documnetation&lt;/a&gt; is very good, but quite dense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="venv"&gt;
&lt;h3&gt;venv&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; is a virtual environment manager for Python. The &lt;a class="reference external" href="https://docs.python.org/3/tutorial/venv.html"&gt;venv tutorial&lt;/a&gt; has all the essential information and usage details.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; superceeds older tools like &lt;a class="reference external" href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;. It's handy because it is now included in the standard library.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;For a nice overview of the virtual enviromnent scene in Python (and to get a sense of why so many are confused by it), &lt;a class="reference external" href="https://stackoverflow.com/a/41573588/11090167"&gt;an answer to a question on Stack Overflow&lt;/a&gt; is about the best I've seen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sqlite3"&gt;
&lt;h3&gt;sqlite3&lt;/h3&gt;
&lt;p&gt;sqlite is a robust, but easy to use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Relational_database"&gt;relational database management system&lt;/a&gt;. sqlite3 is the latest version.&lt;/p&gt;
&lt;p&gt;sqlite provides the concept of &lt;em&gt;tables&lt;/em&gt; containing &lt;em&gt;rows&lt;/em&gt; of structured information.&lt;/p&gt;
&lt;p&gt;As opposed to other RDBMS', like &lt;a class="reference external" href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;, sqlite does not its own server, and cannot be easily shared across machines. Sqlite was chosen for the example project because Python has a &lt;a class="reference external" href="https://docs.python.org/3/library/sqlite3.html"&gt;built-in sqlite3 library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.sqlite.org/index.html"&gt;sqlite webstie&lt;/a&gt; has comprehensive information about how sqlite works and its capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wsgi"&gt;
&lt;h3&gt;WSGI&lt;/h3&gt;
&lt;p&gt;Web applications are typically executed by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Web_server"&gt;web servers&lt;/a&gt;, like &lt;a class="reference external" href="https://www.nginx.com/"&gt;ngnix&lt;/a&gt;, &lt;a class="reference external" href="https://gunicorn.org/"&gt;gunicorn&lt;/a&gt;, or &lt;a class="reference external" href="https://httpd.apache.org/"&gt;apache&lt;/a&gt;. This abstracts away the need for application code to handle things like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Fork_(system_call)"&gt;managing processes&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Berkeley_sockets"&gt;managing sockets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To provide that abstraction, web servers support various kinds of &lt;em&gt;gateway interfaces&lt;/em&gt;. A common and historically relevant one is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Gateway_Interface"&gt;Common Gateway Interface (CGI)&lt;/a&gt;. It essentially calls for the web server to execute a program like a user might on the command line, streams the request on standard in, and reads the response on standard out. Specific environment variables are defined to convey useful information to the program.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Reading &lt;a class="reference external" href="https://tools.ietf.org/html/rfc3875"&gt;RFC3875&lt;/a&gt;, where the CGI specification is defined is highly recommended for any web developer.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;CGI had some rough edges and imposed some limitations that made writing web apps with Python a little more cumbersome. In 2003, &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-333/"&gt;PEP333&lt;/a&gt;  was submitted (and subsequently superseded by &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP3333&lt;/a&gt;), outlining a new way for Python applications to integrate with web servers, that sought to overcome the flaws in CGI.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP3333&lt;/a&gt; lays out the specification in detail. The basics are that a WSGI application is a Python &lt;em&gt;callable&lt;/em&gt; (a function, a class that implements a &lt;code&gt;__call__()&lt;/code&gt; method) that takes a few specific parameters (including a dictionary of gateway information inspired by CGI), and then returns an &lt;em&gt;iterable&lt;/em&gt; object, containing the body of the response.&lt;/p&gt;
&lt;p&gt;We're using &lt;a class="reference external" href="https://docs.pylonsproject.org/projects/webob/en/stable/"&gt;WebOb&lt;/a&gt; to handle most of this for us. In &lt;code&gt;RandomQuoteApp&lt;/code&gt;, we work with &lt;code&gt;webob.Request&lt;/code&gt; objects and return &lt;code&gt;webob.Response&lt;/code&gt; objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="webob"&gt;
&lt;h3&gt;WebOb&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pylonsproject.org/projects/webob/en/stable/"&gt;WebOb&lt;/a&gt; is part of the &lt;a class="reference external" href="https://pylonsproject.org/"&gt;Pylons&lt;/a&gt; and &lt;a class="reference external" href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt; projects. It has a narrow scope, designed to help a web developer make sense of an incoming request, and construct WSGI-compliant responses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest"&gt;
&lt;h3&gt;Pytest&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/"&gt;Pytest&lt;/a&gt; is a newer testing framework for Python. It is simpler than, but compatible with, the built-in &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pytest uses a convention-over-configuration approach. Test suites and test cases are discovered simply by being named a certain way. However, that discovery process is highly configurable. ðŸ˜Ž&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="webtest"&gt;
&lt;h3&gt;WebTest&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pylonsproject.org/projects/webtest/en/latest/"&gt;WebTest&lt;/a&gt;, another &lt;a class="reference external" href="https://pylonsproject.org/"&gt;Pylons&lt;/a&gt; project, provides an easy way to test WSGI applications in a very realistic way, without having to run a fully-functioning web server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-the-tests"&gt;
&lt;h2 id="run the tests"&gt;Run The Tests&lt;/h2&gt;
&lt;p&gt;Now that we have the code, we've initialized our environment, and we understand what we're working on, we can run the tests. This is done with the &lt;code&gt;pytest&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 6 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py ....                               [ 66%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ..                                    [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 6 passed in 0.20 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is one of many ways to have &lt;code&gt;pytest&lt;/code&gt; collect and run tests. We're specifying a directory to search for, instead of a module or a specific file.&lt;/p&gt;
&lt;p&gt;The output above is illustrative of a successful test run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="initialize-the-database-and-add-some-quotes"&gt;
&lt;h2 id="initialize the database and add some quotes"&gt;Initialize The Database And Add Some Quotes&lt;/h2&gt;
&lt;p&gt;We have utility functions, &lt;code&gt;random_quote.util.init()&lt;/code&gt; and &lt;code&gt;random_quote.util.ingest()&lt;/code&gt; to create all the tables we need, and insert some quotes to get the database going.&lt;/p&gt;
&lt;p&gt;For the sake of completeness, we'll also use the &lt;code&gt;RandomQuoteManager&lt;/code&gt; to add a few unique quotes and show how the API works.&lt;/p&gt;
&lt;p&gt;First, lets create a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comma-separated_values"&gt;CSV&lt;/a&gt; file containing some quotes, called &lt;code&gt;quotes.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can do this using your favorite spreadsheet program, a text editor, or (recommended) use the provided &lt;code&gt;generate_quotes.py&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python scripts/generate_quotes.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To initialize the database and mess with the API, lets start a python prompt in our virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python
&lt;span class="go"&gt;Python 3.7.3 (default, Mar 30 2019, 03:37:43)&lt;/span&gt;
&lt;span class="go"&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll put our database in a file named &lt;code&gt;test.db&lt;/code&gt; in the current directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, lets load &lt;code&gt;quotes.csv&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ingest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"quotes.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can use the &lt;code&gt;RandomQuoteManager&lt;/code&gt; to look at what we've loaded:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote.manager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;rqm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;{"id": 1, "quote":"When I get a little money I buy books; and if any is left, I buy food and clothes.", "author":"Erasmus"...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can use it to add a new quote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Something quite quotable"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;1001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;add()&lt;/code&gt; method returns the id of the newly created quote.&lt;/p&gt;
&lt;p&gt;Note that the author is &lt;em&gt;optional&lt;/em&gt;, and defaults to &lt;code&gt;Unknown&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;{'id': 1001, 'author': 'Unknown', 'quote': 'Something quite quotable',...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To exit the console, press &lt;code&gt;ctrl-D&lt;/code&gt;, or run the &lt;code&gt;exit()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-comfortable-with-git-and-pytest"&gt;
&lt;h2 id="getting comfortable with git and pytest"&gt;Getting Comfortable With Git And Pytest&lt;/h2&gt;
&lt;p&gt;As a first step, lets add a new pytest fixture and some test cases. We won't bother doing any branching. This will get us acquainted with how pytest works, and we'll get comfortable with the most basic git commands: &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest-basics"&gt;
&lt;h2 id="pytest basics"&gt;Pytest Basics&lt;/h2&gt;
&lt;p&gt;Pytest uses the concept of  &lt;em&gt;convention over configuration&lt;/em&gt; to provide a lot of flexbility when writing tests. All you need to do is provide a python module that has the &lt;code&gt;test_&lt;/code&gt; prefix, and fill it with functions that also begin with &lt;code&gt;test_&lt;/code&gt;. Pytest will collect these functions and run them for you.&lt;/p&gt;
&lt;p&gt;To make a test fail, pytest utilizes the python built-in &lt;code&gt;assert&lt;/code&gt; keyword. &lt;code&gt;assert&lt;/code&gt; evaluates the given expression, and raises an exception if the expression evaluates to &lt;code&gt;False&lt;/code&gt;. Pytest leverages this to make writing tests straight forward: you are simply making &lt;em&gt;assertions&lt;/em&gt; about the truth of some expression.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;For more details, see &lt;a class="reference external" href="https://docs.pytest.org/en/latest/getting-started.html"&gt;Installation And Getting Started&lt;/a&gt; in the &lt;a class="reference external" href="https://docs.pytest.org/en/latest"&gt;pytest documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's a contrived &lt;em&gt;test suite&lt;/em&gt; (collection of tests) that pytest can run. Save it as &lt;code&gt;test_example.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_phi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Ensure phi isn't 2.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This &lt;em&gt;test suite&lt;/em&gt; consists of a single &lt;em&gt;test case&lt;/em&gt;, named &lt;code&gt;test_phi()&lt;/code&gt;. It has a &lt;em&gt;helper function&lt;/em&gt; named &lt;code&gt;phi()&lt;/code&gt; that generates &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Golden_ratio"&gt;The Golden Ratio&lt;/a&gt;, also known as Ï•.&lt;/p&gt;
&lt;p&gt;This test is non-sensical, simply asserting that Ï• != 2.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As before, we can use &lt;code&gt;pytest&lt;/code&gt; to run our test case, but this time we'll specify the file instead of &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest test_example.py
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 1 item&lt;/span&gt;

&lt;span class="go"&gt;test_example.py .                                                         [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 1 passed in 3.30 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, only the &lt;code&gt;test_phi()&lt;/code&gt; &lt;em&gt;test case&lt;/em&gt; is run directly by &lt;code&gt;pytest&lt;/code&gt;. The &lt;code&gt;phi()&lt;/code&gt; function itself is not.&lt;/p&gt;
&lt;p&gt;To prove this, we can ask &lt;code&gt;pytest&lt;/code&gt; to be more &lt;em&gt;verbose&lt;/em&gt;, using the &lt;code&gt;-v&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest -v test_example.py
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 1 item&lt;/span&gt;

&lt;span class="go"&gt;test_example.py::test_phi PASSED                                          [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 1 passed in 0.01 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next thing you should know is how to write &lt;em&gt;test fixtures&lt;/em&gt;. With pytest, fixtures are just specially &lt;a class="reference external" href="https://realpython.com/primer-on-python-decorators/"&gt;decorated functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what are fixtures for? Fixtures allow us to do some set up work before each test is run, and clean up (or &lt;em&gt;tear down&lt;/em&gt;) after. In our &lt;code&gt;random_quote&lt;/code&gt; application, it's used to create a database and add some data to it. The database is then destroyed after the test.&lt;/p&gt;
&lt;p&gt;Fixtures are decorated with &lt;code&gt;pytest.fixture&lt;/code&gt; . To use them in a test, you take a parameter that has the same name. If you &lt;code&gt;return&lt;/code&gt; a value, it's passed to the test case. If you &lt;code&gt;yield&lt;/code&gt; one, the &lt;code&gt;yield&lt;/code&gt; ed value is passed, and control returns to your fixture to clean up after the test.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;The terms &lt;em&gt;set up&lt;/em&gt; and &lt;em&gt;tear down&lt;/em&gt; are fundamental automated testing terms. In a lot of other testing frameworks, test suites have special functions or methods with names like &lt;code&gt;setUp&lt;/code&gt; and &lt;code&gt;tearDown&lt;/code&gt; that provide the same functionality as pytest's fixtures. ðŸŒˆ&lt;/p&gt;
&lt;p class="last"&gt;What's cool about pytest, is that fixtures serve the same purpose, but are much more robust. You can change the scope of a fixture by providing the &lt;code&gt;scope&lt;/code&gt; keyword argument when decorating a fixture function. &lt;a class="reference external" href="https://docs.pytest.org/en/latest/fixture.html#scope-sharing-a-fixture-instance-across-tests-in-a-class-module-or-session"&gt;More details can be found in the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;More contrived examples will illustrate how fixtures work:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;returned_value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"boo"&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;yielded_value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt;
    &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Goodbye"&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s2"&gt;"baz"&lt;/span&gt;
    &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_phi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Ensure phi isn't 2.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_returned&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returned_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;returned_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"boo"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_yielded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yielded_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;yielded_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"baz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Goodbye"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_no_fixture&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;In this example, we've set up two fixtures to illustrate using &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt;, named &lt;code&gt;yielded_value()&lt;/code&gt; and &lt;code&gt;returned_value()&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;To show that something has changed due to using the &lt;code&gt;yielded_value()&lt;/code&gt; fixture, we set up a global variable, &lt;code&gt;CHANGE_ME&lt;/code&gt;. We use the &lt;code&gt;global&lt;/code&gt; keyword to allow our fixture to change a value outside of its scope.&lt;/p&gt;
&lt;p&gt;The new test suites, &lt;code&gt;test_returned()&lt;/code&gt;, &lt;code&gt;test_yielded()&lt;/code&gt;, and &lt;code&gt;test_no_fixture()&lt;/code&gt; illustrate how fixtures are consumed by test suites.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_yielded()&lt;/code&gt; shows that we can use multiple &lt;code&gt;assert&lt;/code&gt; statements in one test case if we wish.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is not considered &lt;a class="reference external" href="http://programmaticallyspeaking.com/one-assertion-per-test-please.html"&gt;a best practice&lt;/a&gt;, and so it should be used sparingly (more discussion on &lt;a class="reference external" href="https://softwareengineering.stackexchange.com/questions/7823/is-it-ok-to-have-multiple-asserts-in-a-single-unit-test"&gt;the software enginering stack exchange&lt;/a&gt;, but it can be useful to save some typing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When we run the new test cases, we see everything passes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest -v test_example.py
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 4 items&lt;/span&gt;

&lt;span class="go"&gt;test_example.py::test_phi PASSED                                          [ 25%]&lt;/span&gt;
&lt;span class="go"&gt;test_example.py::test_returned PASSED                                     [ 50%]&lt;/span&gt;
&lt;span class="go"&gt;test_example.py::test_yielded PASSED                                      [ 75%]&lt;/span&gt;
&lt;span class="go"&gt;test_example.py::test_no_fixture PASSED                                   [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 4 passed in 0.20 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;For more information about pytest's fixtures, the &lt;a class="reference external" href="https://docs.pytest.org/en/latest/fixture.html"&gt;documentation&lt;/a&gt; explains all the cool things you can do with them. ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, lets look at some practical examples, taken from our &lt;code&gt;random_quote&lt;/code&gt; project.&lt;/p&gt;
&lt;div class="section" id="how-pytest-is-used-in-random-quote"&gt;
&lt;h3&gt;How pytest is used in &lt;code&gt;random_quote&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Here's the current state of &lt;code&gt;src/random_quote/tests/test_manager.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Tests for the RandomQuoteManager class&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Add a single quote.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;id_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"This is a really cool quote"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get a quote by id&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 2'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_remove_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Remove a single quote&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM quotes WHERE id = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

    &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retrieve a list of all quotes in the DB.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 1'&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 2'&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 3'&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 20'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You'll notice that each test case uses a fixture called &lt;code&gt;preconfigured_manager&lt;/code&gt;, but that function isn't defined in the &lt;code&gt;test_manager.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Instead, we take advantage of pytest's use of a special configuration file called &lt;code&gt;conftest.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code&gt;src/random_quote/tests/conftest.py&lt;/code&gt; looks like right now:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webtest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestApp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;filehandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkstemp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"random_quote_"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create a RandomQuoteManager, and initialize the database.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;rqm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAND_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAND_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"INSERT INTO quotes (author, quote, rand) VALUES (?, ?, ?)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Unknown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Generic Quote {i}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;rqm&lt;/span&gt;

    &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create an instance of RandomQuoteApp, with a preconfigured RandomQuoteManager,&lt;/span&gt;
&lt;span class="sd"&gt;    wrapped in a TestApp instance, ready for functional testing.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You'll note that we have three fixtures defined in this file. The first, &lt;code&gt;temp_db()&lt;/code&gt;, creates a temporary file (using the built-in &lt;a class="reference external" href="https://docs.python.org/3/library/tempfile.html"&gt;tempfile&lt;/a&gt; module) to store the sqlite database. After it returns the path to the temporary file, when the fixture finishes, it deletes it. This is a perfect example of situations where fixtures are particularly useful.&lt;/p&gt;
&lt;p&gt;Next, we have &lt;code&gt;preconfigured_manager()&lt;/code&gt;, a fixture that uses the &lt;code&gt;util&lt;/code&gt; module to initialize the database, then plain SQL statements to pre-populate it. After returning the &lt;code&gt;RandomQuoteManager&lt;/code&gt; object, it closes the connection to ensure it's freed before the next test.&lt;/p&gt;
&lt;p&gt;We can see how fixtures can be chained in the same way we use fixtures in test cases, as &lt;code&gt;preconfigured_manager()&lt;/code&gt; takes &lt;code&gt;temp_db&lt;/code&gt; as a parameter. Multiple fixtures can be used as well, by taking multiple parameters, as illustrated by &lt;code&gt;preconfigured_wsgi_app&lt;/code&gt;. Pytest ensures all the cleanup is done in the correct order.&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;preconfigured_wsgi_app&lt;/code&gt; sets up a &lt;code&gt;WebTest.TestApp&lt;/code&gt; instance, wrapping a &lt;code&gt;RandomQuoteApp&lt;/code&gt; instance. We aren't using the return value of &lt;code&gt;preconfigured_manager()&lt;/code&gt; in &lt;code&gt;preconfigured_wsgi_app()&lt;/code&gt;, but we do want the database initialization and data population to be done for us. Even though &lt;code&gt;temp_db&lt;/code&gt; is used by both fixtures, it is only called once, ensuring that the database path used by &lt;code&gt;preconfigured_manager()&lt;/code&gt; is identical to the one used by &lt;code&gt;preconfigured_wsgi_app()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now that we understand the basics of using pytest, lets fill in some missing tests and do our first &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="something-is-missing-writing-our-first-test-and-fixture"&gt;
&lt;h2 id="something is missing! (writing our first test and fixture)"&gt;Something Is Missing! (Writing Our First Test and Fixture)&lt;/h2&gt;
&lt;p&gt;The last developer who worked on this project (yours truly ðŸ˜Ž) has made a pretty big error. We have a good amount of tests, but none of them use the &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt; method. It's a big oversight, given that the whole point of this project is to generate random quotes.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;This is a great reason to look into &lt;em&gt;test coverage analysis&lt;/em&gt;, in particular the &lt;a class="reference external" href="https://coverage.readthedocs.io/en/v4.5.x/"&gt;coverage.py&lt;/a&gt; library.&lt;/p&gt;
&lt;p class="last"&gt;If we were using coverage analysis, we'd have noticed that there was a method that wasn't exercised in the tests.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We shouldn't be too hard on our predecessor, since they were put into a tough spot. Our quotes are inserted and retrieved using python's built-in psuedo-random number generation tools (the &lt;a class="reference external" href="https://docs.python.org/3/library/random.html"&gt;random&lt;/a&gt; module). Every time a function in that module is called (e.g. &lt;code&gt;random.randint()&lt;/code&gt;), it will likely produce a different output.&lt;/p&gt;
&lt;p&gt;That means that if we were to write a test case for the &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt; method, the test case would fail &lt;em&gt;randomly&lt;/em&gt; every time it is run. ðŸ¤”&lt;/p&gt;
&lt;p&gt;Lets see this in action. Here's a test case for &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt;, that you should add to the end of &lt;code&gt;src/random_quote/tests/test_manager.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;58
59
60
61
62
63
64
65&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_random_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retrieve a random quote.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, if we run the tests, we will likely get a failure (if you don't, try running them again):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;==================================== test session starts =====================================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 7 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py ....F                                           [ 71%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ..                                                 [100%]&lt;/span&gt;

&lt;span class="go"&gt;========================================== FAILURES ==========================================&lt;/span&gt;
&lt;span class="go"&gt;_____________________________________ test_random_quote ______________________________________&lt;/span&gt;

&lt;span class="go"&gt;preconfigured_manager = &amp;lt;random_quote.manager.RandomQuoteManager object at 0x10f6e9908&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;    def test_random_quote(preconfigured_manager):&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;
&lt;span class="go"&gt;        Retrieve a random quote.&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;

&lt;span class="go"&gt;        quote = preconfigured_manager.random()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;       assert quote&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="go"&gt;E       assert 10 == 12&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py:65: AssertionError&lt;/span&gt;
&lt;span class="go"&gt;============================= 1 failed, 6 passed in 0.25 seconds =============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how do we fix this? We alluded to "fixing" the randomness of our code earlier. How is this possible?&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;seed()&lt;/code&gt; function in the &lt;code&gt;random&lt;/code&gt; module that &lt;a class="reference external" href="https://docs.python.org/3/library/random.html#random.seed"&gt;re-initializes the random number generator&lt;/a&gt;. It can take a parameter, which is used to provide &lt;em&gt;reproducible&lt;/em&gt; randomness.&lt;/p&gt;
&lt;p&gt;When used, everything will function properly: if you were to call a random function multiple times under normal circumstances and get a different value, you still would. But the values would be (likely) different, and the same values will be returned. This happens &lt;em&gt;every time&lt;/em&gt; that &lt;code&gt;random.seed()&lt;/code&gt; is called with the same value.&lt;/p&gt;
&lt;p&gt;Here's how that works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python
&lt;span class="go"&gt;Python 3.7.3 (default, Mar 30 2019, 03:37:43)&lt;/span&gt;
&lt;span class="go"&gt;[Clang 10.0.0 (clang-1000.11.45.5)] on darwin&lt;/span&gt;
&lt;span class="go"&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;6&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;3&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;7&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ramdom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See how the first call to &lt;code&gt;random.randint(0, 10)&lt;/code&gt; after &lt;code&gt;random.seed(4)&lt;/code&gt; always returns &lt;code&gt;3&lt;/code&gt;? This will be the case across machines. Where the initial call returns &lt;code&gt;6&lt;/code&gt; for me, it will likely return something else for you. However, once we pass a fixed seed, we get reproducible results.&lt;/p&gt;
&lt;p&gt;Lets add a test fixture to the top of &lt;code&gt;src/random_quote/tests/conftest.py&lt;/code&gt; that calls &lt;code&gt;random.seed()&lt;/code&gt; with a fixed value:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_random&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;We don't actually yield a value here. This is totally acceptable, but in the future we may want to return something that the test cases can use, like the value we used for the seed.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After the &lt;code&gt;yield&lt;/code&gt;, we call &lt;code&gt;random.seed()&lt;/code&gt; with no explicit value. That re-seeds the random number generator with the default value, which is the way it normally works (usually it's seeded with the system time).&lt;/p&gt;
&lt;p&gt;In order to use this fixture, we just need to pass &lt;code&gt;fix_random&lt;/code&gt; as a parameter to &lt;code&gt;preconfigured_manager()&lt;/code&gt;. Every test case that uses &lt;code&gt;preconfigured_manager&lt;/code&gt;, or any test cases that use fixtures that use &lt;code&gt;preconfigured_manager&lt;/code&gt;, will have their randomness "fixed" with the same seed.&lt;/p&gt;
&lt;p&gt;Here's the new version of &lt;code&gt;src/random_quote/tests/conftest.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webtest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestApp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_random&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;yield&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;
&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;filehandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkstemp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"random_quote_"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fix_random&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create a RandomQuoteManager, and initialize an in-memory database.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;rqm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAND_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAND_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"INSERT INTO quotes (author, quote, rand) VALUES (?, ?, ?)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Unknown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Generic Quote {i}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;rqm&lt;/span&gt;

    &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create an instance of RandomQuoteApp, with a preconfigured RandomQuoteManager,&lt;/span&gt;
&lt;span class="sd"&gt;    wrapped in a TestApp instance, ready for functional testing.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, running the tests again, we see that the new test case &lt;code&gt;test_random_quote()&lt;/code&gt; passes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 7 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py .....                              [ 71%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ..                                    [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 7 passed in 0.46 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="our-first-git-commit"&gt;
&lt;h2 id="our first git commit"&gt;Our First &lt;code&gt;git commit&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The most basic way to work with &lt;code&gt;git&lt;/code&gt; is to make a clone of a repository, make changes on the default branch, usually called &lt;code&gt;master&lt;/code&gt;, then &lt;code&gt;git commit&lt;/code&gt;, followed by &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While it's not best practice to do this most of the time, it's a little less complicated than a fully-baked branch-based development workflow. So we'll take it easy with this first batch of changes, so we can get acquainted with git.&lt;/p&gt;
&lt;p&gt;First, we need to ask git what has changed. We do this using &lt;code&gt;git status&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch master&lt;/span&gt;
&lt;span class="go"&gt;Your branch is up to date with 'origin/master'.&lt;/span&gt;

&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/tests/conftest.py&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/tests/test_manager.py&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    quotes.csv&lt;/span&gt;
&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;span class="go"&gt;    test_example.py&lt;/span&gt;

&lt;span class="go"&gt;no changes added to commit (use "git add" and/or "git commit -a")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing you'll notice about git, is that is is very &lt;em&gt;helpful&lt;/em&gt; ðŸ˜Ž. It tells us which files have been changed, and what to do if we want to &lt;code&gt;git add&lt;/code&gt; them to our commit, or remove them (&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We also see files that we haven't tracked.&lt;/p&gt;
&lt;p&gt;Finally, git tells us that there are no changes added to the commit, and we can use &lt;code&gt;git commit -a&lt;/code&gt; or &lt;code&gt;git add&lt;/code&gt; to change that.&lt;/p&gt;
&lt;p&gt;Git has the concept of &lt;em&gt;commits&lt;/em&gt;. These are essentially groups of changes (or &lt;em&gt;change sets&lt;/em&gt;). This is why the modifications need to be &lt;em&gt;added&lt;/em&gt; to the commit. As &lt;code&gt;git status&lt;/code&gt; has helpfully stated, we can use &lt;code&gt;git add&lt;/code&gt; to add individual changes (or untracked files), or we can use the &lt;code&gt;-a&lt;/code&gt; flag to &lt;code&gt;git commit&lt;/code&gt; to automatically add any outstanding changes (but leave untracked files alone).&lt;/p&gt;
&lt;p&gt;We don't want to add any of these untracked files, but we do want to add all of the changes, so we'll go ahead and use &lt;code&gt;git commit -a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When this command is executed, git creates a temporary file for us, and will bring up our default editor. Git expects us to provide a &lt;em&gt;commit log message&lt;/em&gt;.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;Usually, the editor is the &lt;a class="reference external" href="https://www.vim.org/"&gt;vim&lt;/a&gt; editor.&lt;/p&gt;
&lt;p class="last"&gt;You can configure this to be nearly any editor you'd like. &lt;a class="reference external" href="https://help.github.com/en/articles/associating-text-editors-with-git"&gt;Here are some examples from github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Our commit messages should be descriptive, but not too long. There's no point in mentioning things that git records in the change set, like which files changed or even which code was altered. Instead, focus on stating &lt;em&gt;why&lt;/em&gt; things changed, and the overall &lt;em&gt;point&lt;/em&gt; of the commit.&lt;/p&gt;
&lt;p&gt;Lets go ahead and execute &lt;code&gt;git commit -a&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git commit -a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's what the content of the file will look like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
# Your branch is up to date with 'origin/master'.
#
# Changes to be committed:
#       modified:   src/random_quote/tests/conftest.py
#       modified:   src/random_quote/tests/test_manager.py
#
# Untracked files:
#       quotes.csv
#       test.db
#       test_example.py
#
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Again, we can see that git is quite helpful ðŸ˜€. Let's add the following to that file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Added tests for randomness.

Created a new test fixture that makes random tests reproducible.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Save, and exit.&lt;/p&gt;
&lt;p&gt;In a git commit message, the first line should be short and give an overview of what was done. The following lines, if any, can provide more detail. We do this chiefly because most git tools only show a truncated version of that first line.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;There is a lot of opinion and different practices revolving around git commit log messages. We've only scratched the surface of what makes a great message, and further, what makes a great &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;p class="last"&gt;I like the &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages"&gt;git log standard&lt;/a&gt; used by the &lt;a class="reference external" href="https://www.openstack.org/"&gt;OpenStack project&lt;/a&gt;. Even if you weren't to adopt it verbatim, it's a great outline of things you need to think about when collaborating on a software project. ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, looking at &lt;code&gt;git log&lt;/code&gt;, we can get a sense of what's been going on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log
&lt;span class="go"&gt;commit f007799b3fa0e45c2ff475930021c0dcea1c63c0 (HEAD -&amp;gt; master)&lt;/span&gt;
&lt;span class="go"&gt;Author: Josh Johnson &amp;lt;jjmojojjmojo@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Sun Jun 9 17:45:53 2019 -0400&lt;/span&gt;

&lt;span class="go"&gt;    Added tests for randomness.&lt;/span&gt;

&lt;span class="go"&gt;    Created a new test fixture that makes random tests reproducible.&lt;/span&gt;

&lt;span class="go"&gt;commit c670c79823aa7c1c10add696795ee0f880d77b98 (origin/master, origin/HEAD)&lt;/span&gt;
&lt;span class="go"&gt;Author: Josh Johnson &amp;lt;jjmojojjmojo@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Dat...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Log entries are listed from newest to oldest.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;On most systems, the output from &lt;code&gt;git log&lt;/code&gt; is run through a &lt;em&gt;pager&lt;/em&gt;, an application that lets you scroll through a program's output in a user-friendly way.&lt;/p&gt;
&lt;p class="last"&gt;On my system, the pager is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Less_(Unix)"&gt;less&lt;/a&gt;. You can quit &lt;code&gt;less&lt;/code&gt; (or a similar but older tool called &lt;code&gt;more&lt;/code&gt;), by typing "q", or control-C.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; has a few common command-line switches that can make reading the log a little less verbose.&lt;/p&gt;
&lt;p&gt;Of particular use, is the &lt;code&gt;--pretty&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline
&lt;span class="go"&gt;f007799b3fa0e45c2ff475930021c0dcea1c63c0 (HEAD -&amp;gt; master) Added tests for randomness.&lt;/span&gt;
&lt;span class="go"&gt;c670c79823aa7c1c10add696795ee0f880d77b98 (origin/master, origin/HEAD) Added in an import that was accidentally removed&lt;/span&gt;
&lt;span class="go"&gt;032f770e0300a61989fa40dc971e5a24a43928bb Added a helper script to make re-cloning easier for me while I edit the blog post&lt;/span&gt;
&lt;span class="go"&gt;22cd1c3266a29e5ed340beaebe75aa398012341c Minor bug fix, removed initial tests that the user of the guide will get to write&lt;/span&gt;
&lt;span class="go"&gt;685149f3f3817f0f05e10b50c8442961f1b7d034 Minor modifications after working through the blog post; Also added quote generation tool&lt;/span&gt;
&lt;span class="go"&gt;fdde2d208e7d4920ba50fa7e9a3148d9f9b632e6 Finished WSGI application&lt;/span&gt;
&lt;span class="go"&gt;71aae3f22ff75164bb53c264470bcbf270108ff1 Finished basic manager functionality and tests&lt;/span&gt;
&lt;span class="go"&gt;05710c963f86869741b2e5c7d5ab2a2760ac0b1e Got init() and ingress() utility functions working. Updated README.&lt;/span&gt;
&lt;span class="go"&gt;7dc344ad654f7dcbe9b59ccb28ff432c1eb3a936 Function and method stubs laid out, fixed gitignore&lt;/span&gt;
&lt;span class="go"&gt;ea81a8a227518baf0ac114ceef4e7c77d02c37ec Initial commit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try other valid options for &lt;code&gt;--pretty&lt;/code&gt;, like &lt;code&gt;short&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another useful command line option for &lt;code&gt;git log&lt;/code&gt; is &lt;code&gt;-n[?]&lt;/code&gt; - you can pass any number to limit the log output to just that many entries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline -n1
&lt;span class="go"&gt;f007799b3fa0e45c2ff475930021c0dcea1c63c0 (HEAD -&amp;gt; master) Added tests for randomness.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;For more details, see &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History"&gt;Git Basics - Viewing the Commit History&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="one-last-thing-web-api-test"&gt;
&lt;h2 id="one last thing! (web api test)"&gt;One last thing! (Web API Test)&lt;/h2&gt;
&lt;p&gt;Before we move on, we need to add one more test. We have a test for the &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt; method, but we haven't added a corresponding test for the WSGI application, &lt;code&gt;RandomQuoteApp&lt;/code&gt;.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Test coverage analysis would have caught this too! ðŸŒˆ&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's our test. Add it to the bottom of &lt;code&gt;src/random_quote/tests/test_wsgi.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;47
48
49
50
51
52
53
54
55
56
57&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_random_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make a GET request for a single random quote&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/random"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'200 OK'&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Note that we are receiving the &lt;em&gt;same&lt;/em&gt; quote that we got in &lt;code&gt;test_random_quote()&lt;/code&gt; from &lt;code&gt;test_manager.py&lt;/code&gt;. The random seed is working!&lt;/p&gt;
&lt;p&gt;We can run the tests again and see that the new test got picked up, and ran successfully. To be extra-sure, lets use the &lt;code&gt;-v&lt;/code&gt; flag to &lt;code&gt;pytest&lt;/code&gt;, it will give us more detail about what tests were run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest -v src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 8 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_add_quote PASSED             [ 12%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_get_quote PASSED             [ 25%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_remove_quote PASSED          [ 37%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_all PASSED                   [ 50%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_random_quote PASSED          [ 62%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote PASSED                [ 75%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_all_quotes PASSED               [ 87%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_random_quote PASSED             [100%]&lt;/span&gt;
&lt;span class="hll"&gt;
&lt;/span&gt;&lt;span class="go"&gt;=========================== 8 passed in 0.36 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets &lt;code&gt;git commit&lt;/code&gt; our new test. We'll use the &lt;code&gt;-m&lt;/code&gt; flag this time. This way, we can specify our commit log message on the command line, surrounded by double quotes (&lt;code&gt;"&lt;/code&gt;). It's really handy for small changes like this.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Be careful of &lt;a class="reference external" href="https://www.oreilly.com/library/view/learning-the-bash/1565923472/ch01s09.html"&gt;special shell characters&lt;/a&gt;, in messages you pass to the &lt;code&gt;-m&lt;/code&gt; switch. If you have to use one, prefix it with a backslash (\).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;First, lets check &lt;code&gt;git status&lt;/code&gt; to make sure we know what we're committing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch master&lt;/span&gt;
&lt;span class="go"&gt;Your branch is ahead of 'origin/master' by 1 commit.&lt;/span&gt;
&lt;span class="go"&gt;  (use "git push" to publish your local commits)&lt;/span&gt;

&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/tests/test_wsgi.py&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    quotes.csv&lt;/span&gt;
&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;span class="go"&gt;    test_example.py&lt;/span&gt;

&lt;span class="go"&gt;no changes added to commit (use "git add" and/or "git commit -a")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that now, &lt;code&gt;git status&lt;/code&gt; tells us that we are "ahead of 'orign/master' by 1 commit". That's letting us know we have commits that haven't been sent to the master (or &lt;code&gt;git push&lt;/code&gt;) since we made our clone.&lt;/p&gt;
&lt;p&gt;Ok, so we know what's going to be committed, lets do the commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git commit -a -m&lt;span class="s2"&gt;"Added web API test for a random quote"&lt;/span&gt;
&lt;span class="go"&gt;[master a110267] Added web API test for a random quote&lt;/span&gt;
&lt;span class="go"&gt; 1 file changed, 11 insertions(+)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-publish-our-changes-git-push"&gt;
&lt;h2 id="let's publish our changes (git push)"&gt;Let's Publish Our Changes (&lt;code&gt;git push&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Git is &lt;em&gt;decentralized&lt;/em&gt;. There is a place where you got your copy of the code, this is referred to as a &lt;em&gt;remote&lt;/em&gt;. Each clone, or &lt;em&gt;working copy&lt;/em&gt; of the repository contains all of the changes since the repository was created. We work on our clone of the repository and can view and manipulate any change ever made. We work independently, in perpetuity.&lt;/p&gt;
&lt;p&gt;In order for someone else to use those changes, we need to use send our commits to the remote. This is done via &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The default name for the default remote is &lt;code&gt;origin&lt;/code&gt;. It's not necessary to specify it to &lt;code&gt;git push&lt;/code&gt;, but it's a good habit to get into.&lt;/p&gt;
&lt;p&gt;Lets push our changes to the &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git push origin master
&lt;span class="go"&gt;Enumerating objects: 20, done.&lt;/span&gt;
&lt;span class="go"&gt;Counting objects: 100% (20/20), done.&lt;/span&gt;
&lt;span class="go"&gt;Delta compression using up to 8 threads&lt;/span&gt;
&lt;span class="go"&gt;Compressing objects: 100% (11/11), done.&lt;/span&gt;
&lt;span class="go"&gt;Writing objects: 100% (13/13), 1.19 KiB | 1.19 MiB/s, done.&lt;/span&gt;
&lt;span class="go"&gt;Total 13 (delta 8), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt;To [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt;   c670c79..a110267  master -&amp;gt; master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we did this, anyone else who cloned our repository would not be able to see the commits we made. Now that we have, they can run &lt;code&gt;git fetch&lt;/code&gt; or &lt;code&gt;git pull&lt;/code&gt; and retrieve the commits we made.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;We will be exploring multi-user scenarios &lt;a class="reference external" href="/branching-git-with-pytest-3.html"&gt;a bit later&lt;/a&gt;! ðŸŒˆ&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-what-s-next"&gt;
&lt;h2 id="conclusion/what's next"&gt;Conclusion/What's Next&lt;/h2&gt;
&lt;p&gt;In this installment, we covered the basics of doing work with pytest and git.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt;, we'll dig into how branching works by fixing a bug.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="git"></category><category term="branching"></category><category term="development process"></category></entry></feed>