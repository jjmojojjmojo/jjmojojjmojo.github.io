<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>The Collected Works of jjmojojjmojo - jjmojojjmojo</title><link>/</link><description></description><lastBuildDate>Mon, 21 Sep 2020 10:54:00 -0400</lastBuildDate><item><title>Time-Based NeoPixel Fading In Circuitpython With FancyLED</title><link>/time-based-fading.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;img alt="" class="align-right" src="/images/time-based-fading/banner.gif" style="width: 10em;"/&gt;
&lt;p&gt;Fading makes LEDs look really cool. It's a less abrupt way of transitioning from off to on, or from one color to the next. Even with Neopixels built-in drivers it can still be daunting, and a source of slowdowns in your code. In this tutorial, we'll explore the considerations for fading, walk through a few different approaches, and present a final approach that works especially well with CircuitPython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Mon, 21 Sep 2020 10:54:00 -0400</pubDate><guid isPermaLink="false">tag:None,2020-09-21:/time-based-fading.html</guid><category>tutorial</category><category>circuitpython</category><category>python</category><category>hardware</category><category>state</category></item><item><title>Branching With Git And Testing With Pytest: A Comprehensive Guide: Part 3</title><link>/branching-git-with-pytest-3.html</link><description>&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part three of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Simulate collaborative work by two developers.&lt;/li&gt;
&lt;li&gt;Use the workflow we learned in &lt;a class="reference external" href="/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt; to add a new feature, and fix a new bug.&lt;/li&gt;
&lt;li&gt;Create a merge conflict and resolve it.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Wed, 03 Jul 2019 09:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2019-07-03:/branching-git-with-pytest-3.html</guid><category>tutorial</category><category>python</category><category>git</category><category>branching</category><category>development process</category></item><item><title>Branching With Git And Testing With Pytest: A Comprehensive Guide: Part 2</title><link>/branching-git-with-pytest-2.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;&lt;strong&gt;This is part two of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identify and fix a bug on a branch.&lt;/li&gt;
&lt;li&gt;Build a new feature, also on a branch.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git rebase&lt;/code&gt; to keep our change history tidy.&lt;/li&gt;
&lt;li&gt;Use tagging to mark new versions of our application.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Fri, 28 Jun 2019 09:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2019-06-28:/branching-git-with-pytest-2.html</guid><category>tutorial</category><category>python</category><category>git</category><category>branching</category><category>development process</category></item><item><title>Branching With Git And Testing With Pytest: A Comprehensive Guide</title><link>/branching-git-with-pytest.html</link><description>&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part one of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk a bit about the design of the example application.&lt;/li&gt;
&lt;li&gt;Ensure we are set up for development.&lt;/li&gt;
&lt;li&gt;Exercise the basics of pytest, and git by writing some tests, adding a fixture, and committing our changes.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Wed, 19 Jun 2019 09:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2019-06-19:/branching-git-with-pytest.html</guid><category>tutorial</category><category>python</category><category>git</category><category>branching</category><category>development process</category></item><item><title>Advice For New Programmers</title><link>/advice-for-new-programmers.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;I am a proud &lt;strong&gt;autodidact&lt;/strong&gt;. That means I am &lt;em&gt;entirely&lt;/em&gt; self taught. ü§î üéì ‚ù§Ô∏è People like myself are not uncommon in the tech industry, but we have always been in the minority. Autodidacts represent &lt;em&gt;industry outsiders&lt;/em&gt;, because we've diverged from the typical learning path: a degree at a four-year college. With the advent of "let's code" initiatives, coding boot camps, better programming curriculum at 2-year colleges, and easier self-lead study, the number and varieties of outsiders is growing every day. We need to stick together.&lt;/p&gt;
&lt;p&gt;We are a constant stream of new programmers, often without any sort of support system to help us along after we complete our training. Getting into this industry can be scary. So, for my fellow outsiders, I've put together some thoughts that will help you thrive and excel. I've based this on on what helped me, and my personal observations over the years.&lt;/p&gt;
&lt;p&gt;However, I've realized that the difficulty of getting established is real, even for people with a typical education. There's a sort of &lt;em&gt;innocence&lt;/em&gt; that is impressed onto new graduates, and there aren't a lot of resources for them either. So college grads, this is for you too.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Sat, 29 Sep 2018 15:07:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-09-29:/advice-for-new-programmers.html</guid><category>musings</category><category>advice</category><category>programming</category></item><item><title>The Johnson Pyramid Of Programmer Greatness</title><link>/johnson-pyramid-of-programmer-greatness.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;img alt="" class="align-right" src="/images/johnson-pyramid-of-programmer-greatness/fullcolor-new.png" style="width: 20%;"/&gt;
&lt;p&gt;A few years ago, inspired by the TV sitcom &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Parks_and_Recreation"&gt;Parks and Recreation&lt;/a&gt;, I fired up Adobe Illustrator and put together an infographic that highlights my personal philosophy about what makes a great software engineer, &lt;em&gt;The Johnson Pyramid Of Programmer Greatness&lt;/em&gt;. This is the latest version.&lt;/p&gt;
&lt;p&gt;In this post, I'll talk a bit in depth about how it came about, and what it all means.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Mon, 10 Sep 2018 09:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-09-10:/johnson-pyramid-of-programmer-greatness.html</guid><category>graphics</category><category>culture</category><category>humor</category><category>classics</category></item><item><title>State And Events In CircuitPython: Part 3: State And Microcontrollers And Events (Oh My!)</title><link>/circuitpython-state-part-3.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;In this part of the series, we'll apply what we've learned about state to our simple &lt;a class="reference external" href="/circuitpython-state-part-1.html#testing"&gt;testing code from part one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only will we debounce some buttons &lt;em&gt;without blocking&lt;/em&gt;, we'll use state to more efficiently control some LEDs.&lt;/p&gt;
&lt;p&gt;We'll also explore what happens when state changes, and how we can take advantage of that to do even more complex things with very little code, using the magic of &lt;em&gt;event detection&lt;/em&gt; üåà .&lt;/p&gt;
&lt;p&gt;All of this will be done in an object-oriented fashion, so we'll learn a lot about OOP as we go along.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Sat, 01 Sep 2018 15:07:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-09-01:/circuitpython-state-part-3.html</guid><category>tutorial</category><category>circuitpython</category><category>python</category><category>hardware</category><category>state</category></item><item><title>State And Events In CircuitPython: Part 2: Exploring State And Debouncing The World</title><link>/circuitpython-state-part-2.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;In this part of the series, we're going to really dig into what &lt;em&gt;state&lt;/em&gt; actually is. We'll use analogies from real life, and then look at how we might model real-life state using Python data structures.&lt;/p&gt;
&lt;p&gt;But first, we'll discuss a common problem that all budding electronics engineers have to deal with at some point: "noisy" buttons and how to make them "un-noisy", commonly referred to as "debouncing".&lt;/p&gt;
&lt;p&gt;We'll talk about fixing the problem in the worst, but maybe easiest way: by &lt;em&gt;blocking&lt;/em&gt;. We'll also talk about why it's bad.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Sat, 01 Sep 2018 10:07:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-09-01:/circuitpython-state-part-2.html</guid><category>tutorial</category><category>circuitpython</category><category>python</category><category>hardware</category><category>state</category></item><item><title>State And Events In CircuitPython: Part 1: Setup</title><link>/circuitpython-state-part-1.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;This is the first article in a series that explores concepts of &lt;em&gt;state&lt;/em&gt; in CircuitPython.&lt;/p&gt;
&lt;p&gt;In this installment, we discuss the platform we're using (both CircuitPython and the Adafruit M0/M4 boards that support it), and build a simple circuit for demonstration purposes. We'll also talk a bit about &lt;em&gt;abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This series is intended for people who are new to Python, programming, and/or microcontrollers, so there's an effort to explain things as thoroughly as possible. However, experience with basic Python would be helpful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Mon, 27 Aug 2018 13:01:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-08-27:/circuitpython-state-part-1.html</guid><category>tutorial</category><category>circuitpython</category><category>python</category><category>hardware</category><category>state</category></item><item><title>Advanced Boot Scripting</title><link>/advanced-boot-scripting.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;&lt;a class="reference external" href="/boot-getting-started-with-clojure-in-10-minutes.html"&gt;As covered in a previous post&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/boot-clj/boot"&gt;boot&lt;/a&gt; is an all-around useful tool
for building clojure applications, but one feature in particular has
proven a &lt;em&gt;adjuncti finalum&lt;/em&gt; &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[*]&lt;/a&gt; : boot lets you do &lt;a class="reference external" href="https://github.com/boot-clj/boot/wiki/Scripts"&gt;clojure scripting&lt;/a&gt;. This
elevates clojure to the same high productivity of scripting languages
(like my personal favorite, Python), but bakes in dependency management
and other goodies. This allows the user to build complexity iteratively,
in a straight-forward manner (verses generating a bunch of boiler plate
project code and building a package). This article explores boot
scripting further, illustrating how boot can be used to quickly and
easily develop and distribute applications and tools. There's also
discussion about getting your jars into
&lt;a class="reference external" href="http://clojars.org"&gt;Clojars&lt;/a&gt;, and setting up a simple bare-minimum
&lt;a class="reference external" href="http://maven.apache.org/index.html"&gt;Maven&lt;/a&gt; repository.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Wed, 08 Aug 2018 13:34:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-08-08:/advanced-boot-scripting.html</guid><category>tutorial</category><category>clojure</category><category>boot</category><category>classics</category></item><item><title>Boot: Getting Started With Clojure In &lt; 10 Minutes</title><link>/boot-getting-started-with-clojure-in-10-minutes.html</link><description>&lt;p&gt;With the power of &lt;a class="reference external" href="http://boot-clj.com/"&gt;boot&lt;/a&gt;, it's possible to go from "never used java before" to budding &lt;a class="reference external" href="http://clojure.org/"&gt;Clojure&lt;/a&gt;-ist cranking out jars like a pickle factory in record time. This post walks you through the process, and provides some post-'hello world' examples, with pointers to more information.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Wed, 01 Aug 2018 11:41:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-08-01:/boot-getting-started-with-clojure-in-10-minutes.html</guid><category>tutorial</category><category>boot</category><category>clojure</category><category>classics</category></item></channel></rss>