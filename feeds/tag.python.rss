<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>The Collected Works of jjmojojjmojo - python</title><link>/</link><description></description><lastBuildDate>Wed, 19 Jun 2019 09:00:00 -0400</lastBuildDate><item><title>Branching With Git And Testing With Pytest: A Comprehensive Guide</title><link>/branching-git-with-pytest.html</link><description>&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part one of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk a bit about the design of the example application.&lt;/li&gt;
&lt;li&gt;Ensure we are set up for development.&lt;/li&gt;
&lt;li&gt;Exercise the basics of pytest, and git by writing some tests, adding a fixture, and committing our changes.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Wed, 19 Jun 2019 09:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2019-06-19:/branching-git-with-pytest.html</guid><category>python</category><category>git</category><category>branching</category><category>development process</category></item><item><title>State And Events In CircuitPython: Part 3: State And Microcontrollers And Events (Oh My!)</title><link>/circuitpython-state-part-3.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;In this part of the series, we'll apply what we've learned about state to our simple &lt;a class="reference external" href="/circuitpython-state-part-1.html#testing"&gt;testing code from part one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only will we debounce some buttons &lt;em&gt;without blocking&lt;/em&gt;, we'll use state to more efficiently control some LEDs.&lt;/p&gt;
&lt;p&gt;We'll also explore what happens when state changes, and how we can take advantage of that to do even more complex things with very little code, using the magic of &lt;em&gt;event detection&lt;/em&gt; ðŸŒˆ .&lt;/p&gt;
&lt;p&gt;All of this will be done in an object-oriented fashion, so we'll learn a lot about OOP as we go along.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Sat, 01 Sep 2018 15:07:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-09-01:/circuitpython-state-part-3.html</guid><category>circuitpython</category><category>python</category><category>hardware</category><category>state</category></item><item><title>State And Events In CircuitPython: Part 2: Exploring State And Debouncing The World</title><link>/circuitpython-state-part-2.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;In this part of the series, we're going to really dig into what &lt;em&gt;state&lt;/em&gt; actually is. We'll use analogies from real life, and then look at how we might model real-life state using Python data structures.&lt;/p&gt;
&lt;p&gt;But first, we'll discuss a common problem that all budding electronics engineers have to deal with at some point: "noisy" buttons and how to make them "un-noisy", commonly referred to as "debouncing".&lt;/p&gt;
&lt;p&gt;We'll talk about fixing the problem in the worst, but maybe easiest way: by &lt;em&gt;blocking&lt;/em&gt;. We'll also talk about why it's bad.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Sat, 01 Sep 2018 10:07:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-09-01:/circuitpython-state-part-2.html</guid><category>circuitpython</category><category>python</category><category>hardware</category><category>state</category></item><item><title>State And Events In CircuitPython: Part 1: Setup</title><link>/circuitpython-state-part-1.html</link><description>&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;This is the first article in a series that explores concepts of &lt;em&gt;state&lt;/em&gt; in CircuitPython.&lt;/p&gt;
&lt;p&gt;In this installment, we discuss the platform we're using (both CircuitPython and the Adafruit M0/M4 boards that support it), and build a simple circuit for demonstration purposes. We'll also talk a bit about &lt;em&gt;abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This series is intended for people who are new to Python, programming, and/or microcontrollers, so there's an effort to explain things as thoroughly as possible. However, experience with basic Python would be helpful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">jjmojojjmojo</dc:creator><pubDate>Mon, 27 Aug 2018 13:01:00 -0400</pubDate><guid isPermaLink="false">tag:None,2018-08-27:/circuitpython-state-part-1.html</guid><category>circuitpython</category><category>python</category><category>hardware</category><category>state</category></item></channel></rss>