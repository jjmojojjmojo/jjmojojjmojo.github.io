<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Collected Works of jjmojojjmojo - circuitpython</title><link href="/" rel="alternate"></link><link href="/feeds/tag.circuitpython.atom" rel="self"></link><id>/</id><updated>2018-09-01T15:07:00-04:00</updated><entry><title>State And Events In CircuitPython: Part 3: State And Microcontrollers And Events (Oh My!)</title><link href="/circuitpython-state-part-3.html" rel="alternate"></link><published>2018-09-01T15:07:00-04:00</published><updated>2018-09-01T15:07:00-04:00</updated><author><name>jjmojojjmojo</name></author><id>tag:None,2018-09-01:/circuitpython-state-part-3.html</id><summary type="html">&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;In this part of the series, we'll apply what we've learned about state to our simple &lt;a class="reference external" href="/circuitpython-state-part-1.html#testing"&gt;testing code from part one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only will we debounce some buttons &lt;em&gt;without blocking&lt;/em&gt;, we'll use state to more efficiently control some LEDs.&lt;/p&gt;
&lt;p&gt;We'll also explore what happens when state changes, and how we can take advantage of that to do even more complex things with very little code, using the magic of &lt;em&gt;event detection&lt;/em&gt; ðŸŒˆ .&lt;/p&gt;
&lt;p&gt;All of this will be done in an object-oriented fashion, so we'll learn a lot about OOP as we go along.&lt;/p&gt;
</summary><content type="html">&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;In this part of the series, we'll apply what we've learned about state to our simple &lt;a class="reference external" href="/circuitpython-state-part-1.html#testing"&gt;testing code from part one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only will we debounce some buttons &lt;em&gt;without blocking&lt;/em&gt;, we'll use state to more efficiently control some LEDs.&lt;/p&gt;
&lt;p&gt;We'll also explore what happens when state changes, and how we can take advantage of that to do even more complex things with very little code, using the magic of &lt;em&gt;event detection&lt;/em&gt; ðŸŒˆ .&lt;/p&gt;
&lt;p&gt;All of this will be done in an object-oriented fashion, so we'll learn a lot about OOP as we go along.&lt;/p&gt;

&lt;div class="section" id="revisiting-old-friends"&gt;
&lt;h2 id="revisiting old friends"&gt;Revisiting Old Friends&lt;/h2&gt;
&lt;p&gt;Lets start by applying state tracking to our &lt;a class="reference external" href="/circuitpython-state-part-1.html#testing"&gt;testing  code&lt;/a&gt; from the first part of this series.&lt;/p&gt;
&lt;p&gt;For reference, here's one of the example circuits, using the Trinket M0 (see &lt;a class="reference external" href="/circuitpython-state-part-1.html#the-demo-circuit"&gt;the demo circuit section in part 1&lt;/a&gt; for references using other boards):&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-trinket-demo-circuit.png" style="width: 80%;"/&gt;
&lt;p&gt;We have two buttons, and two LEDs - one is the standard red LED on pin 13, the other is a built-in RGB LED, either a NeoPixel or DotStar.&lt;/p&gt;
&lt;p&gt;Recall that to test our board, we set up a simple project that has the following functionality:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;While button "A" is pressed, the built-in red LED lights up.&lt;/li&gt;
&lt;li&gt;While button "B" is pressed, the built-in NeoPixel or DotStar lights up, in white.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll extend this a little bit and:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Every time button "B" is pressed, the built-in RGB LED (NeoPixel or DotStar) will light up in a &lt;em&gt;different color&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can improve upon the code by building on the concepts of &lt;em&gt;state&lt;/em&gt; we learned about in the &lt;a class="reference external" href="/circuitpython-state-2.rst"&gt;previous post&lt;/a&gt;. We'll see that we can also use the same concepts to remove the blocking code, and add our new feature in an elegant way. ðŸ¦„&lt;/p&gt;
&lt;p&gt;Lets start by refactoring our original code to work just as it did, but using state.&lt;/p&gt;
&lt;p&gt;Here are the global state attributes we will need to track:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the value of button "A"&lt;/li&gt;
&lt;li&gt;the value of button "B"&lt;/li&gt;
&lt;li&gt;should the LED be on or off?&lt;/li&gt;
&lt;li&gt;should the RGB LED be on or off?&lt;/li&gt;
&lt;li&gt;what color should the RGB LED be?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since this is a first pass, let's start by simply using multiple variables to hold various state values.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Remember this code is assuming you have created a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file as explained &lt;a class="reference external" href="/circuitpython-state-part-1.html#abstractions-keeping-the-code-simple"&gt;part 1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;

&lt;span class="c1"&gt;# review of what the setup module does for us:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#   - led is our digital pin object connected to pin 13&lt;/span&gt;
&lt;span class="c1"&gt;#   - rgb is our DotStar or NeoPixel&lt;/span&gt;
&lt;span class="c1"&gt;#   - check() is a function that handles differences between button wiring&lt;/span&gt;

&lt;span class="c1"&gt;# these state variables need specific names&lt;/span&gt;
&lt;span class="n"&gt;led_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;button_a_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;button_b_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;rgb_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;rgb_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;button_a_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;button_b_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;button_a_state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;led_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;led_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;button_b_state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led_state&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rgb_state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rgb_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Line 1 and 2&lt;/strong&gt; are our standard imports.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 11-15&lt;/strong&gt; is where we define each of our state variables, and set their default state. Note that we had to use some inelegant names because we already have some objects that might conflict.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 17-38&lt;/strong&gt; is our main loop.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 18 and 19&lt;/strong&gt; read the button pins and update the button state variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 21-19&lt;/strong&gt; update the LED and RGB pixel state variables based on the state of the buttons.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 33-36&lt;/strong&gt; uses the state variables to affect the real world, by turning on or off the LED and RGB pixel.&lt;/p&gt;
&lt;p&gt;Finally, on &lt;strong&gt;line 38&lt;/strong&gt;, we sleep for 0.2 seconds to debounce the buttons.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="managing-state-a-three-phase-process"&gt;
&lt;h2 id="managing state: a three-phase process"&gt;Managing State: A Three-Phase Process&lt;/h2&gt;
&lt;p&gt;Before we go much further, lets draw an important distinction. Unlike a physical scoreboard at a baseball stadium, which acts as part of the experience of watching the game, our state merely &lt;em&gt;reflects&lt;/em&gt; our reality.&lt;/p&gt;
&lt;p&gt;The way we work with state is to alter it either &lt;em&gt;because&lt;/em&gt; something happened (say, a button was pressed, much like scoring a point in a game), or to &lt;em&gt;cause&lt;/em&gt; something to happen (this is different; like lighting up an LED, or changing a NeoPixel's color).&lt;/p&gt;
&lt;p&gt;After some thought and experimentation, I've settled on a three-phase process for handling state in a microcontroller project.&lt;/p&gt;
&lt;p&gt;Before we start (maybe this is phase 0, or -1? ðŸ¤” ), we establish the &lt;em&gt;default&lt;/em&gt; state. This is how we want things to look when the development board boots up. So buttons would be in the "unpressed" state (&lt;tt class="docutils literal"&gt;False&lt;/tt&gt;), an LED might be initially "off", and so on. In the example code, we do this on &lt;strong&gt;lines 11-15&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Then, in the first phase, real life is &lt;em&gt;assessed&lt;/em&gt; (checked, or read) - input pins are read, sensors are queried. The state objects are updated to reflect what was observed in real life. This is where we detect that a button has been pressed. In our code above, this is happening on &lt;strong&gt;line 18 and 19&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The second phase is strictly internal - no interactions with real life will happen. In this phase we &lt;em&gt;reconsider&lt;/em&gt; the state. Did we read something in the first phase that indicates we need to take some sort of action? Is there cleanup or accounting that has to happen? This is where we would do that in our code. Most of the time, it means we'll be getting ready for the next phase, implementing logic like "if button A has been pressed, then the LED must be turned on". But instead of turning the LED on, we're just updating the LED's state object.&lt;/p&gt;
&lt;p&gt;In the example above, this phase is happening on &lt;strong&gt;lines 21 thru 29&lt;/strong&gt;. We look at the values stored in &lt;tt class="docutils literal"&gt;button_a_state&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;button_b_state&lt;/tt&gt; and change the state variables for our LEDs, &lt;tt class="docutils literal"&gt;led_state&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;rgb_state&lt;/tt&gt; accordingly.&lt;/p&gt;
&lt;p&gt;The final pass &lt;em&gt;reconciles&lt;/em&gt; the state object with reality. Our code looks at the state variables, and then causes any additional &lt;em&gt;side effects&lt;/em&gt;. This is where we'll actually turn on the LEDs. In the example, this happens on &lt;strong&gt;line 33-38&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;In this case, and for our purposes, the side effects usually affect the physical state of our project (the LED lights up). But in programming, side effects can be anything, and usually affect other parts of our code or our data.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;At that point we hit the end of the &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; loop, and start over again.&lt;/p&gt;
&lt;p&gt;Here's a diagram showing how it works:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-state-flowchart.png" style="width: 80%;"/&gt;
&lt;p&gt;For our simple example, we could shortcut some of these steps. An obvious shortcut would be to directly set the value of the red LED to that of the "A" button: &lt;tt class="docutils literal"&gt;led.value = &lt;span class="pre"&gt;check("A")&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But it's important to keep the phases separate when we can. The phases represent logical ways to group code, and as we get more sophisticated, the separation will come in handy.&lt;/p&gt;
&lt;p&gt;Further, the phases are separated in terms of interacting with reality. This is important from a performance standpoint - reading from a sensor or writing to an output can be blocking sometimes. Keeping that code separate from our internal logic helps keep things moving smoothly. Changing variables is fast. If we mix these kinds of code up, we can get somewhat choppy interactions.&lt;/p&gt;
&lt;p&gt;There's a more pressing performance consideration however. It can be hard to visualize, but often the different phases will end up happening many cycles apart, not all at once, as it appears. By keeping the phases separate, we can do one phase, say assessing real life, in one cycle, and then 10 cycles later do the reconsideration phase, and it could be 100 cycles until we are able to reconcile with real life again.&lt;/p&gt;
&lt;p&gt;We also incidentally end up separating multiple sub-phases: we'll read button "A" in one cycle, then 20 cycles later read button "B". We'll update state for button "B" 3 cycles later, and update the state for button "A" 30 cycles later.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Inbetween all these gaps&lt;/em&gt;, we are able to handle other state phases, and sub-phases. It all interleaves, sort of like the teeth in a zipper, or cars merging on a highway.&lt;/p&gt;
&lt;p&gt;This all appears instantaneous for us, even giving the appearance of different lines of code running simultaneously, since cycles are millionths of a second long.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-rgb-led-of-a-different-color-getting-classy"&gt;
&lt;h2 id="an rgb led of a different color: getting classy"&gt;An RGB LED Of A Different Color: Getting Classy&lt;/h2&gt;
&lt;p&gt;Now that we have a clear pattern for working with state, lets add our new feature, and make the RGB LED change colors every time its pressed.&lt;/p&gt;
&lt;p&gt;But first, lets refactor our code to use a class to manage state.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;Buttons: {}/{}, LED: {}, RGB: {}, Color: {}&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# first pass: check real life&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# second pass: assess state&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# third pass: reconcile state&lt;/span&gt;
    &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This code is identical to the last example, except that we've replaced the state variables with a single state class, called &lt;tt class="docutils literal"&gt;State&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class, defined on &lt;strong&gt;lines 4-13&lt;/strong&gt;, has two defined methods. The first is &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt;, the constructor. It sets up the default values of all of the attributes of the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; instance.&lt;/p&gt;
&lt;p&gt;The second defined method, &lt;tt class="docutils literal"&gt;__repr__()&lt;/tt&gt; is also special, like &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt; - it is called whenever you need a &lt;em&gt;representation&lt;/em&gt; of an instance object. It serves two purposes.&lt;/p&gt;
&lt;p&gt;First, it can be used to return valid Python code that could be used to recreate your object.&lt;/p&gt;
&lt;p&gt;The other purpose to provide a quick glance into what data the object holds - in this case it doesn't have to be valid Python - we indicate that we're using this purpose by wrapping our return value in angle brackets (&lt;tt class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Every standard Python data type implements this method. Its what you see when you just evaluate an object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="go"&gt;[1, 2, 'three', 4, 6, 9]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;Buttons: False/False, LED: False, RGB: False, Color: (255, 255, 255)&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;Buttons: False/False, LED: False, RGB: True, Color: (255, 255, 255)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we illustrate the standard Python type behavior by creating and then evaluating a simple list, then instantiate our &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class, evaluate it, change an attribute, and evaluate it again.&lt;/p&gt;
&lt;p&gt;It's a good practice to define &lt;tt class="docutils literal"&gt;__repr__()&lt;/tt&gt; in your classes, as it helps when debugging.&lt;/p&gt;
&lt;p&gt;In our &lt;tt class="docutils literal"&gt;__repr__()&lt;/tt&gt; method, we're using the &lt;tt class="docutils literal"&gt;.format()&lt;/tt&gt; string method to insert instance values into our return value.&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;line 15&lt;/strong&gt;, we instantiate our &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; instance for use in our main loop.&lt;/p&gt;
&lt;p&gt;In our main loop on &lt;strong&gt;lines 17-41&lt;/strong&gt;, the logic is exactly the same as before, except we are accessing attributes of our &lt;tt class="docutils literal"&gt;state&lt;/tt&gt; object.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Interacting with the one &lt;tt class="docutils literal"&gt;state&lt;/tt&gt; object is a lot cleaner than dealing with five separate variables. But what's really cool about using a class like this is that we can give our &lt;tt class="docutils literal"&gt;state&lt;/tt&gt; object its own unique &lt;em&gt;functionality&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lets illustrate this by taking the "different" from our requirement of a "different color" quite literally.&lt;/p&gt;
&lt;p&gt;We'll add a method to the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class that generates a totally &lt;strong&gt;random&lt;/strong&gt; color.&lt;/p&gt;
&lt;p&gt;The method will then assign it to the &lt;tt class="docutils literal"&gt;color&lt;/tt&gt; state attribute.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;Buttons: {}/{}, LED: {}, RGB: {}, Color: {}&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# -- snip --&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This code replaces the first lines of the previous example. Everything from the initial imports, through to instantiating the &lt;tt class="docutils literal"&gt;state&lt;/tt&gt; object is replaced with the above, up to the &lt;tt class="docutils literal"&gt;# &lt;span class="pre"&gt;--&lt;/span&gt; snip &lt;span class="pre"&gt;--&lt;/span&gt;&lt;/tt&gt; comment.&lt;/p&gt;
&lt;p&gt;The first difference is that we've imported the &lt;tt class="docutils literal"&gt;random&lt;/tt&gt; module, on &lt;strong&gt;line 2&lt;/strong&gt;. This is a standard Python module that provides an interface with a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator"&gt;psuedo-random number generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other change is the implementation of the &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; method on &lt;strong&gt;lines 13-18&lt;/strong&gt;. This method uses the &lt;tt class="docutils literal"&gt;randrange()&lt;/tt&gt; function from the &lt;tt class="docutils literal"&gt;random&lt;/tt&gt; module to select three random numbers between 0 and 255 (the range of valid red, green, and blue amounts), and set &lt;tt class="docutils literal"&gt;self.color&lt;/tt&gt; to a tuple containing them.&lt;/p&gt;
&lt;p&gt;So every time the &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; method is called, a new random color is generated and stored in the state object.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, we can change the logic in our main loop to use the new &lt;tt class="docutils literal"&gt;State.random_color()&lt;/tt&gt; method to generate a random color.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;Buttons: {}/{}, LED: {}, Color: {}&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# update the state&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# take action - change the state&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"LED: on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RGB on. Color: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# take action - do things that cause side effects&lt;/span&gt;
    &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;Everything here has been explained before, with the exception of the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We call the &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; method on &lt;strong&gt;line 42&lt;/strong&gt;, so now we get a new color every time the button is not pressed.&lt;/li&gt;
&lt;li&gt;We've added some debugging helpers, &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; calls, on &lt;strong&gt;lines 32 and 38&lt;/strong&gt;. This way when watching the Python console, we can see what's going on, and keep an eye on how our state is changing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Using a method in this way keeps the state-related code with the state-related data. This is a good example of &lt;em&gt;encapsulation&lt;/em&gt;. Since we have no other need to generate random colors, beyond changing our state, putting it in the class gets it out of the way of the rest of the main loop logic.&lt;/p&gt;
&lt;p&gt;This also helps preserve the separation of our phases working with state that we outlined above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A few notes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;With every loop, we call &lt;tt class="docutils literal"&gt;state.random_color()&lt;/tt&gt; whenever the "B" button is not being pressed. This means the color of the pixel is always changing, even when the RGB pixel isn't illuminated. This is sub-optimal. We never want to do work when we don't have to. We'll address this situation in the next section when we start dealing with &lt;em&gt;events&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;There's an added &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; each time the state changes. This serves two purposes. First, it can be hard to see LEDs working in the video below, so I'll also demonstrate with a screen grab of &lt;a class="reference external" href="https://codewith.mu/"&gt;Mu's&lt;/a&gt; console. Second, there are times when we'll be doing things repetitively and not realize it. Remember how our code gets interleaved like cars merging? If we're triggering some action more often then we intend to, or in an unexpected order, it could be a bug. Calling &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; will let us see this in the console, even if we can't see it in our hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a video of this code running on my Trinket M0:&lt;/p&gt;
&lt;div class="video-container"&gt;
&lt;video controls=""&gt;
&lt;source src="/videos/non-blocking-events-circuitpython/state-demo-trinket-01.mp4" type="video/mp4"/&gt;
&lt;p&gt;Your browser doesn't support HTML5 video. Here is
          a &lt;a href="/videos/non-blocking-events-circuitpython/state-demo-trinket-01.mp4"&gt;link to the video&lt;/a&gt; instead.&lt;/p&gt;
&lt;/video&gt;
&lt;/div&gt;&lt;p&gt;Before we move on, lets &lt;em&gt;refactor&lt;/em&gt; our code yet again, but this time, just a little bit. Since &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; is our keeper of state for our project, lets move &lt;strong&gt;all&lt;/strong&gt; of the code that changes state into to a method of the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"LED on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RGB on. Color: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;Buttons: {}/{}, LED: {}, Color: {}&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# update the state&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# take action - do things that cause side effects&lt;/span&gt;
    &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This code is identical to the last example, except for the addition of the &lt;tt class="docutils literal"&gt;update()&lt;/tt&gt; method to the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;update()&lt;/tt&gt; is defined starting on &lt;strong&gt;line 20&lt;/strong&gt;. It's simply a copy/paste of the logic from the main loop in the last example, just altered so it references &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;state&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We've added a call to &lt;tt class="docutils literal"&gt;state.update()&lt;/tt&gt; on &lt;strong&gt;line 44&lt;/strong&gt;, to invoke the code that we moved into the &lt;tt class="docutils literal"&gt;update()&lt;/tt&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class is truly the authority for all things state-related. In OOP terms, it's &lt;em&gt;fully encapsulated&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Note how simplistic our main loop is becoming. This is good! ðŸ¦„ Since we've factored the work of updating the state object into the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class, it tidies things up a lot. Code that is concerned with state stays with the class, along with the state data.&lt;/p&gt;
&lt;p&gt;Our main loop can focus on things that are more relevant to the core functionality of our project - in this case, inspecting the state and affecting change in the real world (blinking the LEDs).&lt;/p&gt;
&lt;p&gt;Another thing that using a class gives us, that we aren't taking advantage of just yet, is that we can now create multiple instances of the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class, and deal with multiple groups of similar state data, if we needed to. This will make more sense if we think about it in terms of encapsulating state and state methods for say, each button, or each LED - since we have more than one of each, we could have a new &lt;tt class="docutils literal"&gt;LEDState&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;ButtonState&lt;/tt&gt; class that just deals with generic state for LEDs or buttons, and create an instance for each button and/or LED that we have.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;We will be doing something along these lines in a future installment of this series. Stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now that we've explored what state is, and looked at how we can write code to deal with it, we have opened ourselves up to some really neat possibilities. But since we're using &lt;tt class="docutils literal"&gt;time.sleep()&lt;/tt&gt;, our code is still &lt;em&gt;blocking&lt;/em&gt;, and we're still limited by that. The next step is to utilize our new understanding of state to debounce our buttons &lt;em&gt;without&lt;/em&gt; blocking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unblocking-our-debouncing-using-state-to-avoid-blocking"&gt;
&lt;h2 id="unblocking our debouncing: using state to avoid blocking"&gt;Unblocking Our Debouncing: Using State To Avoid Blocking&lt;/h2&gt;
&lt;p&gt;The next step is to get rid of that blocking code. This is another thing our &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class can handle for us.&lt;/p&gt;
&lt;p&gt;As discussed earlier, the reason why we block is to keep our code from running too fast. This keeps our signals from our buttons smooth, avoiding bouncing.&lt;/p&gt;
&lt;p&gt;Another way to look at it is that we've introduced the passage of &lt;em&gt;time&lt;/em&gt; into our main loop. We're fixing our code to run at an interval of 0.2 seconds, so we can wait until a button is completely pressed or released before we act, and so that our code won't run over and over without reason.&lt;/p&gt;
&lt;p&gt;Earlier we likened it to reducing the &lt;em&gt;sampling frequency&lt;/em&gt; of our input - we're checking the state of the button every &lt;tt class="docutils literal"&gt;0.2&lt;/tt&gt; seconds, instead of 45 million times every second. Blocking was a simple way to achive this. Its possible, however, to run the code &lt;em&gt;every&lt;/em&gt; cycle, and count how much time has elapsed, &lt;em&gt;then&lt;/em&gt; act when enough time has passed.&lt;/p&gt;
&lt;p&gt;This is a textbook use case for the state concept we've been exploring.&lt;/p&gt;
&lt;p&gt;If we store some sort of time reference in our state object, when can then track the passage of time from cycle to cycle. It's okay that this code runs millions of times a second - we will inspect the state object every time (which is fast and doesn't block) and only act when enough time has passed (which is usually fast but could block sometimes - and the side effects might be bad).&lt;/p&gt;
&lt;p&gt;In fact, this can give us much more granularity, and our code can be much more responsive, beyond not blocking - we're now working at the full resolution made possible by the processor. And the best part, we are able to perform tasks while we wait for the time to pass.&lt;/p&gt;
&lt;div class="section" id="the-state-time-continuum"&gt;
&lt;h3&gt;The State-Time Continuum&lt;/h3&gt;
&lt;p&gt;The basic process is to first mark a starting time in our state object, and then, every loop, compare that mark to the current time - when we see that enough seconds (0.2 to match our blocking code) have passed, then we can act.&lt;/p&gt;
&lt;p&gt;The time we last looked at the clock will be stored as a new state attribute. We'll use the methods of our state object to handle time-related calculations.&lt;/p&gt;
&lt;p&gt;But maybe we're getting ahead of ourselves a bit. How exactly do we track passing time? Most microcontrollers don't have true built-in clocks like PCs.&lt;/p&gt;
&lt;p&gt;Most computers have what's called a "&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Real-time_clock"&gt;real-time clock&lt;/a&gt;", or RTC. It's typically an integrated circuit that counts time in a highly accurate way using some sort of oscillating crystal. A battery is used to keep power to the IC so that it won't loose track of time, especially when the PC is powered off.&lt;/p&gt;
&lt;p&gt;While we can get microcontrollers with RTCs built in, and as add-on boards (Adafruit has several in their shop that have &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-pcf8523-real-time-clock/rtc-with-circuitpython"&gt;CircuitPython support&lt;/a&gt;), they are typically reserved for applications where "clock time" is necessary - for example, a digital alarm clock, or logging sensor data.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;RTCs aren't the only way you can get precise time in an electronic device.&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;Cellphones can get the current time from the cell carrier. If you are using some kind of cellular modem in your project, you can ask it for the current date/time with a specific command.&lt;/li&gt;
&lt;li&gt;Other GPS-enabled electronics can get the time from the GPS signal. Again, if you are using one of these modules in your project, you can get this information too.&lt;/li&gt;
&lt;li&gt;If a device has internet access, it can calculate the current time via &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Network_Time_Protocol"&gt;NTP&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In most countries, there is a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Radio_clock"&gt;radio broadcast that transmits the current time&lt;/a&gt;, often from a highly accurate source like an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Atomic_clock"&gt;atomic clock&lt;/a&gt;. If you can find the right ICs (&lt;a class="reference external" href="https://www.kb6nu.com/how-to-build-a-wwvb-receiver/"&gt;it looks like you may have to salvage one from an old clock&lt;/a&gt;) or figure out how to receive the signal, you can use it as a reliable clock source. Assuming &lt;a class="reference external" href="https://hackaday.com/2018/08/20/what-will-you-do-if-wwvb-goes-silent/"&gt;your government isn't like mine, trying to stop broadcasting it to save money&lt;/a&gt;. ðŸ’”&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Luckily, microcontrollers are in themselves actually a sort of clock, because they operate on a regular processor cycle.&lt;/p&gt;
&lt;p&gt;The processor cycles are fixed to a specific rate. For example, our M0 board "clocks" at 48 megahertz (&lt;em&gt;48,000,000&lt;/em&gt; cycles per second). That's because every second, the processor scans the part of its memory where your program code lives, and executes the instructions it finds &lt;em&gt;fourty-eight million times&lt;/em&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The chips in these CircuitPython boards, the ATSAMD21 and ATSAMD51, have a built-in &lt;em&gt;oscillator&lt;/em&gt;. They have circuitry in the chips that can generate a regular pulse that can be used for clocking the processor. Not all microcontrollers have these. You'll often see a little oblong silver cylinder on the board (a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Crystal_oscillator"&gt;crystal oscillator&lt;/a&gt;) - this is the real "clock" in that situation.&lt;/p&gt;
&lt;p class="last"&gt;The processor runs at the frequency of the outboard oscillator. In the case of the M0/M4 chips, if you are building a development board, you can choose to use an external oscillator or choose one of several built-in to the chip.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;That cycle is very reliable, so it's possible to track it, and with some math, convert cycles to seconds passing over time.&lt;/p&gt;
&lt;p&gt;We could do this tracking and math ourselves, but there's a function in the &lt;tt class="docutils literal"&gt;time&lt;/tt&gt; module that does exactly that. It's called &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt;. When called, it returns the number of seconds that have passed since the processor was turned on.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Behind the scenes, CircuitPython is using so-called &lt;a class="reference external" href="https://learn.adafruit.com/multi-tasking-the-arduino-part-2/timers"&gt;timer interrupts&lt;/a&gt;, features of microcontrollers where you can tell the processor to execute specific code blocks at regular intervals based on processor cycles.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt; returns a &lt;em&gt;float&lt;/em&gt;, or &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Floating-point_arithmetic"&gt;floating-point number&lt;/a&gt; - essentially a fraction, so it's ideal for our two-tenths-of-a-second debouncing rate.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;The resolution of &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt; in CircuitPython is somewhat variable and can vary from chip to chip - it's safe to assume hundreths of a second accuracy, but you might not get more than that. Keep that in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, let's take advantage of this in our code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-time-work-for-us"&gt;
&lt;h3&gt;Making Time Work For Us&lt;/h3&gt;
&lt;p&gt;First, we'll need to add a new attribute to our &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class. It will represent the last time we looked at the clock, or &lt;em&gt;checked in&lt;/em&gt; with the processor. As such, we'll call it &lt;tt class="docutils literal"&gt;checkin&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We'll set the initial value of &lt;tt class="docutils literal"&gt;checkin&lt;/tt&gt; to the value of &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt;. By doing this in the constructor (&lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt;), we are calling &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt; when we create the &lt;tt class="docutils literal"&gt;state&lt;/tt&gt; instance from the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class. So the initial value of &lt;tt class="docutils literal"&gt;state.checkin&lt;/tt&gt; will be the number of seconds from when the board was powered on, until that line of code is executed. It's a safe default that gives us something to compare to.&lt;/p&gt;
&lt;p&gt;We'll look at &lt;tt class="docutils literal"&gt;checkin&lt;/tt&gt; every loop, and see if the current value of &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt; is at least 0.2 seconds larger - if this is true, it would mean that 0.2 seconds have elapsed. It's super simple and non-blocking.&lt;/p&gt;
&lt;p&gt;At that point we can update our state - the reading from the button should be stable.&lt;/p&gt;
&lt;p&gt;As a last step, we need to set &lt;tt class="docutils literal"&gt;checkin&lt;/tt&gt; to the new value of &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt;, to mark the last time we checked the clock, and the cycle can start all over again.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_debounce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_debounce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"LED on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="err"&gt;ï»¿&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RGB on. Color: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;Buttons: {}/{}, LED: {}, Color: {}&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# update the state&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# take action - do things that cause side effects&lt;/span&gt;
    &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;Changes in this iteration:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On &lt;strong&gt;line 6&lt;/strong&gt;, we introduce the concept of a &lt;em&gt;private class attribute&lt;/em&gt;, called &lt;tt class="docutils literal"&gt;_debounce&lt;/tt&gt; (class attributes and 'privacy' are discussed below). We're using it to hold the number of seconds we want to wait before deciding if a button was pressed or not.&lt;/li&gt;
&lt;li&gt;On &lt;strong&gt;Line 14&lt;/strong&gt;, the new &lt;tt class="docutils literal"&gt;checkin&lt;/tt&gt; attribute is established, and its default value is set to &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt; - so it will be a float of the number of seconds since the board was powered on (roughly). The specific default value will be the number of seconds since the board was powered on &lt;em&gt;when the class is instantiated&lt;/em&gt; on &lt;strong&gt;line 46&lt;/strong&gt;. As discussed above, this gives us a reference point for debouncing.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;update()&lt;/tt&gt; method has been altered to both utilize the &lt;tt class="docutils literal"&gt;checkin&lt;/tt&gt; attribute to only change the state every 0.2 seconds (&lt;strong&gt;line 24&lt;/strong&gt;), and update the &lt;tt class="docutils literal"&gt;checkin&lt;/tt&gt; value after its done doing that (&lt;strong&gt;line 41&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This code handles debouncing our buttons and doesn't block. ðŸ¦„ We keep things clean by letting the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class handle tracking the time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aside-class-attributes-and-privacy"&gt;
&lt;h3&gt;Aside: Class Attributes And Privacy&lt;/h3&gt;
&lt;p&gt;In this iteration of the code, we've introduced a new concept beyond the addition of tracking time. Note the addition of a new variable in the class, defined outside of any methods, called &lt;tt class="docutils literal"&gt;_debounce&lt;/tt&gt; (&lt;strong&gt;line 6&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;_debounce&lt;/tt&gt; is a &lt;em&gt;class attribute&lt;/em&gt;, meaning that it belongs to the &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; class, and not to the instance object created from &lt;tt class="docutils literal"&gt;State&lt;/tt&gt;. We can access it from the instance (&lt;tt class="docutils literal"&gt;self._debounce&lt;/tt&gt; in our methods, or &lt;tt class="docutils literal"&gt;state._debounce&lt;/tt&gt; in our main code).&lt;/p&gt;
&lt;p&gt;By making &lt;tt class="docutils literal"&gt;_debounce&lt;/tt&gt; a class attribute, we are indicating to anyone who uses our class that we don't intend for the value to be changed. However, if we were to change it, we would do so by accessing it as &lt;tt class="docutils literal"&gt;State._debounce&lt;/tt&gt;. What's really interesting is that changing &lt;tt class="docutils literal"&gt;State._debounce&lt;/tt&gt; would change &lt;em&gt;all&lt;/em&gt; of the instances of &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; too.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;set&lt;/em&gt; a class variable via the instance, Python thinks you are trying to make a new instance variable, and will essentially disconnect the instance's version of the class variable from the class.&lt;/p&gt;
&lt;p&gt;This is the expected behavior we're discussing above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="go"&gt;...:    _class_attr = "X"&lt;/span&gt;
&lt;span class="go"&gt;...:&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt;
&lt;span class="go"&gt;"X"&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Y"&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt;
&lt;span class="go"&gt;"Y"&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt;
&lt;span class="go"&gt;"Y"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is what happens when you set a class attribute on an instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="go"&gt;...:    _class_attr = "X"&lt;/span&gt;
&lt;span class="go"&gt;...:&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Y"&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt;
&lt;span class="go"&gt;"X"&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt;
&lt;span class="go"&gt;"Y"&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Z"&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt;
&lt;span class="go"&gt;"Y"&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inst2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_class_attr&lt;/span&gt;
&lt;span class="go"&gt;"Z"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class="last"&gt;This can cause very subtle bugs that are hard to track down.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As noted in the warning above, there's some nuance to it, but generally speaking, we use class attributes like this when we want to set a value that will rarely, if ever, change. We're using it here like a configuration setting. You can change it in the code, or change it at runtime (&lt;tt class="docutils literal"&gt;State._debounce = 0.1&lt;/tt&gt;, not &lt;tt class="docutils literal"&gt;state._debounce = 0.1&lt;/tt&gt;) and it will affect any instances of &lt;tt class="docutils literal"&gt;State&lt;/tt&gt; that exist, or will be created after the change.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="https://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide"&gt;This post&lt;/a&gt; does a great job of explaining instance attributes and class attributes in great depth.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There's something else noteworthy about &lt;tt class="docutils literal"&gt;_debounce&lt;/tt&gt;. We've prefixed it with an &lt;em&gt;underscore&lt;/em&gt;. This indicates that it should be considered a &lt;em&gt;private&lt;/em&gt; attribute. This means the attribute is intended for use only within the class methods, and it's not to be accessed from outside.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;In Python, private attributes and methods are simply a &lt;em&gt;convention&lt;/em&gt;. You shouldn't peek, but if you do, things will still work. The underscore is just a signal to other programmers that you don't intend the attribute to be used outside of the class.&lt;/p&gt;
&lt;p&gt;In other languages, this is not the case - an attribute declared private will not be accessible &lt;em&gt;at all&lt;/em&gt; outside of the class - it's like it doesn't exist.&lt;/p&gt;
&lt;p class="last"&gt;Since the concept of "privacy" in Python is merely a convention, it's better to express it not as "hidden" or "forbidden", but more so "an attribute name that I can't promise won't change, so don't count on it being there".&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="demo-and-conclusion"&gt;
&lt;h3&gt;Demo And Conclusion&lt;/h3&gt;
&lt;p&gt;The changes are pretty subtle, but here's another video showing this version running on my Trinket M0:&lt;/p&gt;
&lt;div class="video-container"&gt;
&lt;video controls=""&gt;
&lt;source src="/videos/non-blocking-events-circuitpython/state-demo-trinket-02.mp4" type="video/mp4"/&gt;
&lt;p&gt;Your browser doesn't support HTML5 video. Here is
          a &lt;a href="/videos/non-blocking-events-circuitpython/state-demo-trinket-02.mp4"&gt;link to the video&lt;/a&gt; instead.&lt;/p&gt;
&lt;/video&gt;
&lt;/div&gt;&lt;p&gt;At this point we've "unblocked" our code, and crafted a really clean way of working with state.&lt;/p&gt;
&lt;p&gt;There is a small flaw here, as touched on earlier. The &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; method is being called nearly every 0.2 seconds, whether the button has been pressed or not. This is better than the first version of the code, where it was running almost every single loop, but it's still unnecessary.&lt;/p&gt;
&lt;p&gt;What we want, is for the color to change only once, when you stop pressing the button. Or even when you first press it, before the &lt;tt class="docutils literal"&gt;rgb&lt;/tt&gt; state attribute is set to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;What that means is we want to detect when a button's state has changed from &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;, or &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;, and then take action.&lt;/p&gt;
&lt;p&gt;What we want to do is called &lt;em&gt;event detection&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="diving-into-events"&gt;
&lt;h2 id="diving into events"&gt;Diving Into Events&lt;/h2&gt;
&lt;p&gt;In order to avoid calling &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; every single time we update our state, whether the "b" button was pressed or not, we need to decide when the best time to call &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; is. For this example, we were calling &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; when the button was unpressed because if we didn't, the color would change every 0.2 seconds that you held the button down (or constantly before we were tracking time).&lt;/p&gt;
&lt;p&gt;So when should we do it, to avoid calling &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; too frequently?&lt;/p&gt;
&lt;p&gt;Think about how a button, technically a "momentary switch", works. When you press it, the microcontroller pin reads "HIGH" until you remove your finger (or "release" the button). Then it reads "LOW". We can think about these situations as two separate &lt;em&gt;events&lt;/em&gt; - &lt;strong&gt;press&lt;/strong&gt; and &lt;strong&gt;release&lt;/strong&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Press&lt;/strong&gt; happens when the button changes from "LOW" to "HIGH" - it wasn't pressed, and now it is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Release&lt;/strong&gt; happens when the button changes from "HIGH" to "LOW" - it &lt;em&gt;was&lt;/em&gt; pressed, and now &lt;em&gt;it isn't&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Python, that means the &lt;em&gt;press&lt;/em&gt; event happens when a pin's &lt;tt class="docutils literal"&gt;value&lt;/tt&gt; attribute used to read &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;, and now it reads &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;. A &lt;em&gt;release&lt;/em&gt; event happens when a pin's &lt;tt class="docutils literal"&gt;value&lt;/tt&gt; used to read &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; and now it's &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We know what the previous value was because we've stored in it our &lt;tt class="docutils literal"&gt;state&lt;/tt&gt; object. We can use that to detect the change in state by just comparing the current real-life value with the last value we recorded in the state object.&lt;/p&gt;
&lt;p&gt;The basic logic looks like this:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/basic-button-event-logic.png" style="width: 80%;"/&gt;
&lt;p&gt;Now that we can act &lt;em&gt;only&lt;/em&gt; when the button transitions from one state to the other, we can call &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; in a more logical place, like right before we change the RGB pixel's state, when the button is pressed. We could also just do it when the button is released, more in line with the original logic.&lt;/p&gt;
&lt;p&gt;Here's our code again, with the &lt;tt class="docutils literal"&gt;random_color()&lt;/tt&gt; call wrapped inside of logic that detects a &lt;em&gt;press&lt;/em&gt; event:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_debounce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Generating random color"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_debounce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# b button was pressed&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B button pressed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random_color&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"LED on"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RGB on. Color: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;Buttons: {}/{}, LED: {}, Color: {}&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# update the state&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# take action - do things that cause side effects&lt;/span&gt;
    &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is a major shift in how our code works, but it's accomplished with a very minor change.&lt;/p&gt;
&lt;p&gt;On &lt;em&gt;line 31&lt;/em&gt;, we compare the current physical state of the button with the value we've stored in our state object. If it's changed from "not pressed" (&lt;tt class="docutils literal"&gt;self.button_b&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;) to "pressed" (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;check("B")&lt;/span&gt;&lt;/tt&gt; returns &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;), then we've detected the &lt;em&gt;press&lt;/em&gt; event.&lt;/p&gt;
&lt;p&gt;We only change the color to a new random one (call &lt;tt class="docutils literal"&gt;self.random_color()&lt;/tt&gt;, &lt;strong&gt;line 33&lt;/strong&gt;) when the button state has changed, instead of calling it whenever the button is being pressed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;This shares a similarity to the time-tracking code we are using for button debounce: we're storing a state value at one point in time, and then comparing it to something that can change. With debounce, it was the elpased time, with our event detection, it's the state of the button.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We're now set up to handle even more events, like button holds, and double-clicks. Or even complex events involving multiple buttons (think chords on a piano or "ctrl-c" on a computer keyboard).&lt;/p&gt;
&lt;p&gt;If you've done any programming in the past with GUIs, or front-end web application development, this concept may seem very familiar. It's similar to how mouse and keyboard events are handled in these environments. ðŸ¤”&lt;/p&gt;
&lt;p&gt;But don't be distracted by this! An event is not inherently tied to human interaction. An event can be &lt;em&gt;anything&lt;/em&gt;. If a change in state can be detected, we can call it an event, and take action when it happens (or, we can &lt;em&gt;handle&lt;/em&gt; the event).&lt;/p&gt;
&lt;p&gt;Imagine you have some environmental sensors. Say you can detect UV index, brightness of light, temperature, and relative humidity.&lt;/p&gt;
&lt;p&gt;All of the following might be examples of events you could detect:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The temperature increases by 10 degrees Fahrenheit.&lt;/li&gt;
&lt;li&gt;The humidity drops by 20%.&lt;/li&gt;
&lt;li&gt;The humidity drops by 20% &lt;em&gt;over the course of one hour&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The UV index is over 6 and the temperature is over 85 degrees Fahrenheit.&lt;/li&gt;
&lt;li&gt;There is very little light falling on the light sensor - &lt;em&gt;it's probably night time&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It was nighttime, but now it's not, &lt;em&gt;it's probably sunrise&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you could probably think of a lot more!&lt;/p&gt;
&lt;p&gt;All of these events would be handled by some code: change the color of a status LED, write a log message, send an SMS reminding you to put on some sunscreen, put the CPU into "low power" mode, and so on. If you can detect the event, based on changes in state, you can handle it, taking necessary action.&lt;/p&gt;
&lt;p&gt;You gain a lot of insight when you start to look at coding a microcontroller project as a problem of &lt;em&gt;managing state&lt;/em&gt;. Then you can think about changes in state as triggering &lt;em&gt;events&lt;/em&gt;. You can &lt;em&gt;handle&lt;/em&gt; those events with code. Very complex problems become very easy to reason about, and easier to debug.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="state-considerations"&gt;
&lt;h2 id="state: considerations"&gt;State: Considerations&lt;/h2&gt;
&lt;p&gt;There are many benefits to modeling our project code around state:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have ultimate flexibility. When it comes to debouncing buttons or otherwise detecting events, we can avoid blocking. Generally speaking, managing state lets us decide what data we care about, and we can define our own events based on what's important to our project.&lt;/li&gt;
&lt;li&gt;We can separate our concerns. Instead of mixing complex logic and interacting with components and peripherals, we can do one, then the other. This makes our code cleaner, less bug prone, and better performing.&lt;/li&gt;
&lt;li&gt;We have good transparency. By looking at the class definition, it's obvious what data we care about.&lt;/li&gt;
&lt;li&gt;At the same time, we can treat state objects as if they were &lt;em&gt;opaque&lt;/em&gt;. We can interact with them without being concerned about the fine details about how events are detected or data is stored.&lt;/li&gt;
&lt;li&gt;The code can be factored in such a way that it is very simple to reason about. With a few rules attached to the state variables, we can condense a complex series of if/else statements into just a few that are easy to wrap our heads around.&lt;/li&gt;
&lt;li&gt;Events become possible to detect, since we're tracking state over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is all great, but there are some drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;We will ultimately end up using more memory. This isn't too big of a concern on a beefy platform like the M0/M4 boards, but we still have limits to how much memory we can use and have to remain conscious of this.&lt;/p&gt;
&lt;p&gt;This is especially true for CircuitPython and hobbyists like us - we will often rely heavily on 3rd party libraries, and every line of code we add to our project eats up a small amount of memory.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;There is an excellent article series over on &lt;a class="reference external" href="https://hackaday.com/2015/12/09/embed-with-elliot-debounce-your-noisy-buttons-part-i/"&gt;Hackaday&lt;/a&gt; that covers debouncing in depth and illustrates a solution for the Arduino platform that is &lt;em&gt;extremely&lt;/em&gt; memory efficient. Something like this could be adapted to CircuitPython if our state keeping variable got to be too memory intensive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;We will be covering techniques for reducing our memory footprint at the end of this series. Stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The timing is likely to be &lt;em&gt;ever-so-slightly&lt;/em&gt; inaccurate. While processor cycles are very consistent, counting them tends to be less accurate over time (this is called "clock drift"). This is aggravated by the math being done - counting millions of cycles, dividing that by seconds, then rounding will cause further errors over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There can still be blocking code, and aspects of Python (like &lt;a class="reference external" href="https://wiki.python.org/moin/GlobalInterpreterLock"&gt;the GIL&lt;/a&gt;) that can further throw off your timing, especially when your code is running for long periods of time (days).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The precision of &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt; is pretty shallow compared to the counters that CircuitPython uses behind the scenes to calculate it. Its typically only going to give you precision to hundredths of a second. Perfectly adequate for our purposes, but it could become an issue in some contexts (video games, for example).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there are things to be concerned about, but nothing that detracts from the utility of this approach.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;At the time of writing, there is an &lt;a class="reference external" href="https://github.com/adafruit/circuitpython/issues/519"&gt;open issue&lt;/a&gt; addressing the inaccuracy of &lt;tt class="docutils literal"&gt;time.monotonic()&lt;/tt&gt; in the CircuitPython github with a promising pull request attached. Worth keeping an eye on, and here's hoping that it gets more attention.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions-and-what-s-next"&gt;
&lt;h2 id="conclusions and what's next"&gt;Conclusions And What's Next&lt;/h2&gt;
&lt;p&gt;So, now we know what a great tool state is, and how to wield it like a pro.&lt;/p&gt;
&lt;p&gt;And building on that, we've explored the fundamentals of events, and we can think about things like pressing a button as a series of state changes. We can detect these changes and take action.&lt;/p&gt;
&lt;p&gt;As a side effect, we've also gotten a pretty good introductory overview of object-oriented programming, and how to use it in Python. I feel a bit sneaky ðŸ˜€. Usually, OOP introductions are hardly practical, and it's really cool that we're able to do something real thanks to this awesome platform we have! ðŸ’–&lt;/p&gt;
&lt;p&gt;In the next installment, we'll take this approach further. We'll create an easy-to-use class that will track button state and handle event detection for us. We'll do some more cool things with OOP Python, and adapt this new class to our test code, in preparation for building the more complex project described in &lt;a class="reference external" href="/circuitpython-state-part-1.html"&gt;part 1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="circuitpython"></category><category term="python"></category><category term="hardware"></category><category term="state"></category></entry><entry><title>State And Events In CircuitPython: Part 2: Exploring State And Debouncing The World</title><link href="/circuitpython-state-part-2.html" rel="alternate"></link><published>2018-09-01T10:07:00-04:00</published><updated>2018-09-01T10:07:00-04:00</updated><author><name>jjmojojjmojo</name></author><id>tag:None,2018-09-01:/circuitpython-state-part-2.html</id><summary type="html">&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;In this part of the series, we're going to really dig into what &lt;em&gt;state&lt;/em&gt; actually is. We'll use analogies from real life, and then look at how we might model real-life state using Python data structures.&lt;/p&gt;
&lt;p&gt;But first, we'll discuss a common problem that all budding electronics engineers have to deal with at some point: "noisy" buttons and how to make them "un-noisy", commonly referred to as "debouncing".&lt;/p&gt;
&lt;p&gt;We'll talk about fixing the problem in the worst, but maybe easiest way: by &lt;em&gt;blocking&lt;/em&gt;. We'll also talk about why it's bad.&lt;/p&gt;
</summary><content type="html">&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;In this part of the series, we're going to really dig into what &lt;em&gt;state&lt;/em&gt; actually is. We'll use analogies from real life, and then look at how we might model real-life state using Python data structures.&lt;/p&gt;
&lt;p&gt;But first, we'll discuss a common problem that all budding electronics engineers have to deal with at some point: "noisy" buttons and how to make them "un-noisy", commonly referred to as "debouncing".&lt;/p&gt;
&lt;p&gt;We'll talk about fixing the problem in the worst, but maybe easiest way: by &lt;em&gt;blocking&lt;/em&gt;. We'll also talk about why it's bad.&lt;/p&gt;

&lt;div class="section" id="a-use-case-for-state-debouncing-buttons"&gt;
&lt;h2 id="a use case for state: debouncing buttons"&gt;A Use Case For State: Debouncing Buttons&lt;/h2&gt;
&lt;p&gt;Most electronics projects will have to deal with "bouncy" inputs, buttons in particular.&lt;/p&gt;
&lt;p&gt;"Bounce", in this sense, is essentially a noisy signal. Logically, you would think that if a button was pressed, that it would be a simple &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Boolean_data_type"&gt;boolean&lt;/a&gt; value - it's either "on" or "off". It's "HIGH" or "LOW", &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In reality, these values refer to &lt;em&gt;a voltage&lt;/em&gt;, or &lt;em&gt;the lack of a voltage&lt;/em&gt;. For our M0/M4 boards, that voltage is 3.3 volts. When the voltage is at 3.3 volts (plus/minus some wiggle room), the pin will read &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; or "HIGH". The voltage is "on".&lt;/p&gt;
&lt;p&gt;When there's no voltage (plus or minus some wiggle room), the pin will read &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; or "LOW". The voltage is "off".&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I'm putting terms like "HIGH", "LOW", "on", and "off" in quotes, and the python booleans, &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; in monotype for a reason: these terms are all mere &lt;em&gt;representations&lt;/em&gt; of what a pin is doing. There's an abstraction at work behind the scenes. I want to use terms that you will see in tutorials and documentation, but you shouldn't take them for granted. What they really are, under the covers, will vary depending on the context. These terms are really just convenient ways for human beings to reason about what the microprocessor is doing.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;An ideal button being pressed and released might look something like this, if we graphed the voltage over time:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-button-bounce-ideal.png" style="width: 80%;"/&gt;
&lt;p&gt;The problem is that you will rarely ever get such straightforward readings. You'll instead get what looks like many pressings in quick succession:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-button-bounce-reality.png" style="width: 80%;"/&gt;
&lt;p&gt;What causes this? It's due to the realities of turning physical interactions into digital signals: when a button is pressed, a piece of metal crosses two contacts, completing a circuit. The microcontroller has an internal threshold that decides how much current constitutes "on" (or "HIGH"), and how much constitutes "off" (or "LOW") - the aforementioned "wiggle room". That threshold can be shockingly large - sometimes what you would think is a "weak" signal, the microcontroller interprets as "HIGH".&lt;/p&gt;
&lt;p&gt;Then there's the buttons themselves. Most buttons are composed of two pieces of metal that are separated by a physical gap (represented by the red lines in the charts above). When you press the button, the metal pieces are brought into physical contact, causing current to flow through them as if they were a solid conductive element (like a continuous piece of wire or a copper trace on a PCB).&lt;/p&gt;
&lt;p&gt;Since electricity &lt;em&gt;really&lt;/em&gt; wants to flow, if given sufficient current and a short enough distance, it will jump through the air. When this happens inside of a button, it causes current to flow momentarily before the contacts are fully in contact, which can cause a spike in the current being read from the microcontroller pin.&lt;/p&gt;
&lt;p&gt;Further, inconsistencies in the metal due to manufacturing or wear can cause multiple subsequent spikes to be sent to the microcontroller prior to the most "solid" one. Even when continually holding down a button, the strength of the signal can vary quite a bit over time. Sometimes it varies enough to be noticed by the microprocessor.&lt;/p&gt;
&lt;p&gt;As the button is released, the same issues happen &lt;em&gt;again&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the case of a capacitive input, the capacitance that is increased by the user interacting with it is detectable long before the user has contacted the pad. It's not always possible to determine precisely when someone has contacted the pad, or we're just detecting a change in capacitance because someone is simply near it (we can use this to our advantage in some applications). There's also potential issues with interference that can make the signal more noisy than it should be.&lt;/p&gt;
&lt;p&gt;The two types of inputs are noisy for different reasons, but the problem is the same.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This all a bit oversimplified. There's a lot more going on when it comes to a digital pin being read, or a capacitive sensor being interacted with. We will get into the (again, overly simplified) concept of "clocking" &lt;a class="reference external" href="/circuitpython-state-3.rst#using-state-to-avoid-blocking"&gt;in the next installment&lt;/a&gt; - the physical stuff we're discussing here is also affected by the timing of processor cycles.&lt;/p&gt;
&lt;p&gt;The two overly-simplified subjects are very complexly related ðŸ˜€.&lt;/p&gt;
&lt;p&gt;A good (but a bit of a feet-first dive) discussion of how the "clock" works is covered in an &lt;a class="reference external" href="https://learn.sparkfun.com/tutorials/digital-logic"&gt;article by sparkfun&lt;/a&gt;. It's by no means a complete discussion of what's going on when we read a digital pin. But I figure that if it's a bit hard to wrap your head around as a whole, the Sparkfun article should give you enough keywords to dig further (the other parts of that series are good too).&lt;/p&gt;
&lt;p&gt;I also recommend a book like &lt;em&gt;Code: The Hidden Language of Computer Hardware and Software&lt;/em&gt; by Charles Petzold to give a very gentle (but pretty thorough) introduction to how computers (like the processor in our M0/M4 dev boards) work on a fundamental level.&lt;/p&gt;
&lt;p class="last"&gt;This is stuff that is important to understand, but you don't need any depth of knowledge of it to accomplish what we set out to do in this series.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Where you think you can use a logical check of a pin's status (&lt;tt class="docutils literal"&gt;if pin.value&lt;/tt&gt;) in your code to determine if the button is pressed, and do something, it's not that simple. Without smoothing out the signal from the pin, your code will end up executing many times before the button is even fully pressed down. The number of times will vary from button to button, and can even vary from day to day.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;For an in-depth analysis of &lt;em&gt;button&lt;/em&gt; bounce and possible solutions, check out &lt;a class="reference external" href="http://www.ganssle.com/debouncing.htm"&gt;A Guide To Debouncing&lt;/a&gt; from the &lt;a class="reference external" href="http://www.ganssle.com/"&gt;Ganssle Group&lt;/a&gt;. It's the best discussion I've found in my research, and often cited by other tutorials that you run into on the subject.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Maybe for some applications, like turning on an LED only while a button is pressed, it's not really a problem. But if pressing that button has &lt;em&gt;side effects&lt;/em&gt; it can be really, really bad.&lt;/p&gt;
&lt;p&gt;What are &lt;em&gt;side effects&lt;/em&gt;? These are changes that occur &lt;em&gt;outside&lt;/em&gt; of the code that is executing, &lt;em&gt;because&lt;/em&gt; of the code. Typically, this means we're altering data outside of our scope (function, method, module, instance, etc), but it can also mean that we're doing something in the "real world", outside of the &lt;em&gt;computer&lt;/em&gt;. Altering a global variable would be a side effect, as would turning on an LED. These side effects are pretty innocuous, but imagine the side effect is something like writing data to a file. If things aren't kosher, we might write bad data or corrupt something. What about triggering a relay to turn on or off a piece of dangerous machinery, or sensitive equipment? That could cause physical damage to the equipment, or even hurt someone.&lt;/p&gt;
&lt;p&gt;So it's not just about having clean code that's less bug-prone (the main concern for most programs). Since we're programming an electronic device that interacts with the real world, we have to be especially conscious about side effects, since they could have real-world consequences.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Wikipedia has a pretty good &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;article about side effects&lt;/a&gt; if you want to read more.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There's more to it than just noisy buttons, though. There are other "bouncy" signals that aren't quite as chaotic as button bounce, but need to be dealt with in the same way. This could be digital temperature readings from a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Thermocouple"&gt;thermocouple&lt;/a&gt; module (like &lt;a class="reference external" href="https://www.adafruit.com/product/269"&gt;this one&lt;/a&gt;), or an analog signal derived from the changing resistance of a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Photoresistor"&gt;photoresistor&lt;/a&gt;. Button bounce is the most common kind of "noise" you may have to deal with, but it's definitely not the only kind you'll run into in your projects.&lt;/p&gt;
&lt;p&gt;But there's something else to consider: our goal is, ultimately, to have &lt;em&gt;meaningful&lt;/em&gt; signals. We want to only trigger side effects when necessary. You press the button, the LED turns on. Once we account for the noise, we're really close to that goal. However, there's one more obstacle in our way: the manner in which our code is being run by our development board.&lt;/p&gt;
&lt;p&gt;Our microcontroller code runs in a "main loop". In CircuitPython, that's usually a &lt;tt class="docutils literal"&gt;while True:&lt;/tt&gt; block. Inside of that block, we process inputs, do side effects, etc.&lt;/p&gt;
&lt;p&gt;CircuitPython runs that loop &lt;em&gt;as fast as it possibly can&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This means that your main loop is executing many &lt;em&gt;thousands&lt;/em&gt; of times per second. If you check a pin or sensors status every loop, even if the button or sensor is fully "debounced", your code will still get called many, many times. A perfectly clean signal will &lt;strong&gt;still&lt;/strong&gt; trigger your code to run over and over and over. If there are side effects, they will be run over and over and over as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="blocking-one-not-great-solution"&gt;
&lt;h2 id="blocking: one (not great) solution"&gt;Blocking: One (not great) Solution&lt;/h2&gt;
&lt;p&gt;The easiest way to deal with all of these issues, and the most common seen in "getting started" tutorials, is to "sleep" the processor for a few fractions of a second before checking an input's value. In programming, we use the term &lt;em&gt;block&lt;/em&gt; to describe this sort of behavior.&lt;/p&gt;
&lt;p&gt;"Blocking" is any action when you tie up the processor. When code is blocking, little, if anything else can happen until the blocking code finishes. We can't read sensors, we can't turn LEDs on or off, we can't even change variables in memory. Everything is on hold, while we wait for that blocking code to do its thing.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Code can block for lots of reasons. Input and output (aka &lt;em&gt;IO&lt;/em&gt; or &lt;em&gt;I/O&lt;/em&gt;) are the main sources of blocking code - CircuitPython is really efficient in how it reads from or writes to digital pins (&lt;em&gt;inputs&lt;/em&gt; or &lt;em&gt;outputs&lt;/em&gt; to digital pins), but there's still the possibility of blocking when we do. It's just normally so quick that you don't notice it.&lt;/p&gt;
&lt;p&gt;In your own code, it's usually easy to see where you might be blocking, but there can be blocking code lurking in the libraries that you use. Sometimes it's necessary due to the hardware or some protocols that are in use, but sometimes it's possible to accomplish the same functionality without blocking.&lt;/p&gt;
&lt;p&gt;This is one of many reasons it's a good idea to comfortable reading Python (and C/C++, if you can) so you can dig into the source code for libraries.&lt;/p&gt;
&lt;p&gt;This way you can see any potential problems before your project is too far along, and refactor things (your code or the library) if the blocking is going to cause you grief.&lt;/p&gt;
&lt;p&gt;You will also &lt;em&gt;learn a lot&lt;/em&gt;, the people who work on CircuitPython and contribute libraries are seriously smart and do some great work ðŸ’–.&lt;/p&gt;
&lt;p class="last"&gt;And maybe you'll find a better way to do something and contribute it back to the community! ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We've already seen some code that blocks in the &lt;a class="reference external" href="/circuitpython-state-part-1.html#testing"&gt;testing&lt;/a&gt; section of the first article in this series. We're using a Python function called &lt;tt class="docutils literal"&gt;time.sleep()&lt;/tt&gt;. All that function does is tie up the processor for the given number of seconds. It's purpose is to intentionally block the code that's executing.&lt;/p&gt;
&lt;p&gt;In the testing code, we block for &lt;tt class="docutils literal"&gt;0.2&lt;/tt&gt; seconds. This amount is considered "standard" for button debouncing. It's an arbitrary amount, suggested by a lot of articles and papers that tackle the problem. It was derived by experimenting with many buttons, actually tracking their voltage as a waveform on an oscilloscope - the output on the scope in these experiments looks a lot like the contrived example we saw above.&lt;/p&gt;
&lt;p&gt;The amount of time it takes for the signal, generated by most buttons, to look more like the ideal square wave in the first chart is around 0.2 seconds.&lt;/p&gt;
&lt;p&gt;There's also a psychological aspect to it. 0.2 seconds has a good "feel" to it - when &lt;em&gt;you&lt;/em&gt; press a button, 0.2 seconds is about how long it takes you to feel confident that you've successfully pressed the button.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;Look at this number as a &lt;em&gt;starting point&lt;/em&gt; when debouncing buttons. You should feel free to experiment with other values in your projects - do what feels right for you and works best for your requirements! There are times when a more sensitive button is more appropriate (like in a video game), and times when a &lt;em&gt;less&lt;/em&gt; sensitive button is required (like when your users are kids or people with limited mobility).&lt;/p&gt;
&lt;p&gt;The buttons you use will impact this interval as well. More "quality" buttons will be less noisy, and can handle a shorter interval.&lt;/p&gt;
&lt;p class="last"&gt;In any case, be creative, and experiment to find the right values for your use cases. It also doesn't hurt to recruit some friends or family to test your project for you.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So by blocking, we are only checking the status of the button &lt;em&gt;5 times&lt;/em&gt; every second, instead of &lt;em&gt;48 million times&lt;/em&gt; every second. ðŸ¤”&lt;/p&gt;
&lt;p&gt;This effectively smoothes out the signal from our input pins, by reducing the number of times per second that we check the status of the button. Another way to state this is we've &lt;em&gt;reduced the sample frequency&lt;/em&gt; of our input. The noisy parts of a button's press and release cycle happen in very, very short bursts, so by reducing the sample frequency, we clean the signal of that noise.&lt;/p&gt;
&lt;p&gt;This works for other inputs too - if we have a really sensitive sensor that is constantly "wiggling" its reading up and down, sampling its value less frequently will give us more stable data to work with.&lt;/p&gt;
&lt;p&gt;Now that blocking code is in place, we can consider the button fully "debounced".&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The actual number of times your code runs is limited by many things, and even in an ideal situation, it will likely never &lt;em&gt;actually&lt;/em&gt; run 48 million times per second. It might get close, 30 million, 10 million... It's still &lt;strong&gt;a lot&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The problem, as you will recall, is that while code is blocking, &lt;em&gt;nothing else is happening&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This can severely hamper our projects, especially as we graduate from simple "blinky" first steps and get into more complex applications. As we add more buttons, and additional types of sensors, we can't react to user input or changes in sensor reading while we're waiting for a button to stop bouncing. We can't update our outputs either. We can't refresh an LCD display, play a sound,  toggle an LED -- &lt;em&gt;nothing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We have to do &lt;em&gt;everything&lt;/em&gt; every 0.2 seconds when we block like this. Again, for something simple like our testing code, this is not a big deal. But imagine you are building a video game console, like the &lt;a class="reference external" href="https://arduboy.com/"&gt;Arduboy&lt;/a&gt;. 0.2 seconds is an &lt;em&gt;eternity&lt;/em&gt; when playing a video game. Your user will get frustrated really quickly - or be able to hit every enemy because they're essentially moving in slow-motion. Every frame has to be drawn, every input has to be read, every sprite has to be updated only when the code stops blocking, every 0.2 seconds.&lt;/p&gt;
&lt;p&gt;There's another tragic aspect to this: those 48 million cycles we have at our disposal are being &lt;em&gt;completely wasted&lt;/em&gt; while we block. We are throwing away processor cycles we could be using to do work. ðŸ’”&lt;/p&gt;
&lt;p&gt;Ok, so by now you're thoroughly convinced blocking is bad news. So what can we do instead to debounce our inputs?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="debouncing-options"&gt;
&lt;h2 id="debouncing options"&gt;Debouncing Options&lt;/h2&gt;
&lt;p&gt;We have a few viable options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;For buttons, we can use an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/RC_circuit"&gt;R/C filter circuit&lt;/a&gt; to clean the input (a.k.a. &lt;em&gt;hardware debouncing&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;We can use an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Integrated_circuit"&gt;integrated circuit, or IC&lt;/a&gt; that does debouncing, or input filtering for us.&lt;/li&gt;
&lt;li&gt;We can use &lt;a class="reference external" href="https://www.sparkfun.com/tutorials/326"&gt;interrupts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We can create a data structure that tracks the status over time (or &lt;strong&gt;state&lt;/strong&gt;), of our inputs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hardware debouncing is only really useful in situations where the debouncing needs to be &lt;em&gt;rock solid&lt;/em&gt;. It requires more components, which increases the cost (more of an issue in industry) and introduces more complexity (more of an issue for us as hobbyists). But even with really solid hardware debouncing, we &lt;em&gt;still&lt;/em&gt; need to be concerned with the realities of reading a digital input. Remember, what feels like a momentary press for a human being is an event that lasts many many processor cycles - the signal may be "clean", but we still have to be careful not to take action every single time we notice that clean signal reads "HIGH".&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;R/C ciruits might be overkill for button debouncing, but they are fundamental building blocks of electronics. You should spend some time reading about them and building some, you won't regret it.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Specialized button debouncing ICs are rare and tend to be expensive (the expensive part is again more a problem for industry, but the rare part is a big deal for us as hobbyists). For analog sensors, an IC like an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Analog-to-digital_converter"&gt;analog-to-digital converter&lt;/a&gt; could theoretically be used to reduce the sample frequency of a noisy input. We could even program another microcontroller to do debouncing for us.&lt;/p&gt;
&lt;p&gt;Again, these solutions are more expensive and add complexity. And &lt;em&gt;yet again&lt;/em&gt; we still have to be conscious of the fact that even a "clean" signal will be read many, many times per second by our main loop.&lt;/p&gt;
&lt;p&gt;Interrupts are extremely cool - you can configure the processor such that when a pin reads "HIGH", it triggers the execution of a predetermined chunk of code. The ATSAMD21 processor in our M0 boards allow for interrupts on nearly every pin. However, interrupt functionality is not currently exposed in CircuitPython ðŸ’”, so it's a non-starter for us.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;If you are interested, Adafruit has a &lt;a class="reference external" href="https://learn.adafruit.com/multi-tasking-the-arduino-part-2/overview"&gt;nice guide to interrupts on the Arduino platform&lt;/a&gt; available.&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="https://learn.adafruit.com/multi-tasking-the-arduino-part-1/overview"&gt;Part 1&lt;/a&gt; of the guide covers an alternative approach that is very similar to what we'll be using in this series.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Ultimately, tracking this so-called &lt;em&gt;state&lt;/em&gt; is really the best option most of the time - and as we've seen, even with other debouncing methods, we will still need to deal with it (we just didn't call it &lt;em&gt;state&lt;/em&gt; above ðŸ˜‰).&lt;/p&gt;
&lt;p&gt;In the next section, we'll start from the ground up and really dig into what state is all about. We'll see how it's ideal for cleaning inputs, and also how it opens up some really useful pattens for making our code cleaner and more reliable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basics-of-state"&gt;
&lt;h2 id="basics of state"&gt;Basics Of State&lt;/h2&gt;
&lt;p&gt;Let's start with basic definitions. &lt;em&gt;State&lt;/em&gt; is simply the status or phase of something at a given time. It's how you would describe something that can &lt;em&gt;transition&lt;/em&gt;, over time, from one &lt;em&gt;state&lt;/em&gt; to another.&lt;/p&gt;
&lt;p&gt;For example, water has three common states (referred to as &lt;em&gt;phases&lt;/em&gt;): gas (steam), solid (ice), liquid (usually just called &lt;em&gt;water&lt;/em&gt;).&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-states-of-water.png" style="width: 80%;"/&gt;
&lt;p&gt;State is a kind of abstraction that refers to bundles of properties (or &lt;em&gt;attributes&lt;/em&gt;) of something at a given time. Various factors can cause those attributes to change. When that happens the state &lt;em&gt;transitions&lt;/em&gt; from one state to another.&lt;/p&gt;
&lt;p&gt;For example, when water is brought to its boiling point of 100&amp;deg; C (212&amp;deg; F), it transitions into a gas. It becomes less dense, and given the opportunity, it will disperse throughout a space.&lt;/p&gt;
&lt;p&gt;Another way to say this is that water's &lt;em&gt;temperature attribute&lt;/em&gt; has changed to a value above 100&amp;deg;, and so the &lt;em&gt;state&lt;/em&gt; has &lt;em&gt;transitioned&lt;/em&gt; to "steam". Now that it's in the "steam" state, there are other attributes that have changed besides the temperature (its density, for one), and it has new attributes - it can do new things, like fill a space.&lt;/p&gt;
&lt;p&gt;The same is true for water condensing, melting, or freezing - the state changes as water's attributes change, and new attributes emerge.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;In programming, "properties" and "attributes" are often used interchangeably. We're settling on the term "attributes", since that's the term most commonly used in Python when talking about classes (which we'll get to later).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Water has multiple attributes in each state. We could record each of those attributes numerically - the temperature, the volume, the density - even attributes that are more binary (true/false) like "solid" and "liquid". Keep this in the back of your mind for now.&lt;/p&gt;
&lt;p&gt;Lets look at another example, this time from a area of life that lives and breathes metrics: &lt;strong&gt;sports&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="score-keeping-is-tracking-state"&gt;
&lt;h2 id="score keeping is tracking state"&gt;Score Keeping Is Tracking State&lt;/h2&gt;
&lt;p&gt;Keeping score during a sporting event is a way of tracking state. A performance happens, a ball is hit, a race ends, and the score is recorded.&lt;/p&gt;
&lt;p&gt;Here's a common type of simple scoreboard for sports like gymnastics:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-state-examples-01.png" style="width: 80%;"/&gt;
&lt;p&gt;It's a single score, from a single judge. This scoreboard scores from 1-10, with fractional values down to hundredths of a point. This score is 9.70.&lt;/p&gt;
&lt;p&gt;If we modeled the scoreboard in Python, we could use a single variable to store the score:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-state-examples-02.png" style="width: 80%;"/&gt;
&lt;p&gt;Here, we simply name the variable &lt;tt class="docutils literal"&gt;score&lt;/tt&gt;. If we were modeling a real gymnastics match, we might want to differentiate between different scores, since there will be one for each judge, and each participant:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;entrant1_judge1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.70&lt;/span&gt;
&lt;span class="n"&gt;entrant1_judge2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.45&lt;/span&gt;
&lt;span class="n"&gt;entrant1_judge3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;

&lt;span class="n"&gt;entrant2_judge1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;8.75&lt;/span&gt;
&lt;span class="n"&gt;entrant2_judge2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.00&lt;/span&gt;
&lt;span class="n"&gt;entrant2_judge3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;8.80&lt;/span&gt;

&lt;span class="n"&gt;entrant3_judge1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;
&lt;span class="n"&gt;entrant3_judge2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.99&lt;/span&gt;
&lt;span class="n"&gt;entrant3_judge3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.98&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This straight-forward, but a bit unwieldy. We're only set up for three judges, and three entrants, and a &lt;em&gt;single&lt;/em&gt; match. In a tournament there may be 10 matches, and there could be dozens of entrants. That's a lot of variables to track, and all we're tracking is the scores. Imagine if we also wanted to give the entrants a name or id number, or track their vital statistics! What if we wanted to track how these values change over time?&lt;/p&gt;
&lt;p&gt;We can simplify and generalize things a bit by using Python's built-in data structures.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;If you aren't familiar with Python's built-in data structures, Adafruit has put together a &lt;a class="reference external" href="https://learn.adafruit.com/basic-datastructures-in-circuitpython/overview"&gt;simple guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There are many, many ways to model a match like this, here's just one using lists and dictionaries:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="s2"&gt;"judge1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s2"&gt;"judge2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s2"&gt;"judge3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="s2"&gt;"judge1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;8.75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s2"&gt;"judge2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s2"&gt;"judge3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;8.80&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="s2"&gt;"judge1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s2"&gt;"judge2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s2"&gt;"judge3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.98&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;To access the second judge's score for the third entrant in the first match (remember list indexes start with 0):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"judge2"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So that works for modeling something like a gymnastics match, where you have somewhat similar data, but it is recorded multiple times.&lt;/p&gt;
&lt;p&gt;A class might be better, since we can model what a "match" or an "entrant" looks like &lt;em&gt;once&lt;/em&gt;, and then make new instances as our tournament progresses (we'll talk about classes in depth shortly).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="global-state-and-a-better-analogy"&gt;
&lt;h2 id="global state and a better analogy"&gt;Global State And A Better Analogy&lt;/h2&gt;
&lt;p&gt;In a microcontroller project, we're dealing more with what might be called &lt;em&gt;global state&lt;/em&gt; - a single group of attributes that are used by the whole project. We need to track our buttons, digital pins and sensors in one place, and use the values throughout our project. It would be best to have a &lt;em&gt;single source of truth&lt;/em&gt;, or one place to look for information about what state our project is in.&lt;/p&gt;
&lt;p&gt;With the gymnastics example, we've covered capturing multiple states, and we've stored them in multiple places (either individual variables or a more complex structure, but each score is separate).&lt;/p&gt;
&lt;p&gt;In a microcontroller project, our state is a bit different. Since we have a fixed number of buttons, we just need to know if they are pressed or not. Our gymnastics example was more like a ledger, and we need something different.&lt;/p&gt;
&lt;p&gt;A better analogy that more closely models our requirements is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Scoreboard"&gt;scoreboard&lt;/a&gt; from a team-based sport. A sports arena/field will typically have one giant board that tracks the state of the entire game - all relevant information you need to understand the progress of the game is available in one place. It's globally accessible, you can see it from any seat - you just need to look at it.&lt;/p&gt;
&lt;p&gt;Here's a contrived example of a typical scoreboard from an American baseball stadium:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-state-examples-03.png" style="width: 80%;"/&gt;
&lt;p&gt;It has various regions with indicators, usually lights, and numbers representing the state of the game. Each one represents an independent piece of important information. That information changes as the game progresses. Outs are made, points (runs) are scored by each team, innings go by (there are 9 in a typical baseball game). Other bits of data are recorded too - &lt;em&gt;balls&lt;/em&gt;, &lt;em&gt;strikes&lt;/em&gt;, &lt;em&gt;outs&lt;/em&gt;. These are used to move the game along in various ways.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;The nuances and rules for American baseball are not relevant to our discussion. However, if you aren't familiar with the game, and want to dig in, the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Baseball"&gt;wikipedia article&lt;/a&gt; is the place to start.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can model a scoreboard as a series of individual variables, like we did initially for the gymnastics match:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-state-examples-04.png" style="width: 80%;"/&gt;
&lt;p&gt;This is totally viable, and cleaner than doing the same thing for a gymnastics tournament. Since a baseball game changes state over time instead of accumulating multiple scores, having simple global variables for each state attribute we care about makes sense.&lt;/p&gt;
&lt;p&gt;There are alternative ways of modeling global state like this, however. The two primary ones are: using a &lt;em&gt;dictionary&lt;/em&gt; and using a &lt;em&gt;class&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A dictionary in Python is a key-value mapping, also known as an &lt;em&gt;associative array&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, or &lt;em&gt;hashmap&lt;/em&gt;. We worked with these earlier in the gymnastics example.&lt;/p&gt;
&lt;p&gt;Data is stored by name in a simple table. Here's what our scoreboard looks like as a dictionary:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scoreboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ball"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"out"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"strike"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"guest_score"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"inning"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"home_score"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We access the various values like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;outs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scoreboard&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"out"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;scoreboard&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"inning"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;scoreboard&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"guest_score"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;So we have a single, global state variable, &lt;tt class="docutils literal"&gt;scoreboard&lt;/tt&gt;, that contains all of the information about the game. As the game progresses, &lt;tt class="docutils literal"&gt;scoreboard&lt;/tt&gt;'s members are updated.&lt;/p&gt;
&lt;p&gt;This has the advantage over using a series of variables in that it is more compact, but flexible - we're only using up one variable name, and the names of our state attributes can be almost anything - words with spaces, dashes, even other objects.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;For an object to be used as a dictionary key, it must be &lt;a class="reference external" href="https://docs.python.org/3.6/glossary.html#term-hashable"&gt;hashable&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Another advantage is that we don't have to worry about collisions with other variable names - say we're recording the number of balls scored in a variable called &lt;tt class="docutils literal"&gt;balls&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;ball&lt;/tt&gt;, and we're also tracking the number of baseballs that have been used in the game. If we called that variable &lt;tt class="docutils literal"&gt;balls&lt;/tt&gt; as well, it would conflict with the special state variable that has a totally different meaning.&lt;/p&gt;
&lt;p&gt;Since the dictionary is self-contained, we only have to worry about conflicts between key names within it - we don't have to be concerned with what's going on in the rest of the code.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I admit this example is a bit contrived. You may be thinking "well, why can't we just name it &lt;tt class="docutils literal"&gt;baseballs&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;balls_used&lt;/tt&gt; and call it a day?"&lt;/p&gt;
&lt;p&gt;This is true, and would be a totally acceptable solution. But keeping all of your variables separate in the same scope can get really messy over time.&lt;/p&gt;
&lt;p&gt;As the project progresses, say you also need to track baseballs lost, and baseballs that were caught by fans. Again, you could add more global variables with names like &lt;tt class="docutils literal"&gt;balls_caught&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;balls_lost&lt;/tt&gt;. But now we have 4 variables. Some are related (referring to actual baseballs) and one is completely different (&lt;tt class="docutils literal"&gt;balls&lt;/tt&gt;, referring to a kind of score that affects the progress of the game).&lt;/p&gt;
&lt;p&gt;Its a good idea to think about how you can group similar data together. This reduces the contortions you will have to go through to come up with names, makes the code cleaner, and makes the data model make more sense.&lt;/p&gt;
&lt;p&gt;We've already decided to use a dictionary for the game state, so we can do the same to track this equipment-related information:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;balls_lost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;balls_used&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;balls_caught&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# -- VS --&lt;/span&gt;

&lt;span class="n"&gt;balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;baseballs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'caught_by_fans'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'lost'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'used'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# or even&lt;/span&gt;
&lt;span class="n"&gt;balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;equipment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'balls'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;'caught_by_fans'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'lost'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'used'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;'bats'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'athletic_cups'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'shoes'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;As you can see, modeling the data this way gives us a lot more flexibility.&lt;/p&gt;
&lt;p&gt;It sets us up for modeling more complex things, like the total amount of equipment used in the game.&lt;/p&gt;
&lt;p&gt;The context makes simpler variable and key names make more sense. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;equipment['balls']['lost']&lt;/span&gt;&lt;/tt&gt; has more contextual information than &lt;tt class="docutils literal"&gt;balls_lost&lt;/tt&gt;.&lt;/p&gt;
&lt;p class="last"&gt;This is all very basic Python stuff, but I want to make sure you're thinking about different ways to model your data. It's one of the foundations to writing well-behaved, easy-to-read code and something you usually learn over time. Thinking about it critically now, if you're a newer programmer, gives you a big head start on becoming a great engineer. ðŸ’–&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Dictionaries are limited in that they are strictly mappings of some key to some value. There are times when you will need to add more functionality, or reproduce a data structure multiple times. That's where &lt;em&gt;classes&lt;/em&gt; come in.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;class&lt;/em&gt;, in the simplest terms, is a data structure that contains &lt;strong&gt;variables&lt;/strong&gt; (called &lt;em&gt;attributes&lt;/em&gt; in Python, you may see them referred to as &lt;em&gt;properties&lt;/em&gt; as well), and &lt;strong&gt;functions&lt;/strong&gt; (called &lt;em&gt;methods&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;What makes classes special is that they are used as a blueprint for creating new objects. You define what your class looks like once, and then create &lt;em&gt;instances&lt;/em&gt; of your class that store your data.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;There is a &lt;em&gt;ton&lt;/em&gt; more to classes in Python. This is called &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;Object-Oriented Programming&lt;/a&gt; (OOP), and is a whole school of thought (or &lt;em&gt;paradigm&lt;/em&gt;) unto itself.&lt;/p&gt;
&lt;p&gt;I'm not going to go into too much detail here, since there is much to discuss.&lt;/p&gt;
&lt;p class="last"&gt;A good place to start is &lt;a class="reference external" href="https://docs.python.org/3/tutorial/classes.html"&gt;the python OOP tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For our purposes, classes provide a way of reasoning about state in a self-contained manner. The class contains all of our state variables as &lt;em&gt;attributes&lt;/em&gt;, and it has &lt;em&gt;methods&lt;/em&gt; that provide functionality. We can extend the class if we need to, and can even use it to handle global state for multiple, similar parts of our project.&lt;/p&gt;
&lt;p&gt;Attributes are like our state variables - just data that's being stored.&lt;/p&gt;
&lt;p&gt;Methods are just functions that are part of a class. What sets them apart is their context. Put simply, a &lt;em&gt;function&lt;/em&gt; runs within the Python &lt;em&gt;module&lt;/em&gt; where its defined. A &lt;em&gt;method&lt;/em&gt; runs within the instance of the &lt;em&gt;class&lt;/em&gt; where it was defined.&lt;/p&gt;
&lt;p&gt;Another important distinction is that methods &lt;em&gt;always&lt;/em&gt; take an extra parameter, that, by convention, we call &lt;tt class="docutils literal"&gt;self&lt;/tt&gt;. That parameter contains the &lt;em&gt;instance&lt;/em&gt; that the method is being called on. An instance is essentially an "active" copy of the class. Using architecture as an analogy, if the class is the &lt;em&gt;blueprint&lt;/em&gt;, the instance would be the &lt;em&gt;building&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What it means, in practical terms, is having the instance passed as an argument gives your method access to the data and other methods that the instance contains. Inside of a method, you normally wouldn't know which instance the method was being called on. &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; gives us that bridge from the class to the instance.&lt;/p&gt;
&lt;p&gt;Here's a simple example of a class that represents our baseball scoreboard:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScoreBoard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"guest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"home"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_innings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"home"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"guest"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_inning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inning&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inning&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tied&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Game is over"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra_innings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;Since we've added some behavior that reflects some of the basic rules of the game of baseball, some brief explanations of what we're modeling are in order before we dig into the code.&lt;/p&gt;
&lt;p&gt;In baseball, there are nine &lt;em&gt;innings&lt;/em&gt;. The teams switch sides every inning. An inning lasts until three outs are scored.&lt;/p&gt;
&lt;p&gt;If the score is tied during the last inning, the game is said to be in "extra innings" and the game continues on until three more outs are scored, and the score is no longer tied.&lt;/p&gt;
&lt;p&gt;This code represents a fairly basic example of a Python class. The &lt;tt class="docutils literal"&gt;next_inning()&lt;/tt&gt; method drives the game forward - every time it's called, it checks the number of outs and the score and increases the inning number if necessary. It also handles the concept of "extra innings" and overtime due to a tie.&lt;/p&gt;
&lt;p&gt;We've modeled it this way because it's similar to the state management code we'll be writing below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Line 1&lt;/strong&gt; sets the name of the class.&lt;/p&gt;
&lt;p&gt;Every method defined in the class will be passed at least one parameter, &lt;tt class="docutils literal"&gt;self&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; is a reference to the current instance of the class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 2-12&lt;/strong&gt; define the &lt;em&gt;constructor&lt;/em&gt; of the class, which is always named &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt;. This method is called only once, when the class instance is initially created.&lt;/p&gt;
&lt;p&gt;In Python, a class method name surrounded by two underscores on each side is considered "magic" - it has special meaning, like how this method is the constructor.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;Magic methods are a extremely useful feature of Python, and are worth researching fully.&lt;/p&gt;
&lt;p class="last"&gt;Check out this &lt;a class="reference external" href="https://rszalski.github.io/magicmethods/"&gt;comprehensive view of magic methods in Python&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The constructor is used to establish all of the default values for the instance attributes. That's what's occurring on &lt;strong&gt;lines 3-12&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Instance methods&lt;/em&gt; are defined on &lt;strong&gt;lines 14-15&lt;/strong&gt; (&lt;tt class="docutils literal"&gt;tied()&lt;/tt&gt;), and &lt;strong&gt;17-24&lt;/strong&gt; (&lt;tt class="docutils literal"&gt;next_inning()&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Instance methods are methods that operate on an instance of a class. A reference to the instance is passed to all instance methods, named &lt;tt class="docutils literal"&gt;self&lt;/tt&gt;. We call them &lt;em&gt;instance&lt;/em&gt; methods to differentiate them from &lt;em&gt;class methods&lt;/em&gt;. Class attributes are explained a bit later on in this article. The thing to know about class &lt;em&gt;methods&lt;/em&gt; is that instead of the first parameter being a reference to the &lt;em&gt;instance&lt;/em&gt;, its a reference to the &lt;em&gt;class&lt;/em&gt;.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Most of the time you won't have to deal with class methods. In fact, to use them, you must decorate a method with the special &lt;tt class="docutils literal"&gt;@classmethod&lt;/tt&gt; decorator.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;tied()&lt;/tt&gt; will returns &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; if the game is tied, and &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; if not.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;next_inning()&lt;/tt&gt; advances the inning, and ends the game when we reach inning number 9. That is, unless its a tied game, then it sets &lt;tt class="docutils literal"&gt;self.extra_innings&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;, and continues counting.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;tied()&lt;/tt&gt; is a typical utility method, used by either someone interacting with the instance, or by the instance itself, to do some calculations based on the current values of the instance attributes.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;next_inning()&lt;/tt&gt; is used to &lt;em&gt;encapsulate&lt;/em&gt; all of the logic that goes into determining if the game has ended or not, as well as doing any accounting necessary to move on to the next inning.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's how we interact with it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board = ScoreBoard()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.out = 3&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.inning&lt;/span&gt;
&lt;span class="go"&gt; 2&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.tie()&lt;/span&gt;
&lt;span class="go"&gt; False&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.scores["guest"] = 8&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.scores["home"] = 8&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.tie()&lt;/span&gt;
&lt;span class="go"&gt; True&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.inning&lt;/span&gt;
&lt;span class="go"&gt; 10&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.extra_innings&lt;/span&gt;
&lt;span class="go"&gt; True&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.scores["home"] = 9&lt;/span&gt;
&lt;span class="go"&gt; &amp;gt;&amp;gt;&amp;gt; board.next_inning()&lt;/span&gt;
&lt;span class="go"&gt; Game is over&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The attributes of this class are the same values we were storing in variable above, plus one more, &lt;tt class="docutils literal"&gt;extra_innings&lt;/tt&gt;. We opted to use a dictionary to store the scores, just to illustrate that you can use any sort of data as an attribute.&lt;/p&gt;
&lt;p&gt;The methods we've defined are &lt;tt class="docutils literal"&gt;tied()&lt;/tt&gt;, that tells us if the score is tied, and &lt;tt class="docutils literal"&gt;next_inning()&lt;/tt&gt;, which moves the game along.&lt;/p&gt;
&lt;p&gt;Note how the methods can call each other, and access all of the instance data, via &lt;tt class="docutils literal"&gt;self&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We have an example of some complex logic using a combination of instance attributes and methods: when we call the &lt;tt class="docutils literal"&gt;next_inning()&lt;/tt&gt; method, we have some logic to check if the game is tied (using the &lt;tt class="docutils literal"&gt;tied()&lt;/tt&gt; method) at the 10th inning. If it is, the &lt;tt class="docutils literal"&gt;extra_innings&lt;/tt&gt; flag is set to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;. Otherwise, the game is over.&lt;/p&gt;
&lt;p&gt;So using instance methods and attributes, &lt;tt class="docutils literal"&gt;extra_innings()&lt;/tt&gt; acts to alter the instance attributes.&lt;/p&gt;
&lt;p&gt;This is something special that classes give us over other ways of modeling state. We have a fully &lt;em&gt;encapsulated&lt;/em&gt; state object - everything we do with state, and all the data we care about, lives inside that object, represented by the &lt;tt class="docutils literal"&gt;ScoreBoard&lt;/tt&gt; class, in its attributes. We perform operations on those attributes using the class' methods.&lt;/p&gt;
&lt;p&gt;We can treat an instance of the &lt;tt class="docutils literal"&gt;ScoreBoard&lt;/tt&gt; class as a "black box" - we don't need to know the intimate details of how it works to interact with it.&lt;/p&gt;
&lt;p&gt;Now lets look at how we can work this concept into a microcontroller project. We'll start by bringing things back to basics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions-and-what-s-next"&gt;
&lt;h2 id="conclusions and what's next"&gt;Conclusions And What's Next&lt;/h2&gt;
&lt;p&gt;In this installment of the series, we've learned a lot about what state is, and how to model it in Python. We've modeled state using single variables, complex data structures, and classes.&lt;/p&gt;
&lt;p&gt;We've discussed a problem that we can solve with state, button debouncing.&lt;/p&gt;
&lt;p&gt;In the next article, we'll actually apply what we've learned to debounce buttons without blocking, do some more OOP in CircuitPython, and explore what state can do for us in more detail.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Good news! You don't have to wait, &lt;a class="reference external" href="/circuitpython-state-part-3.html"&gt;part 3 is up now!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="circuitpython"></category><category term="python"></category><category term="hardware"></category><category term="state"></category></entry><entry><title>State And Events In CircuitPython: Part 1: Setup</title><link href="/circuitpython-state-part-1.html" rel="alternate"></link><published>2018-08-27T13:01:00-04:00</published><updated>2018-08-27T13:01:00-04:00</updated><author><name>jjmojojjmojo</name></author><id>tag:None,2018-08-27:/circuitpython-state-part-1.html</id><summary type="html">&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;This is the first article in a series that explores concepts of &lt;em&gt;state&lt;/em&gt; in CircuitPython.&lt;/p&gt;
&lt;p&gt;In this installment, we discuss the platform we're using (both CircuitPython and the Adafruit M0/M4 boards that support it), and build a simple circuit for demonstration purposes. We'll also talk a bit about &lt;em&gt;abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This series is intended for people who are new to Python, programming, and/or microcontrollers, so there's an effort to explain things as thoroughly as possible. However, experience with basic Python would be helpful.&lt;/p&gt;
</summary><content type="html">&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;p&gt;This is the first article in a series that explores concepts of &lt;em&gt;state&lt;/em&gt; in CircuitPython.&lt;/p&gt;
&lt;p&gt;In this installment, we discuss the platform we're using (both CircuitPython and the Adafruit M0/M4 boards that support it), and build a simple circuit for demonstration purposes. We'll also talk a bit about &lt;em&gt;abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This series is intended for people who are new to Python, programming, and/or microcontrollers, so there's an effort to explain things as thoroughly as possible. However, experience with basic Python would be helpful.&lt;/p&gt;

&lt;div class="section" id="the-project-the-platform"&gt;
&lt;h2 id="the project, the platform"&gt;The Project, The Platform&lt;/h2&gt;
&lt;p&gt;All of the code and thought that in this article has its roots in a personal project. I wanted to make a low-impact tool to help me mouse more efficiently.&lt;/p&gt;
&lt;p&gt;I found the answer in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Capacitive_sensing"&gt;capacative touch&lt;/a&gt;. This is the same technology behind modern cellphones and touchscreens.&lt;/p&gt;
&lt;p&gt;I was psyched when I found out that the Adafruit M0 series of microcontroler boards provided up to &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-feather-m0-express-designed-for-circuit-python-circuitpython/circuitpython-cap-touch"&gt;7 touch capable pins&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; they can become USB interface devices that can emulate a mouse or keyboard (and more). With these boards, there's no need for an external board or IC for touch or USB control, all I need is an M0, some conductive objects, and some code and I can do &lt;a class="reference external" href="https://learn.adafruit.com/capacitive-touch-unicorn-horn/introduction"&gt;some insanely cool stuff&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;The M4 boards &lt;strong&gt;do not&lt;/strong&gt; support capacitive touch.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;These boards also provide power management either built-in or it can be &lt;a class="reference external" href="https://www.adafruit.com/product/2124"&gt;easily added&lt;/a&gt;. It makes it easy to build a portable project that runs off of batteries, but still can be powered from the USB port (and in the case of a rechargable LiPoly battery pack, the USB port can be used to charge it as well).&lt;/p&gt;
&lt;p&gt;What makes these boards a really killer platform for hobby projects is that the M0/M4 series also support &lt;strong&gt;CircuitPython&lt;/strong&gt;, Adafruit's fork of MicroPython for these particular ARM controllers. It's &lt;em&gt;Python&lt;/em&gt;, and one of the languages I'm most comfortable with.&lt;/p&gt;
&lt;p&gt;Besides my personal preference, Python is a great language for learning, rapid prototyping, and general computing.&lt;/p&gt;
&lt;p&gt;CircuitPython is being developed with the express goal of making MicroPython more accessible to new programmers. Because of this, it diverges a bit from MicroPython. MicroPython has already diverged a bit from standard Python as well.&lt;/p&gt;
&lt;p&gt;The differences aren't significant enough to hinder people new to Python and/or microcontrollers, but if you already know MicroPython, or Python it might be a bit of an adjustment.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;The full list of differences:&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://circuitpython.readthedocs.io/en/3.x/#differences-from-micropython"&gt;CircuitPython vs MicroPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.micropython.org/en/latest/pyboard/genrst/index.html"&gt;MicroPython vs Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;That aside, this is a really exciting platform. It stands to provide a gateway for non-programmers to get into computer science and electrical engineering. It's a great time to be alive!&lt;/p&gt;
&lt;p&gt;It's not all ðŸŒˆ's and ðŸ¦„'s though. In spite of generally being a great platform, CircuitPython has some limitations, that everyone should be aware of. A much more powerful processor is required to run any flavor of MicroPython. Even with more power, the interpreted nature of Python makes code run, overall, slower than comparable compiled Arduino code.&lt;/p&gt;
&lt;p&gt;Because a Python interpreter has to be constructed to execute Python code, the platform is also very RAM (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;random access memory&lt;/a&gt;) intensive. RAM is a precious resource on any microcontroller, and CircuitPython eats up a lot of working memory before our program even runs. People experienced with microcontrollers will be used to dealing with this, but because of the interpreter, you're at a disadvantage before your code is even loaded. Programs will start to run out of memory when they approach 150-200 lines of code. That includes external libraries. That's not a lot to work with.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;We'll cover ways of reducing our memory footprint in this article. It's actually not as bad as it might seem.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Further, Python code, especially raw text, takes up a lot of space in another precious resource, &lt;em&gt;flash memory&lt;/em&gt;. This is where our program code is stored. Again, this is nothing shocking if we've done any embedded development before, but using Python puts us at a bit of a disadvantage - our code can only be compiled down to an intermediary format, it can't be turned into compact machine code, so we have a lot less space to work with.&lt;/p&gt;
&lt;p&gt;Beyond this, Adafruit has made it pretty clear that CircuitPython is geared toward &lt;em&gt;beginners&lt;/em&gt;, and as such their priorities for adding features and the general design of the platform has that audience at the forefront. This can cause some frustration if you want to use a MicroPython or Arduino feature that hasn't been ported to CircuitPython, access an on-board peripheral or use an external IC/breakout board that Adafruit doesn't yet support.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This sounds way more dire than it is, and is changing all the time. CircuitPython is still relatively new and is under constant development. ðŸ’– Adafruit has done an amazing job of supporting the onboard peripherals and the chips and breakout boards they sell in CircuitPython.&lt;/p&gt;
&lt;p class="last"&gt;I don't want to downplay what they've accomplished, but if you are coming from other MicroPython boards or the Arduino, or you aspire to build projects that use the full capacity of your microcontroller, you should be aware of what you're getting into.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With all that in mind, I'm happy to say Adafruit has done a great job overcoming the worst of these limitations with their M0 boards. Using the ARM based processors means much faster processor cycles - the M0 runs at 48Mhz, the M4 at 120Mhz (verses 8Mhz or 16Mhz for most common Arduino-compatible boards). There's a slowdown running Python on these boards, but for most applications it won't even be remotely noticeable.&lt;/p&gt;
&lt;p&gt;These chips have a large amount of RAM to begin with, 32kb for the M0 and a whopping &lt;em&gt;192kb&lt;/em&gt; for the M4 (compared to 2Kb for most common/classic Arduino chips).&lt;/p&gt;
&lt;p&gt;To address the issue of flash memory, Adafruit provides the &lt;em&gt;express&lt;/em&gt; series of M0/M4 boards - they add in 2MB of extra flash memory that &lt;em&gt;just works&lt;/em&gt; for storing Python code (you can use it as general storage as well).&lt;/p&gt;
&lt;p&gt;In practice, with the right development boards, the advantages of CircuitPython far outweigh the downsides. In exchange for slightly more expensive components, limited low-level accessibility, and sometimes having to write less-than-elegant Python, we get an incredibly powerful platform for rapid prototyping. I've been using it for a few months now and have found it to be exceedingly capable.&lt;/p&gt;
&lt;p&gt;What makes most of these concerns completely moot is that Adafruit's CircuitPython-compatible boards fully support the Arduino IDE. So if we can't work within the limitations of CircuitPython, we can always switch to the Arduino tooling, and unlock the full potential of the M0/M4 chips.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="audience"&gt;
&lt;h2 id="audience"&gt;Audience&lt;/h2&gt;
&lt;p&gt;This guide is written for people who know basic Python, and have done rudimentary things with microcontrollers, like control LEDs and read from momentary switches.&lt;/p&gt;
&lt;p&gt;It doesn't assume you are a Python expert, or have done anything too elaborate with microcontrollers - but it will expose you to some advanced concepts.&lt;/p&gt;
&lt;p&gt;It's a good idea to work through &lt;a class="reference external" href="https://learn.adafruit.com/welcome-to-circuitpython/overview"&gt;Adafruit's "Welcome To CircuitPython"&lt;/a&gt; guide before trying to dig into the topics covered here, but it's not necessary.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;It wouldn't hurt to also work through &lt;a class="reference external" href="https://learn.adafruit.com/circuitpython-essentials"&gt;CircuitPython Essentials&lt;/a&gt; as well!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This series tries to dive really deep into details when exploring the concepts behind the code being developed. There are line-by-line explanations of each code example. So don't be afraid to give this guide a shot, even if you're really new to microcontrollers.&lt;/p&gt;
&lt;p&gt;Please feel free to &lt;a class="reference external" href="/pages/contact.html"&gt;contact the author&lt;/a&gt; with questions, corrections, or suggestions on how to make this series more accessible!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="demo-project"&gt;
&lt;h2 id="demo project"&gt;Demo Project&lt;/h2&gt;
&lt;p&gt;To illustrate state in action, I've devised a simple, but not overly contrived demonstration project.&lt;/p&gt;
&lt;p&gt;It consists of two buttons, a single one-color LED, and a single "addressable" RGB LED. I've chosen these particular components because they are easy to obtain and hook up. In fact, the single LED and RGB LED (a DotStar or NeoPixel depending on the board) come integrated on all CircuitPython-capable boards.&lt;/p&gt;
&lt;div class="centered docutils container"&gt;
&lt;img alt="" src="/images/circuitplayground-express-closeup-neopixel-marked.png" style="width: 20%;"/&gt;
&lt;img alt="" src="/images/itsybitsy-m0-express-closeup-dotstar-marked.png" style="width: 20%;"/&gt;
&lt;img alt="" src="/images/trinket-m0-closeup-dotstar-marked.png" style="width: 20%;"/&gt;
&lt;img alt="" src="/images/gemma-m0-closeup-dotstar-marked.png" style="width: 20%;"/&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;On the CircuitPlayground, even the buttons are already integrated!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The features of the demo project are as follows:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Phase 1:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;One button will control the rate of blink of the red LED.&lt;/li&gt;
&lt;li&gt;The other button will turn the red LED on or off - it will not affect the blink rate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Phase 2:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;The functionality of Phase 1 will continue, except the RGB LED will blink as well. The "rate button" will change the blink rate of both LEDs.&lt;/li&gt;
&lt;li&gt;Pressing both buttons will change the color of the RGB LED.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Phase 3:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Functionality of Phase 2 will persist, except holding the other button will determine if the rate button is changing the blink rate of the RGB LED or the red LED. If it's held, the RGB LED rate is changed. If It's not held, the red LED rate is changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;This is a fairly simple project but because of the complex button logic, it will really put our state and event code through its paces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="materials"&gt;
&lt;h2 id="materials"&gt;Materials&lt;/h2&gt;
&lt;p&gt;If you'd like to follow along, you will need the following items:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A CircuitPython-capable development board (M0/M4 series, express recommended).&lt;/li&gt;
&lt;li&gt;Two momentary switches (buttons).&lt;/li&gt;
&lt;li&gt;A micro-USB cable.&lt;/li&gt;
&lt;li&gt;Connectors (jumper cables, alligator clips, solid-core wire; specifics will depend on which board you are using).&lt;/li&gt;
&lt;li&gt;A breadboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can get all of these items from Adafruit, &lt;a class="reference external" href="https://www.adafruit.com/wishlists/467781"&gt;here's a list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've also sourced them and similar ones from Mouser, to give you some idea of possible substitutions: &lt;a class="reference external" href="https://www.mouser.com/ProjectManager/ProjectDetail.aspx?AccessID=b9d0704608"&gt;shared cart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Amazon resellers will generally carry most of these things, even the Adafruit boards. It's a good idea to shop around, since there's a large gradient between cost, available options, shipping, and quality.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I do not do affiliate links and do not endorse any particular storefront.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My point in providing saved carts and wishlists is to help you find what you need.&lt;/p&gt;
&lt;p class="last"&gt;ðŸ’– That said, if given the opportunity, I will go on about Adafruit's quality and fast shipping, and this is based soley on my personal experiences with their online store and products. ðŸ¦„ ðŸ’–&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-development-board"&gt;
&lt;h3&gt;The Development Board&lt;/h3&gt;
&lt;p&gt;Any of the M0 or M4 based boards &lt;a class="reference external" href="https://www.adafruit.com/category/957"&gt;sold by Adafruit&lt;/a&gt; should be compatible with the code in this article.&lt;/p&gt;
&lt;p&gt;I am fortunate to own, in part due to recent attendance at PyCon 2018, &lt;em&gt;four&lt;/em&gt; examples of the M0 boards, and have tested the code on each:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-m0-boards-2.png" style="width: 80%;"/&gt;
&lt;p&gt;From left to right, we have
the &lt;a class="reference external" href="https://www.adafruit.com/product/3333"&gt;CircuitPlayground Express&lt;/a&gt;,
the &lt;a class="reference external" href="https://www.adafruit.com/product/3727"&gt;ItsyBitsy M0 Express&lt;/a&gt;,
the &lt;a class="reference external" href="https://www.adafruit.com/product/3500"&gt;Trinket M0&lt;/a&gt;,
and the &lt;a class="reference external" href="https://www.adafruit.com/product/3500"&gt;GEMMA M0&lt;/a&gt;. There's also a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Quarter_(United_States_coin)"&gt;quarter&lt;/a&gt; for scale. On the whole, these things are &lt;em&gt;tiny&lt;/em&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;img alt="" class="align-right" src="/images/gemma-m0-closeup-obverse.png" style="width: 20%;"/&gt;
&lt;p&gt;The GEMMA M0 I have is a special edition that was included in the SWAG bag at PyCon 2018 in Cleveland Ohio. It's functionally identical to the GEMMA you get from the Adafruit shop but it's a different color and has a special Pycon 2018 marking on the back.&lt;/p&gt;
&lt;p class="last"&gt;There was not a lot of fanfare about it, but I did find a &lt;a class="reference external" href="https://www.youtube.com/watch?v=71eAnJeQu2U"&gt;video by Dan Bader&lt;/a&gt; talking about it, and a great &lt;a class="reference external" href="https://bigl.es/friday-fun-adafruit-gemma-m0-and-neopixels/"&gt;blog post by Les Pounder&lt;/a&gt; putting it through its paces.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Which board should you use? It depends on your application, as each board has it's strengths.&lt;/p&gt;
&lt;p&gt;The GEMMA, for example, is designed for wearable tech projects - it has a battery hookup and power regulator, as well as an on/off switch. The Trinket is absolutely lilliputian in its scale and a farily basic board. Both the GEMMA and Trinket have limited pins available. The ItsyBitsy and CircuitPlayground, being express boards, have extra flash memory. The CircuitPlayground has wearable features like the GEMMA, but it has a million nifty peripherals built in. It exposes a relatively small number of pins. In contrast, the ItsyBitsy is fairly barebones like the Trinket but has a &lt;em&gt;lot&lt;/em&gt; of pins available.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.adafruit.com/category/946"&gt;Feather boards&lt;/a&gt; (not pictured) have a ton of great built-in peripherals provide a standard platform for expansion boards called "&lt;a class="reference external" href="https://www.adafruit.com/category/945"&gt;wings&lt;/a&gt;". They are a great, super-compact alternative to the old-school Arduino and Arduino Shield platform. I have an ESP8266-based Feather and one based on the ATmega32u4 with bluetooth LE, and really like the platform.&lt;/p&gt;
&lt;p&gt;Speaking of Arudino shields, Adafruit also makes an M0 board that's in the same form factor as the original Arduino, called the &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-metro-m0-express-designed-for-circuitpython"&gt;Metro M0 Express&lt;/a&gt;. If you've already invested in a lot of Arduino shields, this is the board for you.&lt;/p&gt;
&lt;p&gt;In any case, &lt;strong&gt;I would highly recommend doing any initial development on the CircuitPlayground Express&lt;/strong&gt;. It has a dizzying array of peripherals built in, plus battery and power regulation, along with a large number of easy-to-work-with pads - it's appropriate for wearable projects as well as more traditional applications. It's easy to migrate to a smaller/less featureful board when a project starts to really come together.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;If your budget allows, and especially if you are just starting out, I'd suggest springing for the &lt;a class="reference external" href="https://www.adafruit.com/product/2769"&gt;Circuit Playground Express Advanced Pack&lt;/a&gt;. I had a couple of M0 boards and a lot of miscellaneous breakout boards before I picked up this kit, and I wish I had started with it instead.&lt;/p&gt;
&lt;p class="last"&gt;It gives you everything you need to explore the possibilities of the platform (save maybe some wire and a breadboard or two), without having to solder anything!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A few things to keep in mind with regard to the "lilypad" style boards (GEMMA, CircuitPlayground; so-called after one of the first "wearable" platforms, &lt;a class="reference external" href="https://store.arduino.cc/usa/lilypad-arduino-main-board"&gt;The Adruino LilyPad&lt;/a&gt;) verses the "standard" ones (Trinket, ItsyBitsy):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lilypad-style boards do not require any soldering or other assembly - you can just unpack them, plug in a USB cable, and start coding. You will typically use alligator clips, or conductive thread, to connect them to other components.&lt;/li&gt;
&lt;li&gt;Standard boards will require some soldering. You'll either have to solder wires directly to the pin pads on the perimeter of the board, or use the provided headers.&lt;/li&gt;
&lt;li&gt;You can, however, solder things to the lilypad-style pads for a sturdier connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="connectors"&gt;
&lt;h3&gt;Connectors&lt;/h3&gt;
&lt;p&gt;Here's an overview of the sorts of connectors used in the demo circuits below, and the sort of things to look for when buying kits or stocking out your workbench.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;There are many ways to connect components to microcontrollers! This is just a sampling of some common ones, and the ones I used in the various demo circuits illustrated below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jumper-wires"&gt;
&lt;h4&gt;Jumper Wires&lt;/h4&gt;
&lt;p&gt;The most common way to connect components in projects like ours is to use "jumper" wire - the term refers to the fact that the wire shorts (jumps) two points.&lt;/p&gt;
&lt;p&gt;These are essential when working with breadboards.&lt;/p&gt;
&lt;p&gt;You can make your own jumper wires using cut and stripped lengths of wire. The best to use for breadboard work is 22-gauge insulated wire, but anything that's conductive and between 18 and 24-guage should work.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/solid-core-jumper-wires.png" style="width: 80%;"/&gt;
&lt;p&gt;You can also buy "pre-made" jumpers. These are usually flexible stranded wire with "boots" or plastic shields covering the ends. They come in various lengths, colors, and combinations of "genders". "Female" refers to receptive connectors, and "male" refers to protruding ones.&lt;/p&gt;
&lt;p&gt;For most projects (including this one), "male-to-male" wires are the go-to form.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/premade-jumper-wires-organized.png" style="width: 80%;"/&gt;
&lt;p&gt;Jumper wires will be required for any of the demo circuits for the ItsyBitsy or the Trinket. The GEMMA and CircuitPlayground will require other connectors, since they have those lilly-pad-style pads instead of standard pins.&lt;/p&gt;
&lt;p&gt;Eventually, you'll collect many of these lengths of wire, and will want to show them off, maybe by keeping them in a special drawer. ðŸ˜€&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-lengths-of-wire.png" style="width: 80%;"/&gt;
&lt;/div&gt;
&lt;div class="section" id="alligator-clips"&gt;
&lt;h4&gt;Alligator Clips&lt;/h4&gt;
&lt;p&gt;"Alligator" clips are called that because the spring-loaded connectors look sort of like an aligator's head. They come in many lengths and colors.&lt;/p&gt;
&lt;p&gt;You can use alligator clips to connect anything conductive.&lt;/p&gt;
&lt;p&gt;Alligator clips are essential for prototyping and general use of the "lilypad" style boards, like the GEMMA and CircuitPlayground.&lt;/p&gt;
&lt;p&gt;In the demo circuits below, standard alligator clips aren't used, but they're a good addition to your toolbox, especially if you have one of the "lilypad" style boards.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/aligator-clips.png" style="width: 80%;"/&gt;
&lt;/div&gt;
&lt;div class="section" id="alligator-clip-to-jumper-wire"&gt;
&lt;h4&gt;Alligator Clip To Jumper Wire&lt;/h4&gt;
&lt;p&gt;This is a variant connector that combines a alligator-style clip to a flexible jumper cable. They also come in different "genders".&lt;/p&gt;
&lt;p&gt;We'll be using some of these in the "alligator-to-male" variety for the GEMMA version of the demo circuit.&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/aligator-to-jumper.png" style="width: 80%;"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-demo-circuit"&gt;
&lt;h3&gt;The Demo Circuit&lt;/h3&gt;
&lt;p&gt;There are different ways you can set up buttons to work with the various M0 boards (save the CircuitPlayground, since it has them built-in), but for this article we'll use a breadboard and jumper wires.&lt;/p&gt;
&lt;p&gt;The circuit ties one side of each button to ground, and then the other side to a pin on the board. This means that the buttons will read "LOW" when pressed. We'll use a "pull up" resistor to keep the high voltage from "floating". The resistor is built in to the microcontroller, so we can just turn them on in software.&lt;/p&gt;
&lt;p&gt;I chose this approach for a few key reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It keeps the component count down - you don't need anything but the buttons and some wire. The other way of hooking up the buttons, where the button is tied to 3V, would require a resistor for each button. Most microcontrollers have pull up resistors built in these days, otherwise we'd also need an additional resistor for each pin as well.&lt;/li&gt;
&lt;li&gt;It's safer, since we're connecting the buttons, and ultimately the microcontroller pins, to &lt;em&gt;ground&lt;/em&gt; instead of a live current. We can't do much, if any, damage if we misconfigure the pins in software, or the button is damaged (this is why we need the resistors if we were to wire the buttons up the other way).&lt;/li&gt;
&lt;li&gt;It's the most commonly used approach in the vast majority of tutorials and documentation these days, because of the previous two points. If you've used momentary switches with a microcontroller before, you're likely already familiar with this type of circuit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The trade off is that the button logic seems inverted compared to what common sense would dictate: when we press the button, it reads "LOW", and when it's not pressed, it reads "HIGH".&lt;/p&gt;
&lt;p&gt;The CircuitPlayground Express is wired in the reverse configuration, and requires a pull-&lt;em&gt;down&lt;/em&gt; resistor turned on in software. The logic is also inverted to be "correct". This was done this way to make teaching easier with the board, but it adds an inconsistency in my little platoon of M0 development boards. This will be dealt with below, when we explore &lt;em&gt;abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Limor_Fried"&gt;Lady Ada&lt;/a&gt; wrote a &lt;a class="reference external" href="http://www.ladyada.net/learn/arduino/lesson5.html"&gt;classic tutorial&lt;/a&gt; on the subject of wiring buttons to digital inputs. It explains everything, including the concept of "floating" really well. Highly recommended reading.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I've used three different kinds of breadboards I had on hand, and mixed up the kinds of connectors a bit to illustrate some different ways of wiring up the buttons.&lt;/p&gt;
&lt;div class="section" id="gemma-m0"&gt;
&lt;h4&gt;Gemma M0&lt;/h4&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-gemma-demo-circuit.png" style="width: 80%;"/&gt;
&lt;p&gt;With the Gemma, I used a "mini" breadboard. These breadboards are split into two halves by the screw holes at the top and bottom, and the "trench" in the middle. The tie points are connected in groups of five, running left to right. I've installed the buttons such that they straddle the trench. This was necessary because of a little plastic bit that sticks out between the pins.&lt;/p&gt;
&lt;p&gt;I wanted to make sure I had easy access to the buttons, so I put all of the jumper connections on the left side. On the right side, I made a little ground "bus" by tying together the rows where I needed to connect the buttons to ground with some solid-core wire. I tied the ground jumper/alligator clip to the "bus" using a little piece of wire over the screw hole.&lt;/p&gt;
&lt;p&gt;I clipped the black alligator clip to ground, the white one (button "A") to "D1" (also marked "A0" if you use it as an analog pin), and the yellow clip/button to "D0" ("A2").&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="itsybitsy-m0-express"&gt;
&lt;h4&gt;ItsyBitsy M0 Express&lt;/h4&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-itsybitsy-demo-circuit.png" style="width: 80%;"/&gt;
&lt;p&gt;For the ItsyBitsy, I used a full-sized breadboard. On these breadboards, they have a similar split and trench down the middle. They also have a long bus on each side (top and bottom in this picture) marked negative and positive. Each group of tie points are connected. We've used them to run power from the ItsyBitsy to the rest of the board.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;The buses can be removed and multiple breadboards can be connected to form larger areas to work with.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For ease of access, I've tied the left and right power rails together using some solid-core wire (far left). This isn't necessary for this project (we're only tying things to ground and pins on the ItsyBitsy), but it's a useful setup so I added it for demonstration purposes.&lt;/p&gt;
&lt;p&gt;I've seated the ItsyBitsy, fitted with the supplied headers, into the top of the breadboard (row one, on the far right). I've tied it's 3V pin (positive 3.3 volts) to the top positive bus rail, and its G pin (negative, ground) to the negative rail on the bottom.&lt;/p&gt;
&lt;p&gt;Because of the connections on the far left, all of the rails are live and connected like one big bus.&lt;/p&gt;
&lt;p&gt;I've connected the buttons to ground on the top rail (rows 21, and 28).&lt;/p&gt;
&lt;p&gt;I've connected button "A" (the grey button, white wire, row 23) to pin 11 on the ItsyBitsy (row 6 - "D11" in software).&lt;/p&gt;
&lt;p&gt;I've connected button "B" (the yellow button, yellow wire, row 30) to pin 7 on the ItsyBitsy (row 9 - "D9" in software).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trinket-m0"&gt;
&lt;h4&gt;Trinket M0&lt;/h4&gt;
&lt;img alt="" class="align-center" src="/images/nonblocking-trinket-demo-circuit.png" style="width: 80%;"/&gt;
&lt;p&gt;For the Trinket, I used a standard "half-sized" breadboard. It's just like the "full sized" on I used for the ItsyBitsy, but it's... half the size ðŸ¤”.&lt;/p&gt;
&lt;p&gt;For this circuit, I used pre-made jumper wires exclusively.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;It's a little messier using all jumpers, but it's really easy to change things up. In fact, I originally had the buttons wired to pins on the other side of the Trinket, but it was hard to see what was going on in the pictures. It was trivial to rearrange things to make it easier to see what's what.&lt;/p&gt;
&lt;p class="last"&gt;It's always a good idea to use jumper wires to start a project, and as things take shape, slowly replace them with solid-core wires. ðŸ¦„&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I seated the Trinket with attached headers on row 1 (far right). I tied its ground ('Gnd' pin) to the left ground rail (-, in this picture it's on the top).&lt;/p&gt;
&lt;p&gt;The buttons are tied to ground on the left side (rows 13 and 19).&lt;/p&gt;
&lt;p&gt;The "A" button (grey, white jumper) is attached to pin "~1" (row 3, "D1" in software - this pin can also be an analog output, that's why it's marked with a tilde).&lt;/p&gt;
&lt;p&gt;The "B" button (yellow, yellow jumper) is tied to pin 2 (row 4, "D2" in software).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="circuitplaground-express-problem-child"&gt;
&lt;h4&gt;CircuitPlaground Express: Problem Child&lt;/h4&gt;
&lt;p&gt;Doing things this way with the standard boards presents a problem with our rockstar board: the CircuitPlayground Express has its buttons wired in the other manner. They require a pull-&lt;em&gt;down&lt;/em&gt; resistor turned on in software, and will read "HIGH" when pressed.&lt;/p&gt;
&lt;p&gt;Further, the pin assignments are different for every single board, and the boards differ in what kind of RGB LED they have onboard. In the next section, we'll address these minor differences with some clever Python code and the power of &lt;em&gt;abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstractions-keeping-the-code-simple"&gt;
&lt;h2 id="abstractions: keeping the code simple"&gt;Abstractions: Keeping The Code Simple&lt;/h2&gt;
&lt;p&gt;Because there are minor differences between the different boards, we're going to abstact them away using a python module. We'll call it &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In programming, &lt;em&gt;abstraction&lt;/em&gt; is providing an indirect way to work with something. That something might be code, concepts, a service like a database, or something physical like different development boards, as we're abstracting here.&lt;/p&gt;
&lt;p&gt;Abstraction helps by providing a single, simplified &lt;em&gt;interface&lt;/em&gt; to do things that may have a lot of complexity.&lt;/p&gt;
&lt;p&gt;For example, instead of building an abstraction module like we're doing below, we could have a bunch of &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements that, given we have a way to figure out what board we're running our code on, set up the right pins or pixels for us.&lt;/p&gt;
&lt;p&gt;Something like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# psuedo code!&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;itsy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bitsy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;dotstar&lt;/span&gt;
  &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;pins&lt;/span&gt; &lt;span class="n"&gt;D7&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;D11&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="n"&gt;D13&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;circuit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;playground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;neopixel&lt;/span&gt;
  &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;pins&lt;/span&gt; &lt;span class="n"&gt;D4&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;D5&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="n"&gt;D13&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;trinket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;dotstar&lt;/span&gt;
  &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;pins&lt;/span&gt; &lt;span class="n"&gt;D1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;D2&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="n"&gt;D13&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;gemma&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;dotstar&lt;/span&gt;
  &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;pins&lt;/span&gt; &lt;span class="n"&gt;D0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;D1&lt;/span&gt;
  &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="n"&gt;D13&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The problem with this approach is that, besides being messy, it's adding a lot of extra places where our code could break. And every new board you want to use adds more complexity.&lt;/p&gt;
&lt;p&gt;But more importantly, you have to know &lt;em&gt;every detail&lt;/em&gt; of &lt;em&gt;every board&lt;/em&gt; you might use. Maybe someone wants to use our code and their LED is on pin 3. Maybe they are using touch pads instead of buttons. Maybe there's some new-fangled RGB LED product (we'll call them SunSpots&amp;trade; ðŸ˜‰) that someone wants to use.&lt;/p&gt;
&lt;p&gt;If we have this chain of &lt;tt class="docutils literal"&gt;if&lt;/tt&gt;'s, its up to &lt;em&gt;us&lt;/em&gt; to add in support for these different ways of doing what we want to do.&lt;/p&gt;
&lt;p&gt;In an abstraction, we decide on a standard way of accessing the code, or &lt;em&gt;interface&lt;/em&gt;. That means we decide that variables and functions will be named a certain way. Functions will take certain parameters and return specific kinds of values.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;Like many terms in technology, &lt;em&gt;interface&lt;/em&gt; has multiple meanings in different contexts.&lt;/p&gt;
&lt;p&gt;We're using the term in the sense of an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Application_programming_interface"&gt;application programming interface&lt;/a&gt;, usually abbreviated as &lt;em&gt;API&lt;/em&gt;.&lt;/p&gt;
&lt;p class="last"&gt;Be careful when searching ðŸ˜€.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Another term for this, that you'll hear used sometimes in computer science, is &lt;em&gt;contract&lt;/em&gt;. I think that describes what the abstraction does a bit more concisely - you are saying to someone who wants to use your code "I promise that you can rely on my code working this way", and the user is saying "I agree to do things your way".&lt;/p&gt;
&lt;p&gt;As long as the code for each board follows the contract, and anyone using the board-specific code does so through the interface, everything works in an interchangeable way.&lt;/p&gt;
&lt;p&gt;I like to think about the interface in terms of the actual variables and functions you use, and the contract as the understanding of what inputs and outputs the interface uses, as well as the things the interface does when you call the functions or access the variables:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/abstraction-explained-1.png" style="width: 80%;"/&gt;
&lt;p&gt;For this simple abstraction, I've decided to make five Python objects that define our interface:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A pixel object (&lt;tt class="docutils literal"&gt;rgb&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;The built-in RED LED, represented by a &lt;tt class="docutils literal"&gt;DigitalInOut&lt;/tt&gt; object (&lt;tt class="docutils literal"&gt;led&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;2 buttons, represented by &lt;tt class="docutils literal"&gt;DigitalInOut&lt;/tt&gt; objects (&lt;tt class="docutils literal"&gt;a_button&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;b_button&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;A function that returns the value of a button (&lt;tt class="docutils literal"&gt;check()&lt;/tt&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the bits of code used by the demo project that will be different from board to board.&lt;/p&gt;
&lt;p&gt;We'll put them into a Python module called &lt;tt class="docutils literal"&gt;setup&lt;/tt&gt;. Python modules are usually just Python files, so we'll store our abstraction in a file called &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To use our abstraction, we just need to &lt;tt class="docutils literal"&gt;import setup&lt;/tt&gt; and then we can access, for example, &lt;tt class="docutils literal"&gt;setup.rgb&lt;/tt&gt; to mess with the RGB pixel. That actual variable might be a NeoPixel. It might be a DotStar. It might be something we've never heard of (like a SunSpot&amp;trade;). It could be wired to any pin, configured any way. It doesn't matter. As long as that &lt;tt class="docutils literal"&gt;rgb&lt;/tt&gt; object works the same way (has the same interface) as a DotStar or NeoPixel, it complies with the &lt;em&gt;contract&lt;/em&gt; and everything works:&lt;/p&gt;
&lt;img alt="" class="align-center" src="/images/abstraction-explained-2.png" style="width: 80%;"/&gt;
&lt;p&gt;ðŸ¦„ There's even a nested abstraction here. Adafruit has already abstracted the pixel code away for us, by giving the &lt;tt class="docutils literal"&gt;DotStar&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;NeoPixel&lt;/tt&gt; classes the same interface. So we can interact with a string of NeoPixels in the same way we can interact with a string of DotStars.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;If someone wanted to use a different kind of RGB LED (SunSpots&amp;trade;), as long they adhere to the interface of the abstraction Adafruit has provided, our code will still work. In fact, the SunSpots&amp;trade; library would work &lt;em&gt;anywhere&lt;/em&gt; &lt;tt class="docutils literal"&gt;DotStar&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;NeoPixel&lt;/tt&gt; are used.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now anyone who wants to follow this article, but maybe has a &lt;a class="reference external" href="https://store.micropython.org/product/PYBv1.1"&gt;pyboard&lt;/a&gt; or an &lt;a class="reference external" href="https://www.espressif.com/en/products/hardware/esp8266ex/overview"&gt;ESP8266&lt;/a&gt;-based board can follow along without having to constantly adapt the code to their situation. All they have to do is write a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; module and make sure it has the expected objects.&lt;/p&gt;
&lt;p&gt;So here's the code for each of the boards I have.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If you are using a board that has a built-in NeoPixel, but &lt;em&gt;isn't&lt;/em&gt; a CircuitPlayground, use the DotStar code, but replace the DotStar lines (lines 3, 8 and 9) with the NeoPixel code from the CircuitPlayground example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-the-circuitplayground"&gt;
&lt;h3&gt;For the CircuitPlayground&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# save as setup.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;board&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;neopixel&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;digitalio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pull&lt;/span&gt;

&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;

&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neopixel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NeoPixel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NEOPIXEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;brightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;

&lt;span class="n"&gt;a_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INPUT&lt;/span&gt;
&lt;span class="n"&gt;a_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pull&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOWN&lt;/span&gt;

&lt;span class="n"&gt;b_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INPUT&lt;/span&gt;
&lt;span class="n"&gt;b_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pull&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOWN&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This file will need to be saved on your &lt;tt class="docutils literal"&gt;CIRCUITPY&lt;/tt&gt; drive as &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 2-4&lt;/strong&gt; import external libraries needed for this module to function.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;board&lt;/tt&gt; library contains variables that are related to your specific development board. It contains all of the pin assignments, including some handy aliases for the built-in components (like the &lt;tt class="docutils literal"&gt;board.NEOPIXEL&lt;/tt&gt; variable used on &lt;strong&gt;line 9&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;neopixel&lt;/tt&gt; library gives us a way to control the 10 RGB LEDs that surround the CircuitPlayground. Depending on how your CircuitPython was installed, you may have to install this library yourself. This process is covered in detail on the &lt;a class="reference external" href="https://learn.adafruit.com/welcome-to-circuitpython/circuitpython-libraries"&gt;CircuitPython Libraries section&lt;/a&gt; of the "Welcome To CircuitPython" guide.&lt;/p&gt;
&lt;p&gt;The basics of the &lt;tt class="docutils literal"&gt;neopixel&lt;/tt&gt; library, specifically for this board, are disucessed in the &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-neopixel"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NeoPixels are a hugely cool peripheral, and you are not limited to just using the ones on your CircuitPlayground Express. Check out the &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-neopixel-uberguide/the-magic-of-neopixels"&gt;NeoPixel &amp;Uuml;berguide&lt;/a&gt; for comprehensive information about them.&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;line 4&lt;/strong&gt;, we import a few things from the &lt;tt class="docutils literal"&gt;digitalio&lt;/tt&gt; library. This library contains classes, variables and functions useful for reading and writing to digital pins (buttons, LEDs, etc). We're only importing the objects that we need to set up the buttons and built-in LED, &lt;tt class="docutils literal"&gt;DigitalInOut&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Direction&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Pull&lt;/tt&gt;. Their purpose will be explained shortly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 6 and 7&lt;/strong&gt; set up the built-in red LED. It's attached to digital pin 13, so we pass &lt;tt class="docutils literal"&gt;board.D13&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;DigitalInOut&lt;/tt&gt; constructor. On &lt;strong&gt;Line 7&lt;/strong&gt;, we set the &lt;em&gt;direction&lt;/em&gt; of the pin to be an &lt;em&gt;output&lt;/em&gt; - this means the pin is only going to be used for sending information, on in this case, sending power to the pin to turn on the LED.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;led&lt;/tt&gt; is now a &lt;tt class="docutils literal"&gt;DigitalInOut&lt;/tt&gt; object we can write to by setting its &lt;tt class="docutils literal"&gt;value&lt;/tt&gt; attribute to a boolean value (&lt;tt class="docutils literal"&gt;True&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 9 and 10&lt;/strong&gt; configure the NeoPixel. We call the NeoPixel object simply &lt;tt class="docutils literal"&gt;rgb&lt;/tt&gt; to keep it as generic as possible. When we call the NeoPixel constructor, &lt;tt class="docutils literal"&gt;neopixel.NeoPixel&lt;/tt&gt;, we pass the pin where our pixels are installed (&lt;tt class="docutils literal"&gt;board.NEOPIXEL&lt;/tt&gt;), and the number of pixels we want to illuminate. We have 10 pixels available, but since we are mimicking a board with just one built-in, we pass &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; to the constructor.&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;Line 10&lt;/strong&gt; we set the brightness of the pixel to &lt;tt class="docutils literal"&gt;0.3&lt;/tt&gt;. The brightness is a float between &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;1.0&lt;/tt&gt;. These pixels are &lt;em&gt;incredibly&lt;/em&gt; bright, feel free to lower this to &lt;tt class="docutils literal"&gt;0.1&lt;/tt&gt; if &lt;tt class="docutils literal"&gt;0.3&lt;/tt&gt; is too intense, or increase it if you want to really light up your life. ðŸ˜€&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 12-14&lt;/strong&gt; and &lt;strong&gt;lines 16-18&lt;/strong&gt; set up our buttons. In the case of the CircuitPlayground, these are the built-in buttons, and need a pull-down resistor turned on to function. The pins are supplied via the &lt;tt class="docutils literal"&gt;board&lt;/tt&gt; module. The direction is set just like the &lt;tt class="docutils literal"&gt;led&lt;/tt&gt; on &lt;strong&gt;line 6&lt;/strong&gt;, but in this case the direction is set to &lt;tt class="docutils literal"&gt;Direction.INPUT&lt;/tt&gt;, because these are pins to be &lt;em&gt;read&lt;/em&gt; from, instead of written to. Finally on &lt;strong&gt;lines 14 and 18&lt;/strong&gt;, we enable the pull-down resistor using the &lt;tt class="docutils literal"&gt;pull&lt;/tt&gt; property and the &lt;tt class="docutils literal"&gt;Pull&lt;/tt&gt; object from the &lt;tt class="docutils literal"&gt;digitalio&lt;/tt&gt; module.&lt;/p&gt;
&lt;p&gt;Finally, on &lt;strong&gt;lines 20-24&lt;/strong&gt;, we define a function called &lt;tt class="docutils literal"&gt;check()&lt;/tt&gt;. The purpose of this function is to abstract away the differences between how these various boards are wired up. In the case of the CircuitPlayground, the onboard buttons are wired in the "sane" manner such that pressing the button causes the pin to read &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;, and not pressing the button, causes the pin to read &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;. This is the opposite of how the other boards are configured.&lt;/p&gt;
&lt;p&gt;This function will always return &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; if the button is pressed, and &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; if it's not, regardless of how the buttons are set up.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;check()&lt;/tt&gt; takes a single parameter, &lt;tt class="docutils literal"&gt;token&lt;/tt&gt;, which is used to indicate which button you want to check the value of. It's a simple string - when it's set to "A", &lt;tt class="docutils literal"&gt;check()&lt;/tt&gt; returns the value of the "A" button (&lt;tt class="docutils literal"&gt;button_a&lt;/tt&gt;), and when it's set to "B", &lt;tt class="docutils literal"&gt;check()&lt;/tt&gt; returns the value of the "B" button (&lt;tt class="docutils literal"&gt;button_b&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="for-the-other-boards-with-dotstars"&gt;
&lt;h3&gt;For the other boards with DotStars&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Be sure to change the pin numbers to reflect how you wired up your buttons.&lt;/p&gt;
&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# save as setup.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;board&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;adafruit_dotstar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;digitalio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pull&lt;/span&gt;

&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;

&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adafruit_dotstar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DotStar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;APA102_SCK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;APA102_MOSI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;brightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;

&lt;span class="n"&gt;a_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INPUT&lt;/span&gt;
&lt;span class="n"&gt;a_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pull&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UP&lt;/span&gt;

&lt;span class="n"&gt;b_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INPUT&lt;/span&gt;
&lt;span class="n"&gt;b_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pull&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UP&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;a_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;b_button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This file will need to be saved on your &lt;tt class="docutils literal"&gt;CIRCUITPY&lt;/tt&gt; drive as &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 2-4&lt;/strong&gt; import external libraries needed for this module to function.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;board&lt;/tt&gt; library contains variables that are related to your specific development board. It contains all of the pin assignments, including some handy aliases for the built-in components (like the &lt;tt class="docutils literal"&gt;board.APA102_SCK&lt;/tt&gt; variable used on &lt;strong&gt;line 9&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;adafruit_dotstar&lt;/tt&gt; module provides a way to control DotStars. DotStars are like NeoPixels, but use a different protocol. The differences are explained on &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-dotstar-leds/overview"&gt;the DotStar LED docuemntation page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will have to install the &lt;tt class="docutils literal"&gt;adafruit_dotstar&lt;/tt&gt; library. This process is covered in detail on the &lt;a class="reference external" href="https://learn.adafruit.com/welcome-to-circuitpython/circuitpython-libraries"&gt;CircuitPython Libraries section&lt;/a&gt; of the "Welcome To CircuitPython" guide.&lt;/p&gt;
&lt;p&gt;The details of working with the DotStar library in CircuitPython is covered in &lt;a class="reference external" href="https://learn.adafruit.com/circuitpython-essentials/circuitpython-dotstar"&gt;the CircuitPython DotStar section&lt;/a&gt; of the CircuitPython Essentials document.&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;line 4&lt;/strong&gt;, we import a few things from the &lt;tt class="docutils literal"&gt;digitalio&lt;/tt&gt; library. This library contains classes, variables and functions useful for reading and writing to digital pins (buttons, LEDs, etc). We're only importing the objects that we need to set up the buttons and built-in LED, &lt;tt class="docutils literal"&gt;DigitalInOut&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Direction&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Pull&lt;/tt&gt;. Their purpose will be explained shortly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 6 and 7&lt;/strong&gt; set up the built-in red LED. It's attached to digital pin 13, so we pass &lt;tt class="docutils literal"&gt;board.D13&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;DigitalInOut&lt;/tt&gt; constructor. On &lt;strong&gt;Line 7&lt;/strong&gt;, we set the &lt;em&gt;direction&lt;/em&gt; of the pin to be an &lt;em&gt;output&lt;/em&gt; - this means the pin is only going to be used for sending information, on in this case, sending power to the pin to turn on the LED.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;led&lt;/tt&gt; is now a &lt;tt class="docutils literal"&gt;DigitalInOut&lt;/tt&gt; object we can write to by setting its &lt;tt class="docutils literal"&gt;value&lt;/tt&gt; attribute to a boolean value (&lt;tt class="docutils literal"&gt;True&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 9 and 10&lt;/strong&gt; configure the DotStar. We call the DotStar object simply &lt;tt class="docutils literal"&gt;rgb&lt;/tt&gt; to keep it as generic as possible. DotStars are connected via &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface"&gt;SPI&lt;/a&gt;, so they require two pins to be specified in the constructor. We use the &lt;tt class="docutils literal"&gt;board&lt;/tt&gt; library to provide the two built-in pins that are pre-wired to all built-in DotStars, &lt;tt class="docutils literal"&gt;board.APA102_SCK&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;board.APA102_MOSI&lt;/tt&gt;. Finally we pass &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; to the constructor, to let the library know we are only controlling the single DotStar.&lt;/p&gt;
&lt;p&gt;On &lt;strong&gt;Line 10&lt;/strong&gt; we set the brightness of the pixel to &lt;tt class="docutils literal"&gt;0.3&lt;/tt&gt;. The brightness is a float between &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;1.0&lt;/tt&gt;. These pixels are &lt;em&gt;incredibly&lt;/em&gt; bright, feel free to lower this to &lt;tt class="docutils literal"&gt;0.1&lt;/tt&gt; if &lt;tt class="docutils literal"&gt;0.3&lt;/tt&gt; is too intense, or increase it if you want to really light up your life. ðŸ˜€&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lines 12-14&lt;/strong&gt; and &lt;strong&gt;lines 16-18&lt;/strong&gt; set up our buttons. The pins are supplied via the &lt;tt class="docutils literal"&gt;board&lt;/tt&gt; module. The direction is set just like the &lt;tt class="docutils literal"&gt;led&lt;/tt&gt; on &lt;strong&gt;line 6&lt;/strong&gt;, but in this case the direction is set to &lt;tt class="docutils literal"&gt;Direction.INPUT&lt;/tt&gt;, because these are pins to be &lt;em&gt;read&lt;/em&gt; from, instead of written to. On these boards, we've wired all of the buttons so they connect to ground when pressed, so we have to use a pull up resistor so they function properly (&lt;strong&gt;lines 14 and 18&lt;/strong&gt;) . This also means that our logic will be inverted relative to other wirirings (and common sense) - when the button is pressed, the pin will read &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;, and when it's not pressed, it will read &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Finally, on &lt;strong&gt;lines 20-24&lt;/strong&gt;, we define a function called &lt;tt class="docutils literal"&gt;check()&lt;/tt&gt;. The purpose of this function is to abstract away the differences between how these various boards are wired up. On &lt;strong&gt;lines 22 and 24&lt;/strong&gt;, we use the &lt;tt class="docutils literal"&gt;not&lt;/tt&gt; operator to negate whatever we got from the button pin. This normalizes the output between these boards, and boards like the CircuitPlayground that are wired in the opposite manner.&lt;/p&gt;
&lt;p&gt;This function will always return &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; if the button is pressed, and &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; if it's not, regardless of how the buttons are set up.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;check()&lt;/tt&gt; takes a single parameter, &lt;tt class="docutils literal"&gt;token&lt;/tt&gt;, which is used to indicate which button you want to check the value of. It's a simple string - when it's set to "A", &lt;tt class="docutils literal"&gt;check()&lt;/tt&gt; returns the value of the "A" button (&lt;tt class="docutils literal"&gt;button_a&lt;/tt&gt;), and when it's set to "B", &lt;tt class="docutils literal"&gt;check()&lt;/tt&gt; returns the value of the "B" button (&lt;tt class="docutils literal"&gt;button_b&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-works"&gt;
&lt;h3&gt;How It Works&lt;/h3&gt;
&lt;p&gt;To use this in our other code (&lt;tt class="docutils literal"&gt;code.py&lt;/tt&gt;), we just need to use Python's &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; statement:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, in our code, we use the &lt;tt class="docutils literal"&gt;led&lt;/tt&gt; variable to turn the red LED on/off, and use &lt;tt class="docutils literal"&gt;rgb&lt;/tt&gt; to control the NeoPixel/DotStar. We will use the &lt;tt class="docutils literal"&gt;check()&lt;/tt&gt; function to see if a button is being pressed, like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Button A has been pressed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Button A has not been pressed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Button B has been pressed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Button B has not been pressed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2 id="testing"&gt;Testing&lt;/h2&gt;
&lt;p&gt;Before digging into state and other fun stuff, its a good idea to run some super simple code to ensure that everything is wired up properly. I've written some minimalistic code you can use to verify everything is set up.&lt;/p&gt;
&lt;p&gt;What this code does is turn the on the onboard LED when button "A" is pressed, and the RGB LED (either a dotstar for the ItsyBitsy, Trinket, or GEMMA boards, or a NeoPixel in the case of the CircuitPlayground) when button "B" is pressed.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;For details about controlling the onboard RGB LEDs, see &lt;a class="reference external" href="https://learn.adafruit.com/circuitpython-essentials/circuitpython-internal-rgb-led"&gt;Adafruit's excellent documentation on the subject&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Before running this code, make sure you've copied the proper RGB LED library over to your board, in the &lt;tt class="docutils literal"&gt;lib&lt;/tt&gt; folder.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;If you aren't familiar with this process, check out the &lt;a class="reference external" href="https://learn.adafruit.com/welcome-to-circuitpython/circuitpython-libraries"&gt;CircuitPython Libraries&lt;/a&gt; section of the &lt;a class="reference external" href="https://learn.adafruit.com/welcome-to-circuitpython/overview"&gt;"Welcome To CircuitPython"&lt;/a&gt; guide.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Also make sure you have created a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; module, as explained in &lt;a class="reference internal" href="#abstractions-keeping-the-code-simple"&gt;the last section&lt;/a&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Lines 1 and 2&lt;/strong&gt; import the necessary external objects and modules we need.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://circuitpython.readthedocs.io/en/3.x/shared-bindings/time/__init__.html"&gt;time&lt;/a&gt; module provides functions related to the passage of time, usually in terms of seconds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 4&lt;/strong&gt; starts off the standard "main loop" where our code runs.&lt;/li&gt;
&lt;li&gt;On &lt;strong&gt;Line 5&lt;/strong&gt;, we set the value of the &lt;tt class="docutils literal"&gt;led&lt;/tt&gt; object, or the red LED wired to pin 13, to whatever the value of the "A" button happens to be at that moment. If the value is &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; (the button is pressed), the LED will turn on. If it's &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; (the button is not pressed), the LED will turn off.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Lines 7-10&lt;/strong&gt; have a similar function to line 5, except that the RGB LEDs are not simple on/off devices. They must have a color of some kind written to them, usually a tuple of three integers, each ranging from 0 to 255. Each integer in the tuple corresponds to a red, green, and blue LED element in the pixel (respectively), and sets its intensity level.&lt;/p&gt;
&lt;p&gt;The NeoPixel and DotStar libraries provide an interface such that you can treat the pixel object like a standard Python list. This is how we are able to write a color to the first pixel using list indexing on &lt;strong&gt;lines 8 and 10&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the case of &lt;strong&gt;line 10&lt;/strong&gt;, we're writing "black" to the pixel by setting the red, green and blue values to 0 (by passing the tuple &lt;tt class="docutils literal"&gt;(0, 0, 0)&lt;/tt&gt;). This has the effect of turning it off, in the same way that setting the &lt;tt class="docutils literal"&gt;led.value&lt;/tt&gt; property to &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; turns the red LED on pin 13 off.&lt;/p&gt;
&lt;p&gt;Finally on &lt;strong&gt;line 12&lt;/strong&gt;, we call &lt;tt class="docutils literal"&gt;time.sleep()&lt;/tt&gt; to pause the program for 0.2 seconds. This provides simple button debouncing (much more about button bounce will be discussed in the rest of this article, stay tuned).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's a short video demonstrating the test code and demo circuit on each of the boards I have:&lt;/p&gt;
&lt;div class="video-container"&gt;
&lt;video controls=""&gt;
&lt;source src="/videos/non-blocking-events-circuitpython/test-circuit-demo-all-boards.mp4" type="video/mp4"/&gt;
&lt;p&gt;Your browser doesn't support HTML5 video. Here is
          a &lt;a href="/videos/non-blocking-events-circuitpython/test-circuit-demo-all-boards.mp4"&gt;link to the video&lt;/a&gt; instead.&lt;/p&gt;
&lt;/video&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion-and-what-s-next"&gt;
&lt;h2 id="conclusion and what's next"&gt;Conclusion And What's Next&lt;/h2&gt;
&lt;p&gt;In this installment, we've discussed some details about the CircuitPython platform, and built out a circuit for experimentation, taking advantage of some of the built-in components we've got at our disposal.&lt;/p&gt;
&lt;p&gt;We have developed a rudimentary API: we've written code that uses abstraction to make it easy to write code that will run on many development boards.&lt;/p&gt;
&lt;p&gt;We've hinted at "state" and "events" but have yet to really define what they are.&lt;/p&gt;
&lt;p&gt;In the next article, we'll dive deep into both state and events, framed around one of the most common problems in electronics (especially hobby electronics): &lt;strong&gt;button "de-bouncing"&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We'll solve the problem of button "bounce" (as well as define what it actually is), and dive into some more practical code. We'll explore some patterns that are the basis for handling a whole slew of issues that face us as microcontroller programmers.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Part 2 is now complete! &lt;a class="reference external" href="/circuitpython-state-part-2.html"&gt;Go on to Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="circuitpython"></category><category term="python"></category><category term="hardware"></category><category term="state"></category></entry></feed>