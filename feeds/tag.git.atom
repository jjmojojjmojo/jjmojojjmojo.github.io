<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Collected Works of jjmojojjmojo - git</title><link href="/" rel="alternate"></link><link href="/feeds/tag.git.atom" rel="self"></link><id>/</id><updated>2019-06-19T09:00:00-04:00</updated><entry><title>Branching With Git And Testing With Pytest: A Comprehensive Guide</title><link href="/branching-git-with-pytest.html" rel="alternate"></link><published>2019-06-19T09:00:00-04:00</published><updated>2019-06-19T09:00:00-04:00</updated><author><name>jjmojojjmojo</name></author><id>tag:None,2019-06-19:/branching-git-with-pytest.html</id><summary type="html">&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part one of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk a bit about the design of the example application.&lt;/li&gt;
&lt;li&gt;Ensure we are set up for development.&lt;/li&gt;
&lt;li&gt;Exercise the basics of pytest, and git by writing some tests, adding a fixture, and committing our changes.&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;!-- Collects all of the includable files into one. --&gt;
&lt;!-- Emoji substitutions, because I can't help myself (and my editor doesn't show --&gt;
&lt;!-- emoji for some reason - better to do this since I can replace these with --&gt;
&lt;!-- icons or whatever I want) --&gt;
&lt;!-- Special Roles Used In The Text. --&gt;
&lt;p&gt;&lt;strong&gt;This is part one of a three-part series.&lt;/strong&gt; This is a comprehensive guide to a basic development workflow. Using a simple, but non-trivial web application, we learn how to write tests, fix bugs, and add features using &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com/"&gt;git&lt;/a&gt;, via feature branches. Along the way we'll touch on application design and discuss best practices.&lt;/p&gt;
&lt;p&gt;In this installment, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk a bit about the design of the example application.&lt;/li&gt;
&lt;li&gt;Ensure we are set up for development.&lt;/li&gt;
&lt;li&gt;Exercise the basics of pytest, and git by writing some tests, adding a fixture, and committing our changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Developing a sane and productive workflow is essential to increasing productivity and minimizing risk. Good testing discipline coupled with regimented use of a revision control system is key. The workflow outlined in this guide is the result of many years of experience and discussion of best practices. It is not comprehensive in the sense of total maximization of productivity or utter elimination of risk. Frankly, that's just not possible. Instead we lay the groundwork for more robust practices, like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Continuous_integration"&gt;continuous integration&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Continuous_deployment"&gt;continuous deployment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This guide &lt;em&gt;is&lt;/em&gt;,  however, comprehensive in that it attempts to answer all of the basic questions that developers face when collaborating on large code bases.&lt;/p&gt;
&lt;p&gt;The workflow is presented using a non-trivial (but necessarily simplistic) example application as a framing device. It is designed to be easy to reason about, and show general good practices. However, it is &lt;em&gt;not&lt;/em&gt; optimized or robust. We will discuss areas where we might improve on these aspects, but they're really out of scope for this guide.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;This workflow is a simplified version of the one outlined in the classic &lt;a class="reference external" href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model&lt;/a&gt; by Vincent Driessen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-example-application"&gt;
&lt;h2 id="the example application"&gt;The Example Application&lt;/h2&gt;
&lt;p&gt;For our example, we'll be building on a simple HTTP API endpoint, implemented in Python 3. This endpoint's primary function is to return a random quote from a pool of quotes previously stored in a database.&lt;/p&gt;
&lt;p&gt;The application is built using as few external dependencies as possible, but for added realism, uses a few libraries to handle some of the messier bits.&lt;/p&gt;
&lt;div class="section" id="limitations-and-design-restrictions"&gt;
&lt;h3&gt;Limitations and Design Restrictions&lt;/h3&gt;
&lt;p&gt;The goal of the example application is to provide as realistic a codebase as possible. But there are good reasons to put some simple restrictions on the end product:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Keeping scope in check.&lt;/strong&gt; The application should be easy to reason about. If it were to be too complex, like a real-life code base might be, we'd spend too much time explaining the implementation of the features and bug fixes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comfort of the audience.&lt;/strong&gt; The author hopes that this guide is useful to programmers of all levels of expertise. As such, it's important that the concepts are easy to understand and explain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reducing dependencies (code and infrastructure)&lt;/strong&gt; We could treat this application as a production-ready project, utilizing a highly optimized web framework, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORM&lt;/a&gt;, enterprise-level database, and deploy the whole thing to a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Platform_as_a_service"&gt;PAAS&lt;/a&gt;. However, there's a strong desire to allow any reader, with minimal configuration, to jump in and benefit. Design and technical decisions are made with this in mind.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be as generic as possible&lt;/strong&gt; While we're using a specific database, we are generally adhering to well-known standards like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface"&gt;WSGI&lt;/a&gt;, &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0249/"&gt;DBAPI&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;HTTP&lt;/a&gt;, and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt;. This should make the application useful as a good example of a generic web application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practical terms, this means that the application will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use as few dependencies as possible.&lt;/li&gt;
&lt;li&gt;Use a bundled database product (we're using &lt;a class="reference external" href="https://www.sqlite.org/index.html"&gt;sqllite3&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Require no other tooling beyond a console (terminal), git, python 3 and some sort of text editor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One additional area where the design is being restricted is &lt;em&gt;error handling&lt;/em&gt;. Avoiding input verification and exception handling helps keep the code simple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="preparation"&gt;
&lt;h2 id="preparation"&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Before we begin, you should do the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;Install git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/downloads/"&gt;Install python 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make sure &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; is installed (it should be, but some Linux distributions put it in a separate package)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there, you'll have all the tools you need, save a preferred text editor and a console (or terminal) to follow along.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The guide has been developed with unix-like systems in mind (Linux, BSD, MacOS). It should be possible to follow along in Windows, but this has not been tested. There are some quirks to using git and python in Windows that the author would like to explore in the future. If you are interested in seeing this guide include Windows-specific notes, please &lt;a class="reference external" href="/pages/contact.html"&gt;contact the author&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can ensure our tools are installed by opening up a terminal and running the following commands (the output shows what the author was using to develop the guide):&lt;/p&gt;
&lt;div class="section" id="verify-git"&gt;
&lt;h3&gt;Verify Git&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git --version
&lt;span class="go"&gt;git version 2.20.1 (Apple Git-117)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="verify-python"&gt;
&lt;h3&gt;Verify Python&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -V
&lt;span class="go"&gt;Python 3.7.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="verify-venv"&gt;
&lt;h3&gt;Verify &lt;code&gt;venv&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv --help
&lt;span class="go"&gt;usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]&lt;/span&gt;
&lt;span class="go"&gt;            [--upgrade] [--without-pip] [--prompt PROMPT]&lt;/span&gt;
&lt;span class="go"&gt;            ENV_DIR [ENV_DIR ...]&lt;/span&gt;

&lt;span class="go"&gt;Creates virtual Python environments in one or more target directories.&lt;/span&gt;

&lt;span class="go"&gt;positional arguments:&lt;/span&gt;
&lt;span class="go"&gt;  ENV_DIR               A directory to create the environment in.&lt;/span&gt;

&lt;span class="go"&gt;optional arguments:&lt;/span&gt;
&lt;span class="go"&gt;  -h, --help            show this help message and exit&lt;/span&gt;
&lt;span class="go"&gt;  --system-site-packages&lt;/span&gt;
&lt;span class="go"&gt;                        Give the virtual environment access to the system&lt;/span&gt;
&lt;span class="go"&gt;                        site-packages dir.&lt;/span&gt;
&lt;span class="go"&gt;  --symlinks            Try to use symlinks rather than copies, when symlinks&lt;/span&gt;
&lt;span class="go"&gt;                        are not the default for the platform.&lt;/span&gt;
&lt;span class="go"&gt;  --copies              Try to use copies rather than symlinks, even when&lt;/span&gt;
&lt;span class="go"&gt;                        symlinks are the default for the platform.&lt;/span&gt;
&lt;span class="go"&gt;  --clear               Delete the contents of the environment directory if it&lt;/span&gt;
&lt;span class="go"&gt;                        already exists, before environment creation.&lt;/span&gt;
&lt;span class="go"&gt;  --upgrade             Upgrade the environment directory to use this version&lt;/span&gt;
&lt;span class="go"&gt;                        of Python, assuming Python has been upgraded in-place.&lt;/span&gt;
&lt;span class="go"&gt;  --without-pip         Skips installing or upgrading pip in the virtual&lt;/span&gt;
&lt;span class="go"&gt;                        environment (pip is bootstrapped by default)&lt;/span&gt;
&lt;span class="go"&gt;  --prompt PROMPT       Provides an alternative prompt prefix for this&lt;/span&gt;
&lt;span class="go"&gt;                        environment.&lt;/span&gt;

&lt;span class="go"&gt;Once an environment has been created, you may wish to activate it, e.g. by&lt;/span&gt;
&lt;span class="go"&gt;sourcing an activate script in its bin directory.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unless you get any errors, or the versions look really dissimilar, you are in good shape.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow-overview"&gt;
&lt;h2 id="workflow overview"&gt;Workflow Overview&lt;/h2&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/workflow-overview.png"/&gt;
&lt;p class="caption"&gt;High-level overview of the workflow, showing each git command.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The basic workflow goes like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt; the repository (or &lt;code&gt;git pull&lt;/code&gt; changes into an existing clone).&lt;/li&gt;
&lt;li&gt;Check out the branch you want to work from (usually &lt;code&gt;master&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Run the tests.&lt;/li&gt;
&lt;li&gt;Create a new branch for the bug/feature. (&lt;code&gt;git branch&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check out the new branch. (&lt;code&gt;git checkout&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Make the changes.&lt;/li&gt;
&lt;li&gt;Write tests for your changes.&lt;/li&gt;
&lt;li&gt;Increment the revision number. (if applicable)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt; your changes and tests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt; changes that others may have made.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase&lt;/code&gt; to put all of your commits into one log entry and merge your changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge&lt;/code&gt; to your feature or bug branch.&lt;/li&gt;
&lt;li&gt;Fix any conflicts.&lt;/li&gt;
&lt;li&gt;Run the tests.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt; the changes with the new revision number (if applicable)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt; the changes to the remote repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll explore each step in detail as we progress through the guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cloning-the-repository"&gt;
&lt;h2 id="cloning the repository"&gt;Cloning The Repository&lt;/h2&gt;
&lt;p&gt;The first step is to clone the initial version of the example application, from my &lt;a class="reference external" href="https://github.com/jjmojojjmojo/random_quote"&gt;github repository&lt;/a&gt;. But because of the stuff we're going to be doing later, this will be a special two-step process.&lt;/p&gt;
&lt;p&gt;First, we need to do a &lt;em&gt;bare&lt;/em&gt; clone of the repository. This will give us a &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes"&gt;remote&lt;/a&gt;, that isn't &lt;a class="reference external" href="https://www.github.com"&gt;github&lt;/a&gt;, that we can clone and work on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone --bare git@github.com:jjmojojjmojo/random_quote.git random_quote_remote
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, instead of cloning my repository from github, we clone &lt;code&gt;random_quote_remote&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git clone random_quote_remote random_quote
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any changes we &lt;code&gt;git push&lt;/code&gt; in &lt;code&gt;random_quote&lt;/code&gt; will only go to &lt;code&gt;random_quote_remote&lt;/code&gt;.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;This is a handy way to set up a temporary git repository that you can experiment with without any risk to the code hosted on your shared git server (or &lt;a class="reference external" href="https://www.github.com"&gt;github&lt;/a&gt;). 🦄&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="jumping-around-in-the-guide"&gt;
&lt;h2 id="jumping around in the guide"&gt;Jumping Around In The Guide&lt;/h2&gt;
&lt;p&gt;🌈 We have branches for all of the major work done in the series:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;part1&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;part2&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt; and
&lt;a class="reference external" href="/drafts/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;qotd&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Developer &lt;strong&gt;A&lt;/strong&gt;'s feature from &lt;a class="reference external" href="/drafts/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;index-info&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Developer &lt;strong&gt;B&lt;/strong&gt;'s bug fix from &lt;a class="reference external" href="/drafts/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;part3&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All the changes from &lt;a class="reference external" href="/branching-git-with-pytest.html"&gt;part 1&lt;/a&gt;,
&lt;a class="reference external" href="/drafts/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; &lt;a class="reference external" href="/drafts/branching-git-with-pytest-3.html"&gt;part 3&lt;/a&gt;!&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Feel free to &lt;code&gt;git checkout&lt;/code&gt; if you need to reset your code, or jump around.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Use &lt;code&gt;git stash&lt;/code&gt; to keep any uncomitted changes for latter. See &lt;a class="reference external" href="https://git-scm.com/book/en/v1/Git-Tools-Stashing"&gt;the git documentation&lt;/a&gt; for more information. 🦄&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="quick-overview-of-the-application-layout"&gt;
&lt;h2 id="quick overview of the application layout"&gt;Quick Overview Of The Application Layout&lt;/h2&gt;
&lt;p&gt;The code is provided as a &lt;a class="reference external" href="https://setuptools.readthedocs.io/en/latest/formats.html"&gt;python egg&lt;/a&gt;. The source code is contained in &lt;code&gt;src&lt;/code&gt;, and the &lt;code&gt;setup.py&lt;/code&gt; is located in the main directory.&lt;/p&gt;
&lt;p&gt;The application is implemented in the following modules:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;random_quote.manager&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;src/random_quote/manager.py&lt;/code&gt;. Provides a class, &lt;code&gt;RandomQuoteManager&lt;/code&gt; that allows a developer to interact with quotes in the database.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;random_quote.wsgi&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;src/random_quote/wsgi.py&lt;/code&gt;. Provides a class, &lt;code&gt;RandomQuoteApp&lt;/code&gt; which is a WSGI application that provides a limited subset of the manager functionality as an API endpoint.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;random_quote.util&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;src/random_quote/util.py&lt;/code&gt;. Utility functions. Contains a function that can create the database schema &lt;code&gt;init()&lt;/code&gt;, and another that will populate a database with quotes contained in a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comma-separated_values"&gt;CSV&lt;/a&gt; file, &lt;code&gt;ingest()&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;random_quote.tests&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;src/random_quote/tests/test_*.py&lt;/code&gt;. Package that contains unit and functional tests, as well as fixtures (collected in &lt;code&gt;conftest.py&lt;/code&gt;).&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Other files of note:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;setup.py&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The configuration file for this python egg. It declares dependencies and establishes the version number.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;wsgi.py&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Contains an instantiation of the &lt;code&gt;RandomQuoteApp&lt;/code&gt; for use in manual testing, or possible deployment.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;src/random_quote/schema.sql&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A text file containing the SQL statmenets needed to initialize the database, creating the tables. Used by &lt;code&gt;random_quote.util.init()&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;scripts/generate_quotes.py&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A python script that uses a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Markov_chain"&gt;Markov chain&lt;/a&gt; to generate random, but realistic-looking quotes. (see the &lt;code&gt;scripts/README.rst&lt;/code&gt; for more information).&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="initialize-the-virtual-environment"&gt;
&lt;h2 id="initialize the virtual environment"&gt;Initialize The Virtual Environment&lt;/h2&gt;
&lt;p&gt;Now that the repo is cloned and we've checked out the &lt;code&gt;master&lt;/code&gt; branch, we need to initialize the virtual environment, and install the libraries we need for development:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; random_quote
&lt;span class="gp"&gt;$&lt;/span&gt; python -m venv .
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pip install -r requirements.txt
&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pip install -e .
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;We have to first change into the directory where we cloned the code.&lt;/p&gt;
&lt;p&gt;We invoke &lt;code&gt;venv&lt;/code&gt; using the &lt;code&gt;-m&lt;/code&gt; (execute this module) command line option to the python interpreter.&lt;/p&gt;
&lt;p&gt;To activate the virtual environment, we tell our shell to execute the commands in a file called &lt;code&gt;bin/activate&lt;/code&gt;. This sets some environment variables and changes our prompt.&lt;/p&gt;
&lt;p&gt;From there, we can use &lt;code&gt;pip&lt;/code&gt; as we would in our system, except the packages installed are installed to the virtual environment, instead of the system.&lt;/p&gt;
&lt;p&gt;We use two command-line flags of &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First, we use &lt;code&gt;-r&lt;/code&gt; to install first the files used for development, contained in &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, we use &lt;code&gt;-e&lt;/code&gt; to install the &lt;code&gt;random_quote&lt;/code&gt; egg. We specify the current directory (&lt;code&gt;.&lt;/code&gt;), since that's where our &lt;code&gt;setup.py&lt;/code&gt; is. This parameter tells &lt;code&gt;pip&lt;/code&gt; to install our project as a "development" or "editable" egg. This means we can change the source code, and we won't have to re-install the egg to see the changes in our python environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="application-implementation-notes"&gt;
&lt;h2 id="application implementation notes"&gt;Application Implementation Notes&lt;/h2&gt;
&lt;div class="section" id="deisgn-approach"&gt;
&lt;h3&gt;Deisgn Approach&lt;/h3&gt;
&lt;p&gt;The design of the application is in two main parts. We have a data manager, &lt;code&gt;manager.RandomQuoteManager&lt;/code&gt;, that handles all interaction with the database. Then we have the WSGI application, &lt;code&gt;wsgi.RandomQuoteApp&lt;/code&gt; that provides a web-based API.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/key-classes-first-pass.png"/&gt;
&lt;p class="caption"&gt;Key Classes In The Example Application, "Random Quote App"&lt;/p&gt;
&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is a simplified version of a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unified_Modeling_Language"&gt;UML&lt;/a&gt; class diagram.&lt;/p&gt;
&lt;p&gt;The classes are identified as &lt;span class="underline"&gt;underlined&lt;/span&gt; text. The modules are noted in the green boxes.&lt;/p&gt;
&lt;p&gt;Each public (or relevant) method is listed (methods are suffixed with parenthesis), as is each property.&lt;/p&gt;
&lt;p&gt;These two classes are shown to be related by a simple two-direction arrow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-right" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/api-boundaries.png"/&gt;
&lt;p class="caption"&gt;Essential API Boundaries&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is done for a few reasons. Primarily, the concept of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;separation of concerns&lt;/a&gt;. The &lt;em&gt;concern&lt;/em&gt; of the database interaction, the &lt;em&gt;concern&lt;/em&gt; of the web interaction, and the &lt;em&gt;concern&lt;/em&gt; of the web &lt;em&gt;client&lt;/em&gt; are separated by &lt;strong&gt;clear API boundaries&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;By doing this, we isolate code that has to be different by its nature. &lt;code&gt;RandomQuoteManager&lt;/code&gt; is concerned with managing and retrieving data in the database. &lt;code&gt;RandomQuoteApp&lt;/code&gt; is concerned with interacting with web clients. The web client is completely out of our control (a browser like &lt;a class="reference external" href="https://www.mozilla.org/en-US/firefox/new/"&gt;Firefox&lt;/a&gt;, a utility like &lt;a class="reference external" href="https://curl.haxx.se/"&gt;cURL&lt;/a&gt;, or another application).&lt;/p&gt;
&lt;p&gt;With proper separation, each concern can be optimized for its purpose. &lt;code&gt;RandomQuoteManager&lt;/code&gt; can do database interactions in the best possible way - we can employ an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORM&lt;/a&gt; someday, or change exactly how we store the data. &lt;code&gt;RandomQuoteApp&lt;/code&gt; will still function, as long as its python API hasn't changed.&lt;/p&gt;
&lt;p&gt;In the same vein, we can make &lt;code&gt;RandomQuoteApp&lt;/code&gt; the best web application possible - we can implement security, or caching - it can evolve into a socket-based API that doesn't use HTTP at all!&lt;/p&gt;
&lt;p&gt;Finally, the concerns of the client are theirs alone. Today we may be building our application for use by a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Single-page_application"&gt;single page application&lt;/a&gt; intended for a browser client. Tomorrow, the random quote service may be used in a network of  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Microservices"&gt;microservices&lt;/a&gt;, where the client will be another service.&lt;/p&gt;
&lt;p&gt;We may write console scripts that use the web API via tools like cURL as part of systems automation.&lt;/p&gt;
&lt;p&gt;Whatever the client exactly is, it can be the &lt;em&gt;best&lt;/em&gt; client for whatever its purpose. As long as the web API is understood by the client, everything keeps working.&lt;/p&gt;
&lt;p&gt;This is entirely in terms of functionality. But there are benefits to this separation for us as developers too.&lt;/p&gt;
&lt;p&gt;Having well-separated API boundaries means the code behind those boundaries can be much more simplistic.&lt;/p&gt;
&lt;p&gt;Lets take a look at two methods that serve similar functions in &lt;code&gt;RandomQuoteManager&lt;/code&gt; and &lt;code&gt;RandomQuoteApp&lt;/code&gt;, both called &lt;code&gt;get()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src/random_quote/manager.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Retrieve a specific quote from the database, identified by id_.&lt;/span&gt;

&lt;span class="sd"&gt;        Returns a dictionary.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT id, author, quote, created FROM quotes WHERE id = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is just one method from the &lt;code&gt;RandomQuoteManager&lt;/code&gt; class. It uses the DBAPI interface to sqlite 3 to get a cursor, and execute a &lt;code&gt;SELECT&lt;/code&gt; SQL statement.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;conn&lt;/code&gt; attribute, a sqlite database connection object, is created in the constructor.&lt;/p&gt;
&lt;p&gt;It then retrieves the data, and then processes it into a dictionary for consumption.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;src/random_quote/manager.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return a webob.Response object with a JSON payload containing the&lt;/span&gt;
&lt;span class="sd"&gt;        requested quote. The quote id is specified as the last part of the&lt;/span&gt;
&lt;span class="sd"&gt;        request path:&lt;/span&gt;

&lt;span class="sd"&gt;            /quote/12345&lt;/span&gt;


&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/([^/]+)$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This method, from &lt;code&gt;RandomQuoteApp&lt;/code&gt;, accepts a &lt;code&gt;WebOb.Request&lt;/code&gt; object. It does a regular-expression search for the quote ID in the path of the request (e.g. &lt;code&gt;/quote/1234&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If there is no ID specified, it makes the router return a 404 "Not Found" response, by raising the &lt;code&gt;HTTPNotFound&lt;/code&gt; class as an exception.&lt;/p&gt;
&lt;p&gt;It then uses the &lt;code&gt;RandomQuoteManager.get()&lt;/code&gt; method, via the &lt;code&gt;manager&lt;/code&gt; property, to retrieve the requested quote from the database.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;WebOb.Resoponse&lt;/code&gt; object is created, named &lt;code&gt;response&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The returned &lt;code&gt;quote&lt;/code&gt; dictionary is processed into a JSON string, and the &lt;code&gt;response&lt;/code&gt; object is configured to send the proper &lt;code&gt;Content-Type&lt;/code&gt; header, and the JSON string as the response body.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;response&lt;/code&gt; object is returned.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both of these methods do essentially the same thing - they retrieve a specific quote from the database, identified by its &lt;code&gt;id&lt;/code&gt;. The difference is that one accepts the id as a method parameter, and the other extracts it from the HTTP request.&lt;/p&gt;
&lt;p&gt;You can imagine these simple methods could be easily combined into &lt;em&gt;one&lt;/em&gt; method.&lt;/p&gt;
&lt;p&gt;After all, this is primarily a web application, and there's no specific use case right now for someone using the &lt;code&gt;RandomQuoteManager&lt;/code&gt; directly. 🤔&lt;/p&gt;
&lt;p&gt;Here's what that might look like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BeginningOfAGiantMessApp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/([^/]+)$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT id, author, quote, created FROM quotes WHERE id=?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),))&lt;/span&gt;

        &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is a bit of a cutup of what would be a new version of the &lt;code&gt;RandomQuoteApp&lt;/code&gt;, named &lt;code&gt;BeginningOfAGiantMessApp&lt;/code&gt; as a tongue-in cheek commentary on how this would be a bad idea. 😎&lt;/p&gt;
&lt;p&gt;We try to root the example in line with the class declaration and constructor of &lt;code&gt;RandomQuoteApp&lt;/code&gt; in &lt;code&gt;src/random_quote/wsgi.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll need to make a database connection in the WSGI app now, so we had to alter the constructor.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;get()&lt;/code&gt; code itself is just an amalgam of the other two methods.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Combining the two methods is pretty straight forward. However, you can see that even with the very simple functionality in this method, things are getting a bit muddy. As the application grows and changes, it will just get worse.&lt;/p&gt;
&lt;p&gt;Modifying this amalgam is much more risky. We can very easily break the database code fixing a web API issue and vice-versa. It's hard for two developers to work on this part of the code base concurrently without running into conflicts.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;We will learn how to deal with that situation, however unlikely, in &lt;a class="reference external" href="/branching-git-with-pytest-3.rst"&gt;part 3&lt;/a&gt;! 🦄&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;But worse, its also harder to &lt;em&gt;test&lt;/em&gt;. This may be one of the biggest advantages to putting thought into separation of concerns, and creating sane API boundaries. When testing the nightmare code above, we have to simulate an HTTP request just to make sure the database works, and we need the database functioning to ensure the HTTP stuff functions. This leads to more complex test fixtures and complex object mocking, and ultimately more fragile test suites.&lt;/p&gt;
&lt;p&gt;When writing software, its best to keep our units as small as possible and loosely coupled, so they can be easily isolated. Then our tests are simple and reliable.&lt;/p&gt;
&lt;p&gt;The core design of this example application takes this to heart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-design"&gt;
&lt;h3&gt;Application Design&lt;/h3&gt;
&lt;p&gt;The application as it stands for this part of the guide incorporates concepts of separation of concerns as explored in the last section:&lt;/p&gt;
&lt;div class="figure align-center" style="width: 80%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/application-overview-first-pass.png"/&gt;
&lt;p class="caption"&gt;"Random Quote App" Overview&lt;/p&gt;
&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This diagram picks up where the last left off. It is again a simplified diagram inspired by UML.&lt;/p&gt;
&lt;p&gt;The classes are identified as &lt;span class="underline"&gt;underlined&lt;/span&gt; text. The modules are noted in the green boxes.&lt;/p&gt;
&lt;p&gt;Each public (or relevant) method is listed (methods are suffixed with parenthesis), as is each property.&lt;/p&gt;
&lt;p&gt;Here we see the database connectivity and the HTTP client as actors in the relationships.&lt;/p&gt;
&lt;p&gt;We also add connections between class properties and the classes or functions that provide them.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We take the separation of concerns a step further in the complete application design. We've delegated the construction of database connections to a factory function called &lt;code&gt;connection()&lt;/code&gt; in the &lt;code&gt;util&lt;/code&gt; module. This way there is a &lt;em&gt;single source of truth&lt;/em&gt; for what a database connection looks like, and we aren't duplicating the same connection code in multiple places (the benefit of this will become more apparent later on when we add a new feature that uses the database).&lt;/p&gt;
&lt;p&gt;In the diagram above you can see how the classes depend on each other:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;RandomQuoteApp&lt;/code&gt; creates a &lt;code&gt;RandomQuoteManager&lt;/code&gt; in its constructor, and assigns it to the &lt;code&gt;manager&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RandomQuoteApp&lt;/code&gt; and &lt;code&gt;RandomQuoteManager&lt;/code&gt; both take database configuration (a filename). &lt;code&gt;RandomQuoteManager&lt;/code&gt; uses &lt;code&gt;connection()&lt;/code&gt; to create a connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;connection()&lt;/code&gt; configures the sqlite connection so all classes that use it will know what to expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-model"&gt;
&lt;h3&gt;Data Model&lt;/h3&gt;
&lt;p&gt;The initial database schema is very simple, but uses a somewhat advanced technique to select random quotes.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 40%"&gt;
&lt;img alt="" src="/images/branching-git-pytest/er-diagram-first-pass.png"/&gt;
&lt;/div&gt;
&lt;p&gt;We've got a &lt;code&gt;quotes&lt;/code&gt; table with four main columns:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;code&gt;id&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is the unique identifier for each quote, and how they will be located. It is a &lt;em&gt;primary key&lt;/em&gt;, and will be automatically filled in with the next-highest value.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;author&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is the person whom the quote is credited to. It is stored as a text field.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;quote&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The actual quote. Also a text field.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;created&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The date the quote was created. This is stored as a text field, since sqlite doesn't have a dedicated date/time field type. We use the &lt;code&gt;datetime()&lt;/code&gt; sqlite function to populate it automatically.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;We then have a special column, &lt;code class="bold"&gt;rand&lt;/code&gt;, that stores a random number. It's generated using the sqlite &lt;code&gt;random()&lt;/code&gt; function if it's not specified. We've added an index on this column so it can be sorted efficiently.&lt;/p&gt;
&lt;p&gt;Here's the SQL command we're using to generate the table (this is locaed in &lt;code&gt;src/random_quote/schema.sql&lt;/code&gt;):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'now'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="k"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;quotes_rand&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;We use &lt;code&gt;rand&lt;/code&gt; to easily get a random row in the table using a simple query:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;ABS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This is a bit more efficient than the usual &lt;code&gt;ORDER BY random()&lt;/code&gt; approach, and it has an added benefit: we can fix all the random values during tests if we provide the random numbers in python. You can see this in action in &lt;code&gt;src/random_quote/manager.py&lt;/code&gt;, in the &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt; method:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;RAND_MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9223372036854775808&lt;/span&gt;
&lt;span class="n"&gt;RAND_MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9223372036854775807&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return a random integer between RAND_MIN and RAND_MAX (simulates&lt;/span&gt;
&lt;span class="sd"&gt;        the random() function in sqlite)&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RAND_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RAND_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;        Return a random quote from the database.&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="hll"&gt;        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT id, author, quote, created FROM quotes ORDER BY ABS(rand - ?) LIMIT 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;In this example, we've abbreviated the source of &lt;code&gt;RandomQuoteManager&lt;/code&gt; a bit so we can focus just on the parts that are relevant to the &lt;code&gt;random()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;sqlite3 has a &lt;a class="reference external" href="https://www.sqlite.org/lang_corefunc.html#random"&gt;random() function&lt;/a&gt; as well. It returns integer values between &lt;em&gt;-9223372036854775808&lt;/em&gt; and &lt;em&gt;+9223372036854775807&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In our SQL &lt;code&gt;CREATE&lt;/code&gt; statement, we're setting the default value of &lt;code&gt;rand&lt;/code&gt; to &lt;code&gt;random()&lt;/code&gt;. This will invoke the sqlite function if a value isn't specified.&lt;/p&gt;
&lt;p&gt;We emulate that functionality in our python code so we can interfere with the way random numbers are generated. This is not possible if we were to rely on sqlite to do set the value of &lt;code&gt;rand&lt;/code&gt; for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;See the &lt;a class="reference external" href="https://stackoverflow.com/questions/24256258/order-by-random-with-seed-in-sqlite?noredirect=1&amp;amp;lq=1"&gt;ORDER BY random() with seed in SQLITE&lt;/a&gt; on StackOverflow for some discussion about this topic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;If you're curious how we might go about fixing the random values, stay tuned, we're going to do that shortly! 🦄&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="background-for-the-uninitiated"&gt;
&lt;h2 id="background for the uninitiated"&gt;Background For The Uninitiated&lt;/h2&gt;
&lt;p&gt;This section will briefly discuss the libraries and technology involved, and provide links where you can get more information.&lt;/p&gt;
&lt;div class="section" id="git"&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;p&gt;git is a &lt;em&gt;distributed&lt;/em&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Version_control"&gt;source control management system&lt;/a&gt; (also known as "revision control" or "version control"). It was developed by Linus Torvalds for use in Linux kernel development. See &lt;a class="reference external" href="https://git-scm.com/about"&gt;About - Git&lt;/a&gt; for more information about why git is useful.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://git-scm.com/doc"&gt;documnetation&lt;/a&gt; is very good, but quite dense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="venv"&gt;
&lt;h3&gt;venv&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; is a virtual environment manager for Python. The &lt;a class="reference external" href="https://docs.python.org/3/tutorial/venv.html"&gt;venv tutorial&lt;/a&gt; has all the essential information and usage details.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; superceeds older tools like &lt;a class="reference external" href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;. It's handy because it is now included in the standard library.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;For a nice overview of the virtual enviromnent scene in Python (and to get a sense of why so many are confused by it), &lt;a class="reference external" href="https://stackoverflow.com/a/41573588/11090167"&gt;an answer to a question on Stack Overflow&lt;/a&gt; is about the best I've seen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sqlite3"&gt;
&lt;h3&gt;sqlite3&lt;/h3&gt;
&lt;p&gt;sqlite is a robust, but easy to use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Relational_database"&gt;relational database management system&lt;/a&gt;. sqlite3 is the latest version.&lt;/p&gt;
&lt;p&gt;sqlite provides the concept of &lt;em&gt;tables&lt;/em&gt; containing &lt;em&gt;rows&lt;/em&gt; of structured information.&lt;/p&gt;
&lt;p&gt;As opposed to other RDBMS', like &lt;a class="reference external" href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;, sqlite does not its own server, and cannot be easily shared across machines. Sqlite was chosen for the example project because Python has a &lt;a class="reference external" href="https://docs.python.org/3/library/sqlite3.html"&gt;built-in sqlite3 library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.sqlite.org/index.html"&gt;sqlite webstie&lt;/a&gt; has comprehensive information about how sqlite works and its capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wsgi"&gt;
&lt;h3&gt;WSGI&lt;/h3&gt;
&lt;p&gt;Web applications are typically executed by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Web_server"&gt;web servers&lt;/a&gt;, like &lt;a class="reference external" href="https://www.nginx.com/"&gt;ngnix&lt;/a&gt;, &lt;a class="reference external" href="https://gunicorn.org/"&gt;gunicorn&lt;/a&gt;, or &lt;a class="reference external" href="https://httpd.apache.org/"&gt;apache&lt;/a&gt;. This abstracts away the need for application code to handle things like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Fork_(system_call)"&gt;managing processes&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Berkeley_sockets"&gt;managing sockets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To provide that abstraction, web servers support various kinds of &lt;em&gt;gateway interfaces&lt;/em&gt;. A common and historically relevant one is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Gateway_Interface"&gt;Common Gateway Interface (CGI)&lt;/a&gt;. It essentially calls for the web server to execute a program like a user might on the command line, streams the request on standard in, and reads the response on standard out. Specific environment variables are defined to convey useful information to the program.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Reading &lt;a class="reference external" href="https://tools.ietf.org/html/rfc3875"&gt;RFC3875&lt;/a&gt;, where the CGI specification is defined is highly recommended for any web developer.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;CGI had some rough edges and imposed some limitations that made writing web apps with Python a little more cumbersome. In 2003, &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-333/"&gt;PEP333&lt;/a&gt;  was submitted (and subsequently superseded by &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP3333&lt;/a&gt;), outlining a new way for Python applications to integrate with web servers, that sought to overcome the flaws in CGI.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3333/"&gt;PEP3333&lt;/a&gt; lays out the specification in detail. The basics are that a WSGI application is a Python &lt;em&gt;callable&lt;/em&gt; (a function, a class that implements a &lt;code&gt;__call__()&lt;/code&gt; method) that takes a few specific parameters (including a dictionary of gateway information inspired by CGI), and then returns an &lt;em&gt;iterable&lt;/em&gt; object, containing the body of the response.&lt;/p&gt;
&lt;p&gt;We're using &lt;a class="reference external" href="https://docs.pylonsproject.org/projects/webob/en/stable/"&gt;WebOb&lt;/a&gt; to handle most of this for us. In &lt;code&gt;RandomQuoteApp&lt;/code&gt;, we work with &lt;code&gt;webob.Request&lt;/code&gt; objects and return &lt;code&gt;webob.Response&lt;/code&gt; objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="webob"&gt;
&lt;h3&gt;WebOb&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pylonsproject.org/projects/webob/en/stable/"&gt;WebOb&lt;/a&gt; is part of the &lt;a class="reference external" href="https://pylonsproject.org/"&gt;Pylons&lt;/a&gt; and &lt;a class="reference external" href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt; projects. It has a narrow scope, designed to help a web developer make sense of an incoming request, and construct WSGI-compliant responses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest"&gt;
&lt;h3&gt;Pytest&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pytest.org/en/latest/"&gt;Pytest&lt;/a&gt; is a newer testing framework for Python. It is simpler than, but compatible with, the built-in &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.html"&gt;unittest module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pytest uses a convention-over-configuration approach. Test suites and test cases are discovered simply by being named a certain way. However, that discovery process is highly configurable. 😎&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="webtest"&gt;
&lt;h3&gt;WebTest&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.pylonsproject.org/projects/webtest/en/latest/"&gt;WebTest&lt;/a&gt;, another &lt;a class="reference external" href="https://pylonsproject.org/"&gt;Pylons&lt;/a&gt; project, provides an easy way to test WSGI applications in a very realistic way, without having to run a fully-functioning web server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-the-tests"&gt;
&lt;h2 id="run the tests"&gt;Run The Tests&lt;/h2&gt;
&lt;p&gt;Now that we have the code, we've initialized our environment, and we understand what we're working on, we can run the tests. This is done with the &lt;code&gt;pytest&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 6 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py ....                               [ 66%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ..                                    [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 6 passed in 0.20 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This is one of many ways to have &lt;code&gt;pytest&lt;/code&gt; collect and run tests. We're specifying a directory to search for, instead of a module or a specific file.&lt;/p&gt;
&lt;p&gt;The output above is illustrative of a successful test run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="initialize-the-database-and-add-some-quotes"&gt;
&lt;h2 id="initialize the database and add some quotes"&gt;Initialize The Database And Add Some Quotes&lt;/h2&gt;
&lt;p&gt;We have utility functions, &lt;code&gt;random_quote.util.init()&lt;/code&gt; and &lt;code&gt;random_quote.util.ingest()&lt;/code&gt; to create all the tables we need, and insert some quotes to get the database going.&lt;/p&gt;
&lt;p&gt;For the sake of completeness, we'll also use the &lt;code&gt;RandomQuoteManager&lt;/code&gt; to add a few unique quotes and show how the API works.&lt;/p&gt;
&lt;p&gt;First, lets create a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comma-separated_values"&gt;CSV&lt;/a&gt; file containing some quotes, called &lt;code&gt;quotes.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can do this using your favorite spreadsheet program, a text editor, or (recommended) use the provided &lt;code&gt;generate_quotes.py&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python scripts/generate_quotes.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To initialize the database and mess with the API, lets start a python prompt in our virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python
&lt;span class="go"&gt;Python 3.7.3 (default, Mar 30 2019, 03:37:43)&lt;/span&gt;
&lt;span class="go"&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll put our database in a file named &lt;code&gt;test.db&lt;/code&gt; in the current directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, lets load &lt;code&gt;quotes.csv&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ingest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"quotes.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can use the &lt;code&gt;RandomQuoteManager&lt;/code&gt; to look at what we've loaded:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote.manager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;rqm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.db"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;{"id": 1, "quote":"When I get a little money I buy books; and if any is left, I buy food and clothes.", "author":"Erasmus"...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can use it to add a new quote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Something quite quotable"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;1001&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;add()&lt;/code&gt; method returns the id of the newly created quote.&lt;/p&gt;
&lt;p&gt;Note that the author is &lt;em&gt;optional&lt;/em&gt;, and defaults to &lt;code&gt;Unknown&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;{'id': 1001, 'author': 'Unknown', 'quote': 'Something quite quotable',...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To exit the console, press &lt;code&gt;ctrl-D&lt;/code&gt;, or run the &lt;code&gt;exit()&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-comfortable-with-git-and-pytest"&gt;
&lt;h2 id="getting comfortable with git and pytest"&gt;Getting Comfortable With Git And Pytest&lt;/h2&gt;
&lt;p&gt;As a first step, lets add a new pytest fixture and some test cases. We won't bother doing any branching. This will get us acquainted with how pytest works, and we'll get comfortable with the most basic git commands: &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git commit&lt;/code&gt;, and &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pytest-basics"&gt;
&lt;h2 id="pytest basics"&gt;Pytest Basics&lt;/h2&gt;
&lt;p&gt;Pytest uses the concept of  &lt;em&gt;convention over configuration&lt;/em&gt; to provide a lot of flexbility when writing tests. All you need to do is provide a python module that has the &lt;code&gt;test_&lt;/code&gt; prefix, and fill it with functions that also begin with &lt;code&gt;test_&lt;/code&gt;. Pytest will collect these functions and run them for you.&lt;/p&gt;
&lt;p&gt;To make a test fail, pytest utilizes the python built-in &lt;code&gt;assert&lt;/code&gt; keyword. &lt;code&gt;assert&lt;/code&gt; evaluates the given expression, and raises an exception if the expression evaluates to &lt;code&gt;False&lt;/code&gt;. Pytest leverages this to make writing tests straight forward: you are simply making &lt;em&gt;assertions&lt;/em&gt; about the truth of some expression.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;For more details, see &lt;a class="reference external" href="https://docs.pytest.org/en/latest/getting-started.html"&gt;Installation And Getting Started&lt;/a&gt; in the &lt;a class="reference external" href="https://docs.pytest.org/en/latest"&gt;pytest documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's a contrived &lt;em&gt;test suite&lt;/em&gt; (collection of tests) that pytest can run. Save it as &lt;code&gt;test_example.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_phi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Ensure phi isn't 2.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;This &lt;em&gt;test suite&lt;/em&gt; consists of a single &lt;em&gt;test case&lt;/em&gt;, named &lt;code&gt;test_phi()&lt;/code&gt;. It has a &lt;em&gt;helper function&lt;/em&gt; named &lt;code&gt;phi()&lt;/code&gt; that generates &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Golden_ratio"&gt;The Golden Ratio&lt;/a&gt;, also known as ϕ.&lt;/p&gt;
&lt;p&gt;This test is non-sensical, simply asserting that ϕ != 2.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As before, we can use &lt;code&gt;pytest&lt;/code&gt; to run our test case, but this time we'll specify the file instead of &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest test_example.py
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.2, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 1 item&lt;/span&gt;

&lt;span class="go"&gt;test_example.py .                                                         [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 1 passed in 3.30 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case, only the &lt;code&gt;test_phi()&lt;/code&gt; &lt;em&gt;test case&lt;/em&gt; is run directly by &lt;code&gt;pytest&lt;/code&gt;. The &lt;code&gt;phi()&lt;/code&gt; function itself is not.&lt;/p&gt;
&lt;p&gt;To prove this, we can ask &lt;code&gt;pytest&lt;/code&gt; to be more &lt;em&gt;verbose&lt;/em&gt;, using the &lt;code&gt;-v&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest -v test_example.py
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 1 item&lt;/span&gt;

&lt;span class="go"&gt;test_example.py::test_phi PASSED                                          [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 1 passed in 0.01 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next thing you should know is how to write &lt;em&gt;test fixtures&lt;/em&gt;. With pytest, fixtures are just specially &lt;a class="reference external" href="https://realpython.com/primer-on-python-decorators/"&gt;decorated functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what are fixtures for? Fixtures allow us to do some set up work before each test is run, and clean up (or &lt;em&gt;tear down&lt;/em&gt;) after. In our &lt;code&gt;random_quote&lt;/code&gt; application, it's used to create a database and add some data to it. The database is then destroyed after the test.&lt;/p&gt;
&lt;p&gt;Fixtures are decorated with &lt;code&gt;pytest.fixture&lt;/code&gt; . To use them in a test, you take a parameter that has the same name. If you &lt;code&gt;return&lt;/code&gt; a value, it's passed to the test case. If you &lt;code&gt;yield&lt;/code&gt; one, the &lt;code&gt;yield&lt;/code&gt; ed value is passed, and control returns to your fixture to clean up after the test.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;The terms &lt;em&gt;set up&lt;/em&gt; and &lt;em&gt;tear down&lt;/em&gt; are fundamental automated testing terms. In a lot of other testing frameworks, test suites have special functions or methods with names like &lt;code&gt;setUp&lt;/code&gt; and &lt;code&gt;tearDown&lt;/code&gt; that provide the same functionality as pytest's fixtures. 🌈&lt;/p&gt;
&lt;p class="last"&gt;What's cool about pytest, is that fixtures serve the same purpose, but are much more robust. You can change the scope of a fixture by providing the &lt;code&gt;scope&lt;/code&gt; keyword argument when decorating a fixture function. &lt;a class="reference external" href="https://docs.pytest.org/en/latest/fixture.html#scope-sharing-a-fixture-instance-across-tests-in-a-class-module-or-session"&gt;More details can be found in the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;More contrived examples will illustrate how fixtures work:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;returned_value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"boo"&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;yielded_value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt;
    &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Goodbye"&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s2"&gt;"baz"&lt;/span&gt;
    &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_phi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Ensure phi isn't 2.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;phi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_returned&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returned_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;returned_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"boo"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_yielded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yielded_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;yielded_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"baz"&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Goodbye"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_no_fixture&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;CHANGE_ME&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="explanation section"&gt;
&lt;h3&gt;Explanation&lt;/h3&gt;
&lt;div class="docutils container"&gt;
&lt;/div&gt;
&lt;p&gt;In this example, we've set up two fixtures to illustrate using &lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt;, named &lt;code&gt;yielded_value()&lt;/code&gt; and &lt;code&gt;returned_value()&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;To show that something has changed due to using the &lt;code&gt;yielded_value()&lt;/code&gt; fixture, we set up a global variable, &lt;code&gt;CHANGE_ME&lt;/code&gt;. We use the &lt;code&gt;global&lt;/code&gt; keyword to allow our fixture to change a value outside of its scope.&lt;/p&gt;
&lt;p&gt;The new test suites, &lt;code&gt;test_returned()&lt;/code&gt;, &lt;code&gt;test_yielded()&lt;/code&gt;, and &lt;code&gt;test_no_fixture()&lt;/code&gt; illustrate how fixtures are consumed by test suites.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_yielded()&lt;/code&gt; shows that we can use multiple &lt;code&gt;assert&lt;/code&gt; statements in one test case if we wish.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This is not considered &lt;a class="reference external" href="http://programmaticallyspeaking.com/one-assertion-per-test-please.html"&gt;a best practice&lt;/a&gt;, and so it should be used sparingly (more discussion on &lt;a class="reference external" href="https://softwareengineering.stackexchange.com/questions/7823/is-it-ok-to-have-multiple-asserts-in-a-single-unit-test"&gt;the software enginering stack exchange&lt;/a&gt;, but it can be useful to save some typing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When we run the new test cases, we see everything passes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest -v test_example.py
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 4 items&lt;/span&gt;

&lt;span class="go"&gt;test_example.py::test_phi PASSED                                          [ 25%]&lt;/span&gt;
&lt;span class="go"&gt;test_example.py::test_returned PASSED                                     [ 50%]&lt;/span&gt;
&lt;span class="go"&gt;test_example.py::test_yielded PASSED                                      [ 75%]&lt;/span&gt;
&lt;span class="go"&gt;test_example.py::test_no_fixture PASSED                                   [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 4 passed in 0.20 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;For more information about pytest's fixtures, the &lt;a class="reference external" href="https://docs.pytest.org/en/latest/fixture.html"&gt;documentation&lt;/a&gt; explains all the cool things you can do with them. 🦄&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, lets look at some practical examples, taken from our &lt;code&gt;random_quote&lt;/code&gt; project.&lt;/p&gt;
&lt;div class="section" id="how-pytest-is-used-in-random-quote"&gt;
&lt;h3&gt;How pytest is used in &lt;code&gt;random_quote&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Here's the current state of &lt;code&gt;src/random_quote/tests/test_manager.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;Tests for the RandomQuoteManager class&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_add_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Add a single quote.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;id_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"This is a really cool quote"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Get a quote by id&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 2'&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_remove_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Remove a single quote&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM quotes WHERE id = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

    &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retrieve a list of all quotes in the DB.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;quotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 1'&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 2'&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 3'&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"quote"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Generic Quote 20'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You'll notice that each test case uses a fixture called &lt;code&gt;preconfigured_manager&lt;/code&gt;, but that function isn't defined in the &lt;code&gt;test_manager.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Instead, we take advantage of pytest's use of a special configuration file called &lt;code&gt;conftest.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code&gt;src/random_quote/tests/conftest.py&lt;/code&gt; looks like right now:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webtest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestApp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;filehandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkstemp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"random_quote_"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create a RandomQuoteManager, and initialize the database.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;rqm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAND_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAND_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"INSERT INTO quotes (author, quote, rand) VALUES (?, ?, ?)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Unknown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Generic Quote {i}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;rqm&lt;/span&gt;

    &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create an instance of RandomQuoteApp, with a preconfigured RandomQuoteManager,&lt;/span&gt;
&lt;span class="sd"&gt;    wrapped in a TestApp instance, ready for functional testing.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;You'll note that we have three fixtures defined in this file. The first, &lt;code&gt;temp_db()&lt;/code&gt;, creates a temporary file (using the built-in &lt;a class="reference external" href="https://docs.python.org/3/library/tempfile.html"&gt;tempfile&lt;/a&gt; module) to store the sqlite database. After it returns the path to the temporary file, when the fixture finishes, it deletes it. This is a perfect example of situations where fixtures are particularly useful.&lt;/p&gt;
&lt;p&gt;Next, we have &lt;code&gt;preconfigured_manager()&lt;/code&gt;, a fixture that uses the &lt;code&gt;util&lt;/code&gt; module to initialize the database, then plain SQL statements to pre-populate it. After returning the &lt;code&gt;RandomQuoteManager&lt;/code&gt; object, it closes the connection to ensure it's freed before the next test.&lt;/p&gt;
&lt;p&gt;We can see how fixtures can be chained in the same way we use fixtures in test cases, as &lt;code&gt;preconfigured_manager()&lt;/code&gt; takes &lt;code&gt;temp_db&lt;/code&gt; as a parameter. Multiple fixtures can be used as well, by taking multiple parameters, as illustrated by &lt;code&gt;preconfigured_wsgi_app&lt;/code&gt;. Pytest ensures all the cleanup is done in the correct order.&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;preconfigured_wsgi_app&lt;/code&gt; sets up a &lt;code&gt;WebTest.TestApp&lt;/code&gt; instance, wrapping a &lt;code&gt;RandomQuoteApp&lt;/code&gt; instance. We aren't using the return value of &lt;code&gt;preconfigured_manager()&lt;/code&gt; in &lt;code&gt;preconfigured_wsgi_app()&lt;/code&gt;, but we do want the database initialization and data population to be done for us. Even though &lt;code&gt;temp_db&lt;/code&gt; is used by both fixtures, it is only called once, ensuring that the database path used by &lt;code&gt;preconfigured_manager()&lt;/code&gt; is identical to the one used by &lt;code&gt;preconfigured_wsgi_app()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now that we understand the basics of using pytest, lets fill in some missing tests and do our first &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="something-is-missing-writing-our-first-test-and-fixture"&gt;
&lt;h2 id="something is missing! (writing our first test and fixture)"&gt;Something Is Missing! (Writing Our First Test and Fixture)&lt;/h2&gt;
&lt;p&gt;The last developer who worked on this project (yours truly 😎) has made a pretty big error. We have a good amount of tests, but none of them use the &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt; method. It's a big oversight, given that the whole point of this project is to generate random quotes.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;This is a great reason to look into &lt;em&gt;test coverage analysis&lt;/em&gt;, in particular the &lt;a class="reference external" href="https://coverage.readthedocs.io/en/v4.5.x/"&gt;coverage.py&lt;/a&gt; library.&lt;/p&gt;
&lt;p class="last"&gt;If we were using coverage analysis, we'd have noticed that there was a method that wasn't exercised in the tests.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We shouldn't be too hard on our predecessor, since they were put into a tough spot. Our quotes are inserted and retrieved using python's built-in psuedo-random number generation tools (the &lt;a class="reference external" href="https://docs.python.org/3/library/random.html"&gt;random&lt;/a&gt; module). Every time a function in that module is called (e.g. &lt;code&gt;random.randint()&lt;/code&gt;), it will likely produce a different output.&lt;/p&gt;
&lt;p&gt;That means that if we were to write a test case for the &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt; method, the test case would fail &lt;em&gt;randomly&lt;/em&gt; every time it is run. 🤔&lt;/p&gt;
&lt;p&gt;Lets see this in action. Here's a test case for &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt;, that you should add to the end of &lt;code&gt;src/random_quote/tests/test_manager.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;58
59
60
61
62
63
64
65&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_random_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retrieve a random quote.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, if we run the tests, we will likely get a failure (if you don't, try running them again):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;==================================== test session starts =====================================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 7 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py ....F                                           [ 71%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ..                                                 [100%]&lt;/span&gt;

&lt;span class="go"&gt;========================================== FAILURES ==========================================&lt;/span&gt;
&lt;span class="go"&gt;_____________________________________ test_random_quote ______________________________________&lt;/span&gt;

&lt;span class="go"&gt;preconfigured_manager = &amp;lt;random_quote.manager.RandomQuoteManager object at 0x10f6e9908&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;    def test_random_quote(preconfigured_manager):&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;
&lt;span class="go"&gt;        Retrieve a random quote.&lt;/span&gt;
&lt;span class="go"&gt;        """&lt;/span&gt;

&lt;span class="go"&gt;        quote = preconfigured_manager.random()&lt;/span&gt;

&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;       assert quote&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
&lt;span class="go"&gt;E       assert 10 == 12&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py:65: AssertionError&lt;/span&gt;
&lt;span class="go"&gt;============================= 1 failed, 6 passed in 0.25 seconds =============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how do we fix this? We alluded to "fixing" the randomness of our code earlier. How is this possible?&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;seed()&lt;/code&gt; function in the &lt;code&gt;random&lt;/code&gt; module that &lt;a class="reference external" href="https://docs.python.org/3/library/random.html#random.seed"&gt;re-initializes the random number generator&lt;/a&gt;. It can take a parameter, which is used to provide &lt;em&gt;reproducible&lt;/em&gt; randomness.&lt;/p&gt;
&lt;p&gt;When used, everything will function properly: if you were to call a random function multiple times under normal circumstances and get a different value, you still would. But the values would be (likely) different, and the same values will be returned. This happens &lt;em&gt;every time&lt;/em&gt; that &lt;code&gt;random.seed()&lt;/code&gt; is called with the same value.&lt;/p&gt;
&lt;p&gt;Here's how that works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; python
&lt;span class="go"&gt;Python 3.7.3 (default, Mar 30 2019, 03:37:43)&lt;/span&gt;
&lt;span class="go"&gt;[Clang 10.0.0 (clang-1000.11.45.5)] on darwin&lt;/span&gt;
&lt;span class="go"&gt;Type "help", "copyright", "credits" or "license" for more information.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;6&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;3&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;7&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ramdom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See how the first call to &lt;code&gt;random.randint(0, 10)&lt;/code&gt; after &lt;code&gt;random.seed(4)&lt;/code&gt; always returns &lt;code&gt;3&lt;/code&gt;? This will be the case across machines. Where the initial call returns &lt;code&gt;6&lt;/code&gt; for me, it will likely return something else for you. However, once we pass a fixed seed, we get reproducible results.&lt;/p&gt;
&lt;p&gt;Lets add a test fixture to the top of &lt;code&gt;src/random_quote/tests/conftest.py&lt;/code&gt; that calls &lt;code&gt;random.seed()&lt;/code&gt; with a fixed value:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_random&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;We don't actually yield a value here. This is totally acceptable, but in the future we may want to return something that the test cases can use, like the value we used for the seed.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After the &lt;code&gt;yield&lt;/code&gt;, we call &lt;code&gt;random.seed()&lt;/code&gt; with no explicit value. That re-seeds the random number generator with the default value, which is the way it normally works (usually it's seeded with the system time).&lt;/p&gt;
&lt;p&gt;In order to use this fixture, we just need to pass &lt;code&gt;fix_random&lt;/code&gt; as a parameter to &lt;code&gt;preconfigured_manager()&lt;/code&gt;. Every test case that uses &lt;code&gt;preconfigured_manager&lt;/code&gt;, or any test cases that use fixtures that use &lt;code&gt;preconfigured_manager&lt;/code&gt;, will have their randomness "fixed" with the same seed.&lt;/p&gt;
&lt;p&gt;Here's the new version of &lt;code&gt;src/random_quote/tests/conftest.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random_quote&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webtest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestApp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_random&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="k"&gt;yield&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;
&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;filehandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkstemp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"random_quote_"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fix_random&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create a RandomQuoteManager, and initialize an in-memory database.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;rqm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAND_MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RAND_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"INSERT INTO quotes (author, quote, rand) VALUES (?, ?, ?)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Unknown"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"Generic Quote {i}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;rqm&lt;/span&gt;

    &lt;span class="n"&gt;rqm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preconfigured_manager&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Create an instance of RandomQuoteApp, with a preconfigured RandomQuoteManager,&lt;/span&gt;
&lt;span class="sd"&gt;    wrapped in a TestApp instance, ready for functional testing.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomQuoteApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_db&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Now, running the tests again, we see that the new test case &lt;code&gt;test_random_quote()&lt;/code&gt; passes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 7 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py .....                              [ 71%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py ..                                    [100%]&lt;/span&gt;

&lt;span class="go"&gt;=========================== 7 passed in 0.46 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="our-first-git-commit"&gt;
&lt;h2 id="our first git commit"&gt;Our First &lt;code&gt;git commit&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The most basic way to work with &lt;code&gt;git&lt;/code&gt; is to make a clone of a repository, make changes on the default branch, usually called &lt;code&gt;master&lt;/code&gt;, then &lt;code&gt;git commit&lt;/code&gt;, followed by &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While it's not best practice to do this most of the time, it's a little less complicated than a fully-baked branch-based development workflow. So we'll take it easy with this first batch of changes, so we can get acquainted with git.&lt;/p&gt;
&lt;p&gt;First, we need to ask git what has changed. We do this using &lt;code&gt;git status&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch master&lt;/span&gt;
&lt;span class="go"&gt;Your branch is up to date with 'origin/master'.&lt;/span&gt;

&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/tests/conftest.py&lt;/span&gt;
&lt;span class="go"&gt;    modified:   src/random_quote/tests/test_manager.py&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    quotes.csv&lt;/span&gt;
&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;span class="go"&gt;    test_example.py&lt;/span&gt;

&lt;span class="go"&gt;no changes added to commit (use "git add" and/or "git commit -a")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing you'll notice about git, is that is is very &lt;em&gt;helpful&lt;/em&gt; 😎. It tells us which files have been changed, and what to do if we want to &lt;code&gt;git add&lt;/code&gt; them to our commit, or remove them (&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We also see files that we haven't tracked.&lt;/p&gt;
&lt;p&gt;Finally, git tells us that there are no changes added to the commit, and we can use &lt;code&gt;git commit -a&lt;/code&gt; or &lt;code&gt;git add&lt;/code&gt; to change that.&lt;/p&gt;
&lt;p&gt;Git has the concept of &lt;em&gt;commits&lt;/em&gt;. These are essentially groups of changes (or &lt;em&gt;change sets&lt;/em&gt;). This is why the modifications need to be &lt;em&gt;added&lt;/em&gt; to the commit. As &lt;code&gt;git status&lt;/code&gt; has helpfully stated, we can use &lt;code&gt;git add&lt;/code&gt; to add individual changes (or untracked files), or we can use the &lt;code&gt;-a&lt;/code&gt; flag to &lt;code&gt;git commit&lt;/code&gt; to automatically add any outstanding changes (but leave untracked files alone).&lt;/p&gt;
&lt;p&gt;We don't want to add any of these untracked files, but we do want to add all of the changes, so we'll go ahead and use &lt;code&gt;git commit -a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When this command is executed, git creates a temporary file for us, and will bring up our default editor. Git expects us to provide a &lt;em&gt;commit log message&lt;/em&gt;.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;Usually, the editor is the &lt;a class="reference external" href="https://www.vim.org/"&gt;vim&lt;/a&gt; editor.&lt;/p&gt;
&lt;p class="last"&gt;You can configure this to be nearly any editor you'd like. &lt;a class="reference external" href="https://help.github.com/en/articles/associating-text-editors-with-git"&gt;Here are some examples from github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Our commit messages should be descriptive, but not too long. There's no point in mentioning things that git records in the change set, like which files changed or even which code was altered. Instead, focus on stating &lt;em&gt;why&lt;/em&gt; things changed, and the overall &lt;em&gt;point&lt;/em&gt; of the commit.&lt;/p&gt;
&lt;p&gt;Lets go ahead and execute &lt;code&gt;git commit -a&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git commit -a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's what the content of the file will look like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
# Your branch is up to date with 'origin/master'.
#
# Changes to be committed:
#       modified:   src/random_quote/tests/conftest.py
#       modified:   src/random_quote/tests/test_manager.py
#
# Untracked files:
#       quotes.csv
#       test.db
#       test_example.py
#
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Again, we can see that git is quite helpful 😀. Let's add the following to that file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Added tests for randomness.

Created a new test fixture that makes random tests reproducible.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Save, and exit.&lt;/p&gt;
&lt;p&gt;In a git commit message, the first line should be short and give an overview of what was done. The following lines, if any, can provide more detail. We do this chiefly because most git tools only show a truncated version of that first line.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;There is a lot of opinion and different practices revolving around git commit log messages. We've only scratched the surface of what makes a great message, and further, what makes a great &lt;em&gt;commit&lt;/em&gt;.&lt;/p&gt;
&lt;p class="last"&gt;I like the &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages"&gt;git log standard&lt;/a&gt; used by the &lt;a class="reference external" href="https://www.openstack.org/"&gt;OpenStack project&lt;/a&gt;. Even if you weren't to adopt it verbatim, it's a great outline of things you need to think about when collaborating on a software project. 🦄&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, looking at &lt;code&gt;git log&lt;/code&gt;, we can get a sense of what's been going on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log
&lt;span class="go"&gt;commit f007799b3fa0e45c2ff475930021c0dcea1c63c0 (HEAD -&amp;gt; master)&lt;/span&gt;
&lt;span class="go"&gt;Author: Josh Johnson &amp;lt;jjmojojjmojo@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Sun Jun 9 17:45:53 2019 -0400&lt;/span&gt;

&lt;span class="go"&gt;    Added tests for randomness.&lt;/span&gt;

&lt;span class="go"&gt;    Created a new test fixture that makes random tests reproducible.&lt;/span&gt;

&lt;span class="go"&gt;commit c670c79823aa7c1c10add696795ee0f880d77b98 (origin/master, origin/HEAD)&lt;/span&gt;
&lt;span class="go"&gt;Author: Josh Johnson &amp;lt;jjmojojjmojo@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Dat...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Log entries are listed from newest to oldest.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;On most systems, the output from &lt;code&gt;git log&lt;/code&gt; is run through a &lt;em&gt;pager&lt;/em&gt;, an application that lets you scroll through a program's output in a user-friendly way.&lt;/p&gt;
&lt;p class="last"&gt;On my system, the pager is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Less_(Unix)"&gt;less&lt;/a&gt;. You can quit &lt;code&gt;less&lt;/code&gt; (or a similar but older tool called &lt;code&gt;more&lt;/code&gt;), by typing "q", or control-C.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; has a few common command-line switches that can make reading the log a little less verbose.&lt;/p&gt;
&lt;p&gt;Of particular use, is the &lt;code&gt;--pretty&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline
&lt;span class="go"&gt;f007799b3fa0e45c2ff475930021c0dcea1c63c0 (HEAD -&amp;gt; master) Added tests for randomness.&lt;/span&gt;
&lt;span class="go"&gt;c670c79823aa7c1c10add696795ee0f880d77b98 (origin/master, origin/HEAD) Added in an import that was accidentally removed&lt;/span&gt;
&lt;span class="go"&gt;032f770e0300a61989fa40dc971e5a24a43928bb Added a helper script to make re-cloning easier for me while I edit the blog post&lt;/span&gt;
&lt;span class="go"&gt;22cd1c3266a29e5ed340beaebe75aa398012341c Minor bug fix, removed initial tests that the user of the guide will get to write&lt;/span&gt;
&lt;span class="go"&gt;685149f3f3817f0f05e10b50c8442961f1b7d034 Minor modifications after working through the blog post; Also added quote generation tool&lt;/span&gt;
&lt;span class="go"&gt;fdde2d208e7d4920ba50fa7e9a3148d9f9b632e6 Finished WSGI application&lt;/span&gt;
&lt;span class="go"&gt;71aae3f22ff75164bb53c264470bcbf270108ff1 Finished basic manager functionality and tests&lt;/span&gt;
&lt;span class="go"&gt;05710c963f86869741b2e5c7d5ab2a2760ac0b1e Got init() and ingress() utility functions working. Updated README.&lt;/span&gt;
&lt;span class="go"&gt;7dc344ad654f7dcbe9b59ccb28ff432c1eb3a936 Function and method stubs laid out, fixed gitignore&lt;/span&gt;
&lt;span class="go"&gt;ea81a8a227518baf0ac114ceef4e7c77d02c37ec Initial commit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try other valid options for &lt;code&gt;--pretty&lt;/code&gt;, like &lt;code&gt;short&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another useful command line option for &lt;code&gt;git log&lt;/code&gt; is &lt;code&gt;-n[?]&lt;/code&gt; - you can pass any number to limit the log output to just that many entries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline -n1
&lt;span class="go"&gt;f007799b3fa0e45c2ff475930021c0dcea1c63c0 (HEAD -&amp;gt; master) Added tests for randomness.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;For more details, see &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History"&gt;Git Basics - Viewing the Commit History&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="one-last-thing-web-api-test"&gt;
&lt;h2 id="one last thing! (web api test)"&gt;One last thing! (Web API Test)&lt;/h2&gt;
&lt;p&gt;Before we move on, we need to add one more test. We have a test for the &lt;code&gt;RandomQuoteManager.random()&lt;/code&gt; method, but we haven't added a corresponding test for the WSGI application, &lt;code&gt;RandomQuoteApp&lt;/code&gt;.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Test coverage analysis would have caught this too! 🌈&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's our test. Add it to the bottom of &lt;code&gt;src/random_quote/tests/test_wsgi.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;47
48
49
50
51
52
53
54
55
56
57&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_random_quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Make a GET request for a single random quote&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;preconfigured_wsgi_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/random"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'200 OK'&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Note that we are receiving the &lt;em&gt;same&lt;/em&gt; quote that we got in &lt;code&gt;test_random_quote()&lt;/code&gt; from &lt;code&gt;test_manager.py&lt;/code&gt;. The random seed is working!&lt;/p&gt;
&lt;p&gt;We can run the tests again and see that the new test got picked up, and ran successfully. To be extra-sure, lets use the &lt;code&gt;-v&lt;/code&gt; flag to &lt;code&gt;pytest&lt;/code&gt;, it will give us more detail about what tests were run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; pytest -v src
&lt;span class="go"&gt;============================== test session starts ==============================&lt;/span&gt;
&lt;span class="go"&gt;platform darwin -- Python 3.7.3, pytest-4.6.3, py-1.8.0, pluggy-0.12.0 -- [...]/random_quote/bin/python&lt;/span&gt;
&lt;span class="go"&gt;cachedir: .pytest_cache&lt;/span&gt;
&lt;span class="go"&gt;rootdir: [...]/random_quote&lt;/span&gt;
&lt;span class="go"&gt;collected 8 items&lt;/span&gt;

&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_add_quote PASSED             [ 12%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_get_quote PASSED             [ 25%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_remove_quote PASSED          [ 37%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_all PASSED                   [ 50%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_manager.py::test_random_quote PASSED          [ 62%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_get_quote PASSED                [ 75%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_all_quotes PASSED               [ 87%]&lt;/span&gt;
&lt;span class="go"&gt;src/random_quote/tests/test_wsgi.py::test_random_quote PASSED             [100%]&lt;/span&gt;
&lt;span class="hll"&gt;
&lt;/span&gt;&lt;span class="go"&gt;=========================== 8 passed in 0.36 seconds ============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets &lt;code&gt;git commit&lt;/code&gt; our new test. We'll use the &lt;code&gt;-m&lt;/code&gt; flag this time. This way, we can specify our commit log message on the command line, surrounded by double quotes (&lt;code&gt;"&lt;/code&gt;). It's really handy for small changes like this.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;Be careful of &lt;a class="reference external" href="https://www.oreilly.com/library/view/learning-the-bash/1565923472/ch01s09.html"&gt;special shell characters&lt;/a&gt;, in messages you pass to the &lt;code&gt;-m&lt;/code&gt; switch. If you have to use one, prefix it with a backslash (\).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;First, lets check &lt;code&gt;git status&lt;/code&gt; to make sure we know what we're committing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git status
&lt;span class="go"&gt;On branch master&lt;/span&gt;
&lt;span class="go"&gt;Your branch is ahead of 'origin/master' by 1 commit.&lt;/span&gt;
&lt;span class="go"&gt;  (use "git push" to publish your local commits)&lt;/span&gt;

&lt;span class="go"&gt;Changes not staged for commit:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)&lt;/span&gt;
&lt;span class="go"&gt;  (use "git checkout -- &amp;lt;file&amp;gt;..." to discard changes in working directory)&lt;/span&gt;

&lt;span class="go"&gt;    modified:   src/random_quote/tests/test_wsgi.py&lt;/span&gt;

&lt;span class="go"&gt;Untracked files:&lt;/span&gt;
&lt;span class="go"&gt;  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;

&lt;span class="go"&gt;    quotes.csv&lt;/span&gt;
&lt;span class="go"&gt;    test.db&lt;/span&gt;
&lt;span class="go"&gt;    test_example.py&lt;/span&gt;

&lt;span class="go"&gt;no changes added to commit (use "git add" and/or "git commit -a")&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that now, &lt;code&gt;git status&lt;/code&gt; tells us that we are "ahead of 'orign/master' by 1 commit". That's letting us know we have commits that haven't been sent to the master (or &lt;code&gt;git push&lt;/code&gt;) since we made our clone.&lt;/p&gt;
&lt;p&gt;Ok, so we know what's going to be committed, lets do the commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git commit -a -m&lt;span class="s2"&gt;"Added web API test for a random quote"&lt;/span&gt;
&lt;span class="go"&gt;[master a110267] Added web API test for a random quote&lt;/span&gt;
&lt;span class="go"&gt; 1 file changed, 11 insertions(+)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-publish-our-changes-git-push"&gt;
&lt;h2 id="let's publish our changes (git push)"&gt;Let's Publish Our Changes (&lt;code&gt;git push&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Git is &lt;em&gt;decentralized&lt;/em&gt;. There is a place where you got your copy of the code, this is referred to as a &lt;em&gt;remote&lt;/em&gt;. Each clone, or &lt;em&gt;working copy&lt;/em&gt; of the repository contains all of the changes since the repository was created. We work on our clone of the repository and can view and manipulate any change ever made. We work independently, in perpetuity.&lt;/p&gt;
&lt;p&gt;In order for someone else to use those changes, we need to use send our commits to the remote. This is done via &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The default name for the default remote is &lt;code&gt;origin&lt;/code&gt;. It's not necessary to specify it to &lt;code&gt;git push&lt;/code&gt;, but it's a good habit to get into.&lt;/p&gt;
&lt;p&gt;Lets push our changes to the &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;(random_quote) $&lt;/span&gt; git push origin master
&lt;span class="go"&gt;Enumerating objects: 20, done.&lt;/span&gt;
&lt;span class="go"&gt;Counting objects: 100% (20/20), done.&lt;/span&gt;
&lt;span class="go"&gt;Delta compression using up to 8 threads&lt;/span&gt;
&lt;span class="go"&gt;Compressing objects: 100% (11/11), done.&lt;/span&gt;
&lt;span class="go"&gt;Writing objects: 100% (13/13), 1.19 KiB | 1.19 MiB/s, done.&lt;/span&gt;
&lt;span class="go"&gt;Total 13 (delta 8), reused 0 (delta 0)&lt;/span&gt;
&lt;span class="go"&gt;To [...]/random_quote_remote&lt;/span&gt;
&lt;span class="go"&gt;   c670c79..a110267  master -&amp;gt; master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we did this, anyone else who cloned our repository would not be able to see the commits we made. Now that we have, they can run &lt;code&gt;git fetch&lt;/code&gt; or &lt;code&gt;git pull&lt;/code&gt; and retrieve the commits we made.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;We will be exploring multi-user scenarios &lt;a class="reference external" href="/drafts/branching-git-with-pytest-3.html"&gt;a bit later&lt;/a&gt;! 🌈&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion-what-s-next"&gt;
&lt;h2 id="conclusion/what's next"&gt;Conclusion/What's Next&lt;/h2&gt;
&lt;p&gt;In this installment, we covered the basics of doing work with pytest and git.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="/drafts/branching-git-with-pytest-2.html"&gt;part 2&lt;/a&gt;, we'll dig into how branching works by fixing a bug.&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="git"></category><category term="branching"></category><category term="development process"></category></entry></feed>